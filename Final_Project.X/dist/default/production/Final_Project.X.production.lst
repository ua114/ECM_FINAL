

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sun Dec 09 17:57:36 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           ; Version 2.00
    53                           ; Generated 27/05/2018 GMT
    54                           ; 
    55                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F4331 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	smallconst
    88  000300                     __psmallconst:
    89                           	opt stack 0
    90  000300  00                 	db	0
    91  000301                     _dpowers:
    92                           	opt stack 0
    93  000301  0001               	dw	1
    94  000303  000A               	dw	10
    95  000305  0064               	dw	100
    96  000307  03E8               	dw	1000
    97  000309  2710               	dw	10000
    98  00030B                     __end_of_dpowers:
    99                           	opt stack 0
   100  0000                     _PORTCbits	set	3970
   101  0000                     _ANSEL1	set	4025
   102  0000                     _ANSEL0	set	4024
   103  0000                     _PIE1bits	set	3997
   104  0000                     _INTCONbits	set	4082
   105  0000                     _RCONbits	set	4048
   106  0000                     _RCREG	set	4014
   107  0000                     _PIR1bits	set	3998
   108  0000                     _RCSTAbits	set	4011
   109  0000                     _TXSTAbits	set	4012
   110  0000                     _BAUDCONbits	set	4010
   111  0000                     _SPBRGH	set	4016
   112  0000                     _SPBRG	set	4015
   113  0000                     _OSCCONbits	set	4051
   114  0000                     _OSCCON	set	4051
   115  0000                     _TRISCbits	set	3988
   116  0000                     _CAP2BUFL	set	3942
   117  0000                     _CAP2BUFH	set	3943
   118  0000                     _CAP1BUFL	set	3944
   119  0000                     _CAP1BUFH	set	3945
   120  0000                     _DFLTCON	set	3936
   121  0000                     _T5CON	set	4023
   122  0000                     _CAP2CON	set	3938
   123  0000                     _CAP1CON	set	3939
   124  0000                     _TRISA	set	3986
   125  0000                     _TRISD	set	3989
   126  0000                     _TRISC	set	3988
   127  0000                     _LATA	set	3977
   128  0000                     _LATAbits	set	3977
   129  0000                     _LATC	set	3979
   130  0000                     _LATD	set	3980
   131  0000                     _LATCbits	set	3979
   132  0000                     _LATB	set	3978
   133  0000                     _PTPERH	set	3962
   134  0000                     _PTPERL	set	3963
   135  0000                     _PWMCON1	set	3950
   136  0000                     _PWMCON0	set	3951
   137  0000                     _PTCON1	set	3966
   138  0000                     _PTCON0	set	3967
   139  0000                     _TRISBbits	set	3987
   140  0000                     _PDC1H	set	3958
   141  0000                     _PDC1L	set	3959
   142  0000                     _PDC0H	set	3960
   143  0000                     _PDC0L	set	3961
   144  00030B                     STR_4:
   145  00030B  63                 	db	99	;'c'
   146  00030C  61                 	db	97	;'a'
   147  00030D  6E                 	db	110	;'n'
   148  00030E  20                 	db	32
   149  00030F  77                 	db	119	;'w'
   150  000310  65                 	db	101	;'e'
   151  000311  20                 	db	32
   152  000312  6C                 	db	108	;'l'
   153  000313  65                 	db	101	;'e'
   154  000314  61                 	db	97	;'a'
   155  000315  76                 	db	118	;'v'
   156  000316  65                 	db	101	;'e'
   157  000317  20                 	db	32
   158  000318  6E                 	db	110	;'n'
   159  000319  6F                 	db	111	;'o'
   160  00031A  77                 	db	119	;'w'
   161  00031B  3F                 	db	63	;'?'
   162  00031C  21                 	db	33
   163  00031D  00                 	db	0
   164  00031E                     STR_3:
   165  00031E  50                 	db	80	;'P'
   166  00031F  75                 	db	117	;'u'
   167  000320  73                 	db	115	;'s'
   168  000321  68                 	db	104	;'h'
   169  000322  20                 	db	32
   170  000323  42                 	db	66	;'B'
   171  000324  75                 	db	117	;'u'
   172  000325  74                 	db	116	;'t'
   173  000326  74                 	db	116	;'t'
   174  000327  6F                 	db	111	;'o'
   175  000328  6E                 	db	110	;'n'
   176  000329  00                 	db	0
   177  00032A  4C                 	db	76	;'L'
   178  00032B  3A                 	db	58	;':'
   179  00032C  20                 	db	32
   180  00032D  25                 	db	37
   181  00032E  75                 	db	117	;'u'
   182  00032F  00                 	db	0
   183  000330  52                 	db	82	;'R'
   184  000331  3A                 	db	58	;':'
   185  000332  20                 	db	32
   186  000333  25                 	db	37
   187  000334  75                 	db	117	;'u'
   188  000335  00                 	db	0
   189                           
   190                           ; #config settings
   191  000336  00                 	db	0	; dummy byte at the end
   192  0000                     
   193                           	psect	cinit
   194  00134E                     __pcinit:
   195                           	opt stack 0
   196  00134E                     start_initialization:
   197                           	opt stack 0
   198  00134E                     __initialization:
   199                           	opt stack 0
   200                           
   201                           ; Clear objects allocated to BANK0 (103 bytes)
   202  00134E  EE00  F060         	lfsr	0,__pbssBANK0
   203  001352  0E67               	movlw	103
   204  001354                     clear_0:
   205  001354  6AEE               	clrf	postinc0,c
   206  001356  06E8               	decf	wreg,f,c
   207  001358  E1FD               	bnz	clear_0
   208                           
   209                           ; Clear objects allocated to COMRAM (18 bytes)
   210  00135A  EE00  F02B         	lfsr	0,__pbssCOMRAM
   211  00135E  0E12               	movlw	18
   212  001360                     clear_1:
   213  001360  6AEE               	clrf	postinc0,c
   214  001362  06E8               	decf	wreg,f,c
   215  001364  E1FD               	bnz	clear_1
   216  001366                     end_of_initialization:
   217                           	opt stack 0
   218  001366                     __end_of__initialization:
   219                           	opt stack 0
   220  001366  903D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   221  001368  923D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   222  00136A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   223  00136C  6EF8               	movwf	tblptru,c
   224  00136E  0100               	movlb	0
   225  001370  EF47  F003         	goto	_main	;jump to C main() function
   226                           tblptru	equ	0xFF8
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           
   230                           	psect	bssCOMRAM
   231  00002B                     __pbssCOMRAM:
   232                           	opt stack 0
   233  00002B                     _motorR:
   234                           	opt stack 0
   235  00002B                     	ds	9
   236  000034                     _motorL:
   237                           	opt stack 0
   238  000034                     	ds	9
   239                           tblptru	equ	0xFF8
   240                           postinc0	equ	0xFEE
   241                           wreg	equ	0xFE8
   242                           
   243                           	psect	bssBANK0
   244  000060                     __pbssBANK0:
   245                           	opt stack 0
   246  000060                     _arrayCount:
   247                           	opt stack 0
   248  000060                     	ds	100
   249  0000C4                     _counter:
   250                           	opt stack 0
   251  0000C4                     	ds	2
   252  0000C6                     _read:
   253                           	opt stack 0
   254  0000C6                     	ds	1
   255                           tblptru	equ	0xFF8
   256                           postinc0	equ	0xFEE
   257                           wreg	equ	0xFE8
   258                           
   259                           	psect	cstackBANK0
   260  0000C7                     __pcstackBANK0:
   261                           	opt stack 0
   262  0000C7                     ?___awdiv:
   263                           	opt stack 0
   264  0000C7                     ?___lwmod:
   265                           	opt stack 0
   266  0000C7                     ___awdiv@dividend:
   267                           	opt stack 0
   268  0000C7                     ___lwmod@dividend:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x0
   272  0000C7                     	ds	2
   273  0000C9                     ___awdiv@divisor:
   274                           	opt stack 0
   275  0000C9                     ___lwmod@divisor:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0x2
   279  0000C9                     	ds	2
   280  0000CB                     ?_sprintf:
   281                           	opt stack 0
   282  0000CB                     ___awdiv@counter:
   283                           	opt stack 0
   284  0000CB                     sprintf@sp:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0x4
   288  0000CB                     	ds	1
   289  0000CC                     ___awdiv@sign:
   290                           	opt stack 0
   291                           
   292                           ; 1 bytes @ 0x5
   293  0000CC                     	ds	1
   294  0000CD                     ___awdiv@quotient:
   295                           	opt stack 0
   296  0000CD                     sprintf@f:
   297                           	opt stack 0
   298                           
   299                           ; 3 bytes @ 0x6
   300  0000CD                     	ds	2
   301  0000CF                     ??_setMotorPWM:
   302                           
   303                           ; 1 bytes @ 0x8
   304  0000CF                     	ds	3
   305  0000D2                     ??_sprintf:
   306  0000D2                     setMotorPWM@PWMduty:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0xB
   310  0000D2                     	ds	2
   311  0000D4                     stop@m_L:
   312                           	opt stack 0
   313  0000D4                     turnLeft@m_L:
   314                           	opt stack 0
   315  0000D4                     turnRight@m_L:
   316                           	opt stack 0
   317  0000D4                     forward@m_L:
   318                           	opt stack 0
   319  0000D4                     back@m_L:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0xD
   323  0000D4                     	ds	1
   324  0000D5                     sprintf@flag:
   325                           	opt stack 0
   326                           
   327                           ; 1 bytes @ 0xE
   328  0000D5                     	ds	1
   329  0000D6                     stop@m_R:
   330                           	opt stack 0
   331  0000D6                     turnLeft@m_R:
   332                           	opt stack 0
   333  0000D6                     turnRight@m_R:
   334                           	opt stack 0
   335  0000D6                     forward@m_R:
   336                           	opt stack 0
   337  0000D6                     back@m_R:
   338                           	opt stack 0
   339  0000D6                     sprintf@ap:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0xF
   343  0000D6                     	ds	2
   344  0000D8                     ??_stop:
   345  0000D8                     sprintf@val:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x11
   349  0000D8                     	ds	2
   350  0000DA                     sprintf@prec:
   351                           	opt stack 0
   352  0000DA                     TrackIR@LeftIR:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x13
   356  0000DA                     	ds	1
   357  0000DB                     sprintf@c:
   358                           	opt stack 0
   359                           
   360                           ; 1 bytes @ 0x14
   361  0000DB                     	ds	1
   362  0000DC                     TrackIR@RightIR:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x15
   366  0000DC                     	ds	2
   367  0000DE                     ??_TrackIR:
   368                           
   369                           ; 1 bytes @ 0x17
   370  0000DE                     	ds	3
   371  0000E1                     TrackIR@limit:
   372                           	opt stack 0
   373                           
   374                           ; 2 bytes @ 0x1A
   375  0000E1                     	ds	2
   376  0000E3                     ??_main:
   377                           
   378                           ; 1 bytes @ 0x1C
   379  0000E3                     	ds	4
   380  0000E7                     main@buf:
   381                           	opt stack 0
   382                           
   383                           ; 16 bytes @ 0x20
   384  0000E7                     	ds	16
   385  0000F7                     main@fin:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0x30
   389  0000F7                     	ds	1
   390  0000F8                     main@RightIR:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x31
   394  0000F8                     	ds	2
   395  0000FA                     main@LeftIR:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x33
   399  0000FA                     	ds	2
   400  0000FC                     main@i:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x35
   404  0000FC                     	ds	1
   405                           tblptru	equ	0xFF8
   406                           postinc0	equ	0xFEE
   407                           wreg	equ	0xFE8
   408                           
   409                           	psect	cstackCOMRAM
   410  000001                     __pcstackCOMRAM:
   411                           	opt stack 0
   412  000001                     ??i2_LCDout:
   413  000001                     ?i2___wmul:
   414                           	opt stack 0
   415  000001                     i2___wmul@multiplier:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x0
   419  000001                     	ds	2
   420  000003                     i2___wmul@multiplicand:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x2
   424  000003                     	ds	1
   425  000004                     i2LCDout@number:
   426                           	opt stack 0
   427                           
   428                           ; 1 bytes @ 0x3
   429  000004                     	ds	1
   430  000005                     i2SendLCD@type:
   431                           	opt stack 0
   432  000005                     i2___wmul@product:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x4
   436  000005                     	ds	1
   437  000006                     i2SendLCD@Byte:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0x5
   441  000006                     	ds	1
   442  000007                     ?i2___awdiv:
   443                           	opt stack 0
   444  000007                     i2___awdiv@dividend:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x6
   448  000007                     	ds	2
   449  000009                     i2___awdiv@divisor:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x8
   453  000009                     	ds	2
   454  00000B                     i2___awdiv@counter:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0xA
   458  00000B                     	ds	1
   459  00000C                     i2___awdiv@sign:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0xB
   463  00000C                     	ds	1
   464  00000D                     i2___awdiv@quotient:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0xC
   468  00000D                     	ds	2
   469  00000F                     i2setMotorPWM@m:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0xE
   473  00000F                     	ds	2
   474  000011                     ??i2_setMotorPWM:
   475                           
   476                           ; 1 bytes @ 0x10
   477  000011                     	ds	3
   478  000014                     i2setMotorPWM@PWMduty:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x13
   482  000014                     	ds	2
   483  000016                     i2stop@m_L:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x15
   487  000016                     	ds	2
   488  000018                     i2stop@m_R:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x17
   492  000018                     	ds	2
   493  00001A                     ??i2_stop:
   494                           
   495                           ; 1 bytes @ 0x19
   496  00001A                     	ds	2
   497  00001C                     ??_InterruptHandlerHigh:
   498                           
   499                           ; 1 bytes @ 0x1B
   500  00001C                     	ds	4
   501  000020                     InterruptHandlerHigh@read_counter:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x1F
   505  000020                     	ds	2
   506  000022                     InterruptHandlerHigh@readIn:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x21
   510  000022                     	ds	1
   511  000023                     ??_LCDout:
   512  000023                     ?___wmul:
   513                           	opt stack 0
   514  000023                     ?___lwdiv:
   515                           	opt stack 0
   516  000023                     initPWM@period:
   517                           	opt stack 0
   518  000023                     FindIR@L_IR:
   519                           	opt stack 0
   520  000023                     ___wmul@multiplier:
   521                           	opt stack 0
   522  000023                     ___lwdiv@dividend:
   523                           	opt stack 0
   524                           
   525                           ; 2 bytes @ 0x22
   526  000023                     	ds	2
   527  000025                     FindIR@R_IR:
   528                           	opt stack 0
   529  000025                     Motor_Init@PWMcycle:
   530                           	opt stack 0
   531  000025                     ___wmul@multiplicand:
   532                           	opt stack 0
   533  000025                     ___lwdiv@divisor:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x24
   537  000025                     	ds	1
   538  000026                     LCDout@number:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x25
   542  000026                     	ds	1
   543  000027                     ??_FindIR:
   544  000027                     SendLCD@type:
   545                           	opt stack 0
   546  000027                     ___wmul@product:
   547                           	opt stack 0
   548  000027                     ___lwdiv@quotient:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x26
   552  000027                     	ds	1
   553  000028                     SendLCD@Byte:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x27
   557  000028                     	ds	1
   558  000029                     ??_LCD_Init:
   559  000029                     SetLine@line:
   560                           	opt stack 0
   561  000029                     ___lwdiv@counter:
   562                           	opt stack 0
   563  000029                     setMotorPWM@m:
   564                           	opt stack 0
   565  000029                     LCD_String@string:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x28
   569  000029                     	ds	1
   570  00002A                     ___lwmod@counter:
   571                           	opt stack 0
   572                           
   573                           ; 1 bytes @ 0x29
   574  00002A                     	ds	1
   575  00002B                     tblptru	equ	0xFF8
   576                           postinc0	equ	0xFEE
   577                           wreg	equ	0xFE8
   578                           
   579                           ; 1 bytes @ 0x2A
   580 ;;
   581 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   582 ;;
   583 ;; *************** function _main *****************
   584 ;; Defined at:
   585 ;;		line 212 in file "newFILE.c"
   586 ;; Parameters:    Size  Location     Type
   587 ;;		None
   588 ;; Auto vars:     Size  Location     Type
   589 ;;  buf            16   32[BANK0 ] unsigned char [16]
   590 ;;  LeftIR          2   51[BANK0 ] unsigned int 
   591 ;;  RightIR         2   49[BANK0 ] unsigned int 
   592 ;;  i               1   53[BANK0 ] unsigned char 
   593 ;;  fin             1   48[BANK0 ] unsigned char 
   594 ;; Return value:  Size  Location     Type
   595 ;;                  1    wreg      void 
   596 ;; Registers used:
   597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   598 ;; Tracked objects:
   599 ;;		On entry : 0/0
   600 ;;		On exit  : 0/0
   601 ;;		Unchanged: 0/0
   602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   603 ;;      Params:         0       0       0       0
   604 ;;      Locals:         0      22       0       0
   605 ;;      Temps:          0       4       0       0
   606 ;;      Totals:         0      26       0       0
   607 ;;Total ram usage:       26 bytes
   608 ;; Hardware stack levels required when called:    8
   609 ;; This function calls:
   610 ;;		_FindIR
   611 ;;		_IR_Init
   612 ;;		_Init
   613 ;;		_InterruptINIT
   614 ;;		_LCD_Init
   615 ;;		_LCD_String
   616 ;;		_Motor_Init
   617 ;;		_SendLCD
   618 ;;		_SetLine
   619 ;;		_TrackIR
   620 ;;		___lwdiv
   621 ;;		_back
   622 ;;		_sprintf
   623 ;;		_stop
   624 ;;		_turnLeft
   625 ;;		_turnRight
   626 ;; This function is called by:
   627 ;;		Startup code after reset
   628 ;; This function uses a non-reentrant model
   629 ;;
   630                           
   631                           	psect	text0
   632  00068E                     __ptext0:
   633                           	opt stack 0
   634  00068E                     _main:
   635                           	opt stack 23
   636                           
   637                           ;newFILE.c: 213: ANSEL0=0;
   638                           
   639                           ;incstack = 0
   640  00068E  0E00               	movlw	0
   641  000690  6EB8               	movwf	4024,c	;volatile
   642                           
   643                           ;newFILE.c: 214: ANSEL1=0;
   644  000692  0E00               	movlw	0
   645  000694  6EB9               	movwf	4025,c	;volatile
   646                           
   647                           ;newFILE.c: 215: OSCCON = 0x72;
   648  000696  0E72               	movlw	114
   649  000698  6ED3               	movwf	4051,c	;volatile
   650  00069A  A4D3               	btfss	4051,2,c	;volatile
   651  00069C  D7FE               	goto	l272
   652                           
   653                           ;newFILE.c: 218: unsigned int RightIR;;newFILE.c: 219: unsigned int LeftIR;;newFILE.c: 2
      +                          20: unsigned char buf[16];;newFILE.c: 223: LCD_Init();
   654  00069E  ECAC  F006         	call	_LCD_Init	;wreg free
   655                           
   656                           ;newFILE.c: 224: InterruptINIT();
   657  0006A2  EC39  F00A         	call	_InterruptINIT	;wreg free
   658                           
   659                           ;newFILE.c: 225: IR_Init();
   660  0006A6  EC1E  F00A         	call	_IR_Init	;wreg free
   661                           
   662                           ;newFILE.c: 226: Motor_Init();
   663  0006AA  ECF6  F007         	call	_Motor_Init	;wreg free
   664                           
   665                           ;newFILE.c: 227: Init();
   666  0006AE  ECE0  F009         	call	_Init	;wreg free
   667                           
   668                           ;newFILE.c: 228: stop(&motorL, &motorR);
   669  0006B2  0E34               	movlw	low _motorL
   670  0006B4  0100               	movlb	0	; () banked
   671  0006B6  6FD4               	movwf	stop@m_L& (0+255),b
   672  0006B8  0E00               	movlw	high _motorL
   673  0006BA  6FD5               	movwf	(stop@m_L+1)& (0+255),b
   674  0006BC  0E2B               	movlw	low _motorR
   675  0006BE  6FD6               	movwf	stop@m_R& (0+255),b
   676  0006C0  0E00               	movlw	high _motorR
   677  0006C2  6FD7               	movwf	(stop@m_R+1)& (0+255),b
   678  0006C4  EC8C  F007         	call	_stop	;wreg free
   679                           
   680                           ;newFILE.c: 229: TRISCbits.RC3 = 1;
   681  0006C8  8694               	bsf	3988,3,c	;volatile
   682                           
   683                           ;newFILE.c: 230: char i;;newFILE.c: 231: sprintf(buf,"Push Button");
   684  0006CA  0EE7               	movlw	low main@buf
   685  0006CC  0100               	movlb	0	; () banked
   686  0006CE  6FCB               	movwf	sprintf@sp& (0+255),b
   687  0006D0  0E00               	movlw	high main@buf
   688  0006D2  6FCC               	movwf	(sprintf@sp+1)& (0+255),b
   689  0006D4  0E1E               	movlw	low STR_3
   690  0006D6  6FCD               	movwf	sprintf@f& (0+255),b
   691  0006D8  0E03               	movlw	high STR_3
   692  0006DA  6FCE               	movwf	(sprintf@f+1)& (0+255),b
   693  0006DC  51CD               	movf	sprintf@f& (0+255),w,b
   694  0006DE  11CE               	iorwf	(sprintf@f+1)& (0+255),w,b
   695  0006E0  A4D8               	btfss	status,2,c
   696  0006E2  0E00               	movlw	low (__mediumconst shr (0+16))
   697  0006E4  6FCF               	movwf	(sprintf@f+2)& (0+255),b
   698  0006E6  EC03  F006         	call	_sprintf	;wreg free
   699                           
   700                           ;newFILE.c: 232: LCD_String(buf);
   701  0006EA  0EE7               	movlw	low main@buf
   702  0006EC  6E29               	movwf	LCD_String@string,c
   703  0006EE  0E00               	movlw	high main@buf
   704  0006F0  6E2A               	movwf	LCD_String@string+1,c
   705  0006F2  ECFC  F008         	call	_LCD_String	;wreg free
   706                           
   707                           ;newFILE.c: 233: SetLine(2);
   708  0006F6  0E02               	movlw	2
   709  0006F8  EC14  F009         	call	_SetLine
   710                           
   711                           ;newFILE.c: 234: sprintf(buf,"can we leave now?!");;
   712  0006FC  0EE7               	movlw	low main@buf
   713  0006FE  0100               	movlb	0	; () banked
   714  000700  6FCB               	movwf	sprintf@sp& (0+255),b
   715  000702  0E00               	movlw	high main@buf
   716  000704  6FCC               	movwf	(sprintf@sp+1)& (0+255),b
   717  000706  0E0B               	movlw	low STR_4
   718  000708  6FCD               	movwf	sprintf@f& (0+255),b
   719  00070A  0E03               	movlw	high STR_4
   720  00070C  6FCE               	movwf	(sprintf@f+1)& (0+255),b
   721  00070E  51CD               	movf	sprintf@f& (0+255),w,b
   722  000710  11CE               	iorwf	(sprintf@f+1)& (0+255),w,b
   723  000712  A4D8               	btfss	status,2,c
   724  000714  0E00               	movlw	low (__mediumconst shr (0+16))
   725  000716  6FCF               	movwf	(sprintf@f+2)& (0+255),b
   726  000718  EC03  F006         	call	_sprintf	;wreg free
   727                           
   728                           ;newFILE.c: 235: LCD_String(buf);
   729  00071C  0EE7               	movlw	low main@buf
   730  00071E  6E29               	movwf	LCD_String@string,c
   731  000720  0E00               	movlw	high main@buf
   732  000722  6E2A               	movwf	LCD_String@string+1,c
   733  000724  ECFC  F008         	call	_LCD_String	;wreg free
   734  000728  A682               	btfss	3970,3,c	;volatile
   735  00072A  D7FE               	goto	l275
   736                           
   737                           ;newFILE.c: 238: _delay((unsigned long)((100)*(8000000/4000.0)));
   738  00072C  0E02               	movlw	2
   739  00072E  0100               	movlb	0	; () banked
   740  000730  6FE4               	movwf	(??_main+1)& (0+255),b
   741  000732  0E04               	movlw	4
   742  000734  6FE3               	movwf	??_main& (0+255),b
   743  000736  0EBA               	movlw	186
   744  000738                     u1747:
   745  000738  2EE8               	decfsz	wreg,f,c
   746  00073A  D7FE               	bra	u1747
   747  00073C  2FE3               	decfsz	??_main& (0+255),f,b
   748  00073E  D7FC               	bra	u1747
   749  000740  2FE4               	decfsz	(??_main+1)& (0+255),f,b
   750  000742  D7FA               	bra	u1747
   751  000744  F000               	nop	
   752                           
   753                           ;newFILE.c: 239: SendLCD(0b00000001,0);
   754  000746  0E00               	movlw	0
   755  000748  6E27               	movwf	SendLCD@type,c
   756  00074A  0E01               	movlw	1
   757  00074C  EC7F  F009         	call	_SendLCD
   758                           
   759                           ;newFILE.c: 240: read=0;
   760  000750  0E00               	movlw	0
   761  000752  0100               	movlb	0	; () banked
   762  000754  6FC6               	movwf	_read& (0+255),b
   763                           
   764                           ; BSR set to: 0
   765                           ;newFILE.c: 241: char fin=0;
   766  000756  0E00               	movlw	0
   767  000758  6FF7               	movwf	main@fin& (0+255),b
   768  00075A                     
   769                           ; BSR set to: 0
   770                           ;newFILE.c: 243: if(read ==0){
   771                           
   772                           ; BSR set to: 0
   773  00075A  51C6               	movf	_read& (0+255),w,b
   774  00075C  A4D8               	btfss	status,2,c
   775  00075E  D030               	goto	l278
   776                           
   777                           ; BSR set to: 0
   778                           ;newFILE.c: 244: FindIR(&LeftIR, &RightIR);
   779  000760  0EFA               	movlw	low main@LeftIR
   780  000762  6E23               	movwf	FindIR@L_IR,c
   781  000764  0E00               	movlw	high main@LeftIR
   782  000766  6E24               	movwf	FindIR@L_IR+1,c
   783  000768  0EF8               	movlw	low main@RightIR
   784  00076A  6E25               	movwf	FindIR@R_IR,c
   785  00076C  0E00               	movlw	high main@RightIR
   786  00076E  6E26               	movwf	FindIR@R_IR+1,c
   787  000770  EC6F  F008         	call	_FindIR	;wreg free
   788                           
   789                           ;newFILE.c: 245: RightIR = RightIR/100;
   790  000774  C0F8  F023         	movff	main@RightIR,___lwdiv@dividend
   791  000778  C0F9  F024         	movff	main@RightIR+1,___lwdiv@dividend+1
   792  00077C  0E00               	movlw	0
   793  00077E  6E26               	movwf	___lwdiv@divisor+1,c
   794  000780  0E64               	movlw	100
   795  000782  6E25               	movwf	___lwdiv@divisor,c
   796  000784  EC21  F008         	call	___lwdiv	;wreg free
   797  000788  C023  F0F8         	movff	?___lwdiv,main@RightIR
   798  00078C  C024  F0F9         	movff	?___lwdiv+1,main@RightIR+1
   799                           
   800                           ;newFILE.c: 246: LeftIR = LeftIR/100;
   801  000790  C0FA  F023         	movff	main@LeftIR,___lwdiv@dividend
   802  000794  C0FB  F024         	movff	main@LeftIR+1,___lwdiv@dividend+1
   803  000798  0E00               	movlw	0
   804  00079A  6E26               	movwf	___lwdiv@divisor+1,c
   805  00079C  0E64               	movlw	100
   806  00079E  6E25               	movwf	___lwdiv@divisor,c
   807  0007A0  EC21  F008         	call	___lwdiv	;wreg free
   808  0007A4  C023  F0FA         	movff	?___lwdiv,main@LeftIR
   809  0007A8  C024  F0FB         	movff	?___lwdiv+1,main@LeftIR+1
   810                           
   811                           ;newFILE.c: 248: TrackIR(LeftIR, RightIR);
   812  0007AC  C0FA  F0DA         	movff	main@LeftIR,TrackIR@LeftIR
   813  0007B0  C0FB  F0DB         	movff	main@LeftIR+1,TrackIR@LeftIR+1
   814  0007B4  C0F8  F0DC         	movff	main@RightIR,TrackIR@RightIR
   815  0007B8  C0F9  F0DD         	movff	main@RightIR+1,TrackIR@RightIR+1
   816  0007BC  EC9C  F001         	call	_TrackIR	;wreg free
   817  0007C0                     l278:
   818                           
   819                           ;newFILE.c: 250: };newFILE.c: 252: if (read==1 && fin==0)
   820  0007C0  0100               	movlb	0	; () banked
   821  0007C2  05C6               	decf	_read& (0+255),w,b
   822  0007C4  A4D8               	btfss	status,2,c
   823  0007C6  D7C9               	goto	l277
   824                           
   825                           ; BSR set to: 0
   826  0007C8  51F7               	movf	main@fin& (0+255),w,b
   827  0007CA  A4D8               	btfss	status,2,c
   828  0007CC  D7C6               	goto	l277
   829                           
   830                           ; BSR set to: 0
   831                           ;newFILE.c: 253: {;newFILE.c: 254: for (i=0; i<counter; i++)
   832  0007CE  0E00               	movlw	0
   833  0007D0  6FFC               	movwf	main@i& (0+255),b
   834  0007D2  D084               	goto	l280
   835  0007D4                     
   836                           ; BSR set to: 0
   837                           ;newFILE.c: 255: {;newFILE.c: 256: if(arrayCount[counter-i]==0)
   838                           
   839                           ; BSR set to: 0
   840  0007D4  51FC               	movf	main@i& (0+255),w,b
   841  0007D6  6FE3               	movwf	??_main& (0+255),b
   842  0007D8  6BE4               	clrf	(??_main+1)& (0+255),b
   843  0007DA  1FE3               	comf	??_main& (0+255),f,b
   844  0007DC  1FE4               	comf	(??_main+1)& (0+255),f,b
   845  0007DE  4BE3               	infsnz	??_main& (0+255),f,b
   846  0007E0  2BE4               	incf	(??_main+1)& (0+255),f,b
   847  0007E2  51C4               	movf	_counter& (0+255),w,b
   848  0007E4  27E3               	addwf	??_main& (0+255),f,b
   849  0007E6  51C5               	movf	(_counter+1)& (0+255),w,b
   850  0007E8  23E4               	addwfc	(??_main+1)& (0+255),f,b
   851  0007EA  90D8               	bcf	status,0,c
   852  0007EC  37E3               	rlcf	??_main& (0+255),f,b
   853  0007EE  37E4               	rlcf	(??_main+1)& (0+255),f,b
   854  0007F0  0E60               	movlw	low _arrayCount
   855  0007F2  25E3               	addwf	??_main& (0+255),w,b
   856  0007F4  6ED9               	movwf	fsr2l,c
   857  0007F6  0E00               	movlw	high _arrayCount
   858  0007F8  21E4               	addwfc	(??_main+1)& (0+255),w,b
   859  0007FA  6EDA               	movwf	fsr2h,c
   860  0007FC  50DE               	movf	postinc2,w,c
   861  0007FE  10DE               	iorwf	postinc2,w,c
   862  000800  A4D8               	btfss	status,2,c
   863  000802  D00B               	goto	l282
   864                           
   865                           ; BSR set to: 0
   866                           ;newFILE.c: 257: {;newFILE.c: 258: back(&motorL, &motorR);
   867  000804  0E34               	movlw	low _motorL
   868  000806  6FD4               	movwf	back@m_L& (0+255),b
   869  000808  0E00               	movlw	high _motorL
   870  00080A  6FD5               	movwf	(back@m_L+1)& (0+255),b
   871  00080C  0E2B               	movlw	low _motorR
   872  00080E  6FD6               	movwf	back@m_R& (0+255),b
   873  000810  0E00               	movlw	high _motorR
   874  000812  6FD7               	movwf	(back@m_R+1)& (0+255),b
   875  000814  EC2B  F009         	call	_back	;wreg free
   876                           
   877                           ;newFILE.c: 259: } else if(arrayCount[counter-i]==1)
   878  000818  D048               	goto	l286
   879  00081A                     l282:
   880  00081A  0100               	movlb	0	; () banked
   881  00081C  51FC               	movf	main@i& (0+255),w,b
   882  00081E  6FE3               	movwf	??_main& (0+255),b
   883  000820  6BE4               	clrf	(??_main+1)& (0+255),b
   884  000822  1FE3               	comf	??_main& (0+255),f,b
   885  000824  1FE4               	comf	(??_main+1)& (0+255),f,b
   886  000826  4BE3               	infsnz	??_main& (0+255),f,b
   887  000828  2BE4               	incf	(??_main+1)& (0+255),f,b
   888  00082A  51C4               	movf	_counter& (0+255),w,b
   889  00082C  27E3               	addwf	??_main& (0+255),f,b
   890  00082E  51C5               	movf	(_counter+1)& (0+255),w,b
   891  000830  23E4               	addwfc	(??_main+1)& (0+255),f,b
   892  000832  90D8               	bcf	status,0,c
   893  000834  37E3               	rlcf	??_main& (0+255),f,b
   894  000836  37E4               	rlcf	(??_main+1)& (0+255),f,b
   895  000838  0E60               	movlw	low _arrayCount
   896  00083A  25E3               	addwf	??_main& (0+255),w,b
   897  00083C  6ED9               	movwf	fsr2l,c
   898  00083E  0E00               	movlw	high _arrayCount
   899  000840  21E4               	addwfc	(??_main+1)& (0+255),w,b
   900  000842  6EDA               	movwf	fsr2h,c
   901  000844  04DE               	decf	postinc2,w,c
   902  000846  10DE               	iorwf	postinc2,w,c
   903  000848  A4D8               	btfss	status,2,c
   904  00084A  D00B               	goto	l284
   905                           
   906                           ; BSR set to: 0
   907                           ;newFILE.c: 260: {;newFILE.c: 261: turnRight(&motorL, &motorR);
   908  00084C  0E34               	movlw	low _motorL
   909  00084E  6FD4               	movwf	turnRight@m_L& (0+255),b
   910  000850  0E00               	movlw	high _motorL
   911  000852  6FD5               	movwf	(turnRight@m_L+1)& (0+255),b
   912  000854  0E2B               	movlw	low _motorR
   913  000856  6FD6               	movwf	turnRight@m_R& (0+255),b
   914  000858  0E00               	movlw	high _motorR
   915  00085A  6FD7               	movwf	(turnRight@m_R+1)& (0+255),b
   916  00085C  EC40  F009         	call	_turnRight	;wreg free
   917                           
   918                           ;newFILE.c: 262: } else if(arrayCount[counter-i]==2)
   919  000860  D024               	goto	l286
   920  000862                     l284:
   921  000862  0100               	movlb	0	; () banked
   922  000864  51FC               	movf	main@i& (0+255),w,b
   923  000866  6FE3               	movwf	??_main& (0+255),b
   924  000868  6BE4               	clrf	(??_main+1)& (0+255),b
   925  00086A  1FE3               	comf	??_main& (0+255),f,b
   926  00086C  1FE4               	comf	(??_main+1)& (0+255),f,b
   927  00086E  4BE3               	infsnz	??_main& (0+255),f,b
   928  000870  2BE4               	incf	(??_main+1)& (0+255),f,b
   929  000872  51C4               	movf	_counter& (0+255),w,b
   930  000874  27E3               	addwf	??_main& (0+255),f,b
   931  000876  51C5               	movf	(_counter+1)& (0+255),w,b
   932  000878  23E4               	addwfc	(??_main+1)& (0+255),f,b
   933  00087A  90D8               	bcf	status,0,c
   934  00087C  37E3               	rlcf	??_main& (0+255),f,b
   935  00087E  37E4               	rlcf	(??_main+1)& (0+255),f,b
   936  000880  0E60               	movlw	low _arrayCount
   937  000882  25E3               	addwf	??_main& (0+255),w,b
   938  000884  6ED9               	movwf	fsr2l,c
   939  000886  0E00               	movlw	high _arrayCount
   940  000888  21E4               	addwfc	(??_main+1)& (0+255),w,b
   941  00088A  6EDA               	movwf	fsr2h,c
   942  00088C  0E02               	movlw	2
   943  00088E  18DE               	xorwf	postinc2,w,c
   944  000890  10DE               	iorwf	postinc2,w,c
   945  000892  A4D8               	btfss	status,2,c
   946  000894  D00A               	goto	l286
   947                           
   948                           ; BSR set to: 0
   949                           ;newFILE.c: 263: {;newFILE.c: 264: turnLeft(&motorL, &motorR);
   950  000896  0E34               	movlw	low _motorL
   951  000898  6FD4               	movwf	turnLeft@m_L& (0+255),b
   952  00089A  0E00               	movlw	high _motorL
   953  00089C  6FD5               	movwf	(turnLeft@m_L+1)& (0+255),b
   954  00089E  0E2B               	movlw	low _motorR
   955  0008A0  6FD6               	movwf	turnLeft@m_R& (0+255),b
   956  0008A2  0E00               	movlw	high _motorR
   957  0008A4  6FD7               	movwf	(turnLeft@m_R+1)& (0+255),b
   958  0008A6  EC55  F009         	call	_turnLeft	;wreg free
   959  0008AA                     l286:
   960                           
   961                           ;newFILE.c: 265: };newFILE.c: 266: _delay((unsigned long)((400)*(8000000/4000.0)));
   962  0008AA  0E05               	movlw	5
   963  0008AC  0100               	movlb	0	; () banked
   964  0008AE  6FE4               	movwf	(??_main+1)& (0+255),b
   965  0008B0  0E0F               	movlw	15
   966  0008B2  6FE3               	movwf	??_main& (0+255),b
   967  0008B4  0EF1               	movlw	241
   968  0008B6                     u1757:
   969  0008B6  2EE8               	decfsz	wreg,f,c
   970  0008B8  D7FE               	bra	u1757
   971  0008BA  2FE3               	decfsz	??_main& (0+255),f,b
   972  0008BC  D7FC               	bra	u1757
   973  0008BE  2FE4               	decfsz	(??_main+1)& (0+255),f,b
   974  0008C0  D7FA               	bra	u1757
   975                           
   976                           ;newFILE.c: 267: stop(&motorL, &motorR);
   977  0008C2  0E34               	movlw	low _motorL
   978  0008C4  0100               	movlb	0	; () banked
   979  0008C6  6FD4               	movwf	stop@m_L& (0+255),b
   980  0008C8  0E00               	movlw	high _motorL
   981  0008CA  6FD5               	movwf	(stop@m_L+1)& (0+255),b
   982  0008CC  0E2B               	movlw	low _motorR
   983  0008CE  6FD6               	movwf	stop@m_R& (0+255),b
   984  0008D0  0E00               	movlw	high _motorR
   985  0008D2  6FD7               	movwf	(stop@m_R+1)& (0+255),b
   986  0008D4  EC8C  F007         	call	_stop	;wreg free
   987  0008D8  0100               	movlb	0	; () banked
   988  0008DA  2BFC               	incf	main@i& (0+255),f,b
   989  0008DC                     l280:
   990                           
   991                           ; BSR set to: 0
   992  0008DC  51FC               	movf	main@i& (0+255),w,b
   993  0008DE  6FE3               	movwf	??_main& (0+255),b
   994  0008E0  6BE4               	clrf	(??_main+1)& (0+255),b
   995  0008E2  51C4               	movf	_counter& (0+255),w,b
   996  0008E4  5DE3               	subwf	??_main& (0+255),w,b
   997  0008E6  51C5               	movf	(_counter+1)& (0+255),w,b
   998  0008E8  59E4               	subwfb	(??_main+1)& (0+255),w,b
   999  0008EA  A0D8               	btfss	status,0,c
  1000  0008EC  D773               	goto	l281
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;newFILE.c: 268: };newFILE.c: 269: fin=1;
  1004                           
  1005                           ; BSR set to: 0
  1006  0008EE  0E01               	movlw	1
  1007  0008F0  D733               	goto	L1
  1008  0008F2                     __end_of_main:
  1009                           	opt stack 0
  1010                           tblptru	equ	0xFF8
  1011                           postinc0	equ	0xFEE
  1012                           wreg	equ	0xFE8
  1013                           postinc2	equ	0xFDE
  1014                           fsr2h	equ	0xFDA
  1015                           fsr2l	equ	0xFD9
  1016                           status	equ	0xFD8
  1017                           
  1018 ;; *************** function _sprintf *****************
  1019 ;; Defined at:
  1020 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  1021 ;; Parameters:    Size  Location     Type
  1022 ;;  sp              2    4[BANK0 ] PTR unsigned char 
  1023 ;;		 -> main@buf(16), IRScreen2@buf(16), IRScreen@buf(16), 
  1024 ;;  f               3    6[BANK0 ] PTR const unsigned char 
  1025 ;;		 -> STR_4(19), STR_3(12), ROM(8191), STR_2(6), 
  1026 ;;		 -> STR_1(6), 
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;  tmpval          4    0        struct .
  1029 ;;  cp              3    0        PTR const unsigned char 
  1030 ;;  val             2   17[BANK0 ] unsigned int 
  1031 ;;  ap              2   15[BANK0 ] PTR void [1]
  1032 ;;		 -> ?_sprintf(2), 
  1033 ;;  len             2    0        unsigned int 
  1034 ;;  c               1   20[BANK0 ] unsigned char 
  1035 ;;  prec            1   19[BANK0 ] char 
  1036 ;;  flag            1   14[BANK0 ] unsigned char 
  1037 ;; Return value:  Size  Location     Type
  1038 ;;                  2    4[BANK0 ] int 
  1039 ;; Registers used:
  1040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1041 ;; Tracked objects:
  1042 ;;		On entry : 0/0
  1043 ;;		On exit  : 0/0
  1044 ;;		Unchanged: 0/0
  1045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1046 ;;      Params:         0       7       0       0
  1047 ;;      Locals:         0       7       0       0
  1048 ;;      Temps:          0       3       0       0
  1049 ;;      Totals:         0      17       0       0
  1050 ;;Total ram usage:       17 bytes
  1051 ;; Hardware stack levels used:    1
  1052 ;; Hardware stack levels required when called:    5
  1053 ;; This function calls:
  1054 ;;		___lwdiv
  1055 ;;		___lwmod
  1056 ;; This function is called by:
  1057 ;;		_main
  1058 ;;		_IRScreen
  1059 ;;		_IRScreen2
  1060 ;; This function uses a non-reentrant model
  1061 ;;
  1062                           
  1063                           	psect	text1
  1064  000C06                     __ptext1:
  1065                           	opt stack 0
  1066  000C06                     _sprintf:
  1067                           	opt stack 25
  1068                           
  1069                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 516: signed char prec;;dopr
      +                          nt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;d
      +                          oprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned int val;;do
      +                          prnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = __va_sta
      +                          rt();
  1070                           
  1071                           ; BSR set to: 0
  1072                           ;incstack = 0
  1073  000C06  0ED0               	movlw	low (?_sprintf+5)
  1074  000C08  0100               	movlb	0	; () banked
  1075  000C0A  6FD6               	movwf	sprintf@ap& (0+255),b
  1076  000C0C  0E00               	movlw	high (?_sprintf+5)
  1077  000C0E  6FD7               	movwf	(sprintf@ap+1)& (0+255),b
  1078                           
  1079                           ;doprnt.c: 548: while((c = *f++)) {
  1080  000C10  D086               	goto	u1480
  1081  000C12                     
  1082                           ; BSR set to: 0
  1083                           ;doprnt.c: 550: if(c != '%')
  1084                           
  1085                           ; BSR set to: 0
  1086  000C12  0E25               	movlw	37
  1087  000C14  19DB               	xorwf	sprintf@c& (0+255),w,b
  1088  000C16  B4D8               	btfsc	status,2,c
  1089  000C18  D004               	goto	l301
  1090  000C1A  D006               	goto	l305
  1091  000C1C                     l2639:
  1092                           
  1093                           ; BSR set to: 0
  1094  000C1C  4BCB               	infsnz	sprintf@sp& (0+255),f,b
  1095  000C1E  2BCC               	incf	(sprintf@sp+1)& (0+255),f,b
  1096                           
  1097                           ;doprnt.c: 554: continue;
  1098  000C20  D07E               	goto	u1480
  1099  000C22                     l301:
  1100                           
  1101                           ; BSR set to: 0
  1102                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
  1103                           
  1104                           ; BSR set to: 0
  1105  000C22  0E00               	movlw	0
  1106  000C24  6FD5               	movwf	sprintf@flag& (0+255),b
  1107                           
  1108                           ;doprnt.c: 654: switch(c = *f++) {
  1109  000C26  D00A               	goto	l302
  1110  000C28                     l305:
  1111                           
  1112                           ; BSR set to: 0
  1113                           ;doprnt.c: 828: ((*sp++ = (c)));
  1114                           
  1115                           ; BSR set to: 0
  1116  000C28  C0CB  FFD9         	movff	sprintf@sp,fsr2l
  1117  000C2C  C0CC  FFDA         	movff	sprintf@sp+1,fsr2h
  1118  000C30  C0DB  FFDF         	movff	sprintf@c,indf2
  1119  000C34  D7F3               	goto	l2639
  1120  000C36                     
  1121                           ; BSR set to: 0
  1122                           ;doprnt.c: 837: flag |= 0xC0;
  1123                           
  1124                           ; BSR set to: 0
  1125  000C36  0EC0               	movlw	192
  1126  000C38  13D5               	iorwf	sprintf@flag& (0+255),f,b
  1127                           
  1128                           ; BSR set to: 0
  1129                           ;doprnt.c: 841: }
  1130                           
  1131                           ;doprnt.c: 838: break;
  1132  000C3A  D01B               	goto	l307
  1133  000C3C                     l302:
  1134                           
  1135                           ; BSR set to: 0
  1136                           
  1137                           ; BSR set to: 0
  1138  000C3C  C0CD  F0D2         	movff	sprintf@f,??_sprintf
  1139  000C40  C0CE  F0D3         	movff	sprintf@f+1,??_sprintf+1
  1140  000C44  C0CF  F0D4         	movff	sprintf@f+2,??_sprintf+2
  1141  000C48  2BCD               	incf	sprintf@f& (0+255),f,b
  1142  000C4A  0E00               	movlw	0
  1143  000C4C  23CE               	addwfc	(sprintf@f+1)& (0+255),f,b
  1144  000C4E  23CF               	addwfc	(sprintf@f+2)& (0+255),f,b
  1145  000C50  C0D2  FFF6         	movff	??_sprintf,tblptrl
  1146  000C54  C0D3  FFF7         	movff	??_sprintf+1,tblptrh
  1147  000C58  C0D4  FFF8         	movff	??_sprintf+2,tblptru
  1148  000C5C  0008               	tblrd		*
  1149  000C5E  CFF5 F0DB          	movff	tablat,sprintf@c
  1150  000C62  51DB               	movf	sprintf@c& (0+255),w,b
  1151                           
  1152                           ; Switch size 1, requested type "space"
  1153                           ; Number of cases is 2, Range of values is 0 to 117
  1154                           ; switch strategies available:
  1155                           ; Name         Instructions Cycles
  1156                           ; simple_byte            7     4 (average)
  1157                           ;	Chosen strategy is simple_byte
  1158  000C64  0A00               	xorlw	0	; case 0
  1159  000C66  B4D8               	btfsc	status,2,c
  1160  000C68  D070               	goto	u1490
  1161  000C6A  0A75               	xorlw	117	; case 117
  1162  000C6C  B4D8               	btfsc	status,2,c
  1163  000C6E  D7E3               	goto	l306
  1164  000C70  D7DB               	goto	l305
  1165  000C72                     l307:
  1166                           
  1167                           ; BSR set to: 0
  1168                           ;doprnt.c: 1292: {;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (uns
      +                          igned)0));
  1169                           
  1170                           ; BSR set to: 0
  1171  000C72  C0D6  FFD9         	movff	sprintf@ap,fsr2l
  1172  000C76  C0D7  FFDA         	movff	sprintf@ap+1,fsr2h
  1173  000C7A  CFDE F0D8          	movff	postinc2,sprintf@val
  1174  000C7E  CFDD F0D9          	movff	postdec2,sprintf@val+1
  1175                           
  1176                           ; BSR set to: 0
  1177  000C82  0E02               	movlw	2
  1178  000C84  27D6               	addwf	sprintf@ap& (0+255),f,b
  1179  000C86  0E00               	movlw	0
  1180  000C88  23D7               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1181                           
  1182                           ; BSR set to: 0
  1183                           ;doprnt.c: 1306: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c
      +                          ++)
  1184  000C8A  0E01               	movlw	1
  1185  000C8C  6FDB               	movwf	sprintf@c& (0+255),b
  1186  000C8E  D011               	goto	l2669
  1187  000C90                     
  1188                           ; BSR set to: 0
  1189                           ;doprnt.c: 1325: if(val < dpowers[c])
  1190                           
  1191                           ; BSR set to: 0
  1192  000C90  51DB               	movf	sprintf@c& (0+255),w,b
  1193  000C92  0D02               	mullw	2
  1194  000C94  0E01               	movlw	low _dpowers
  1195  000C96  24F3               	addwf	prodl,w,c
  1196  000C98  6EF6               	movwf	tblptrl,c
  1197  000C9A  0E03               	movlw	high _dpowers
  1198  000C9C  20F4               	addwfc	prodh,w,c
  1199  000C9E  6EF7               	movwf	tblptrh,c
  1200  000CA0                     	if	0	;There are less than 3 active tblptr bytes
  1201  000CA0                     	endif
  1202  000CA0  0009               	tblrd		*+
  1203  000CA2  50F5               	movf	tablat,w,c
  1204  000CA4  5DD8               	subwf	sprintf@val& (0+255),w,b
  1205  000CA6  0009               	tblrd		*+
  1206  000CA8  50F5               	movf	tablat,w,c
  1207  000CAA  59D9               	subwfb	(sprintf@val+1)& (0+255),w,b
  1208  000CAC  A0D8               	btfss	status,0,c
  1209  000CAE  D005               	goto	u1470
  1210                           
  1211                           ; BSR set to: 0
  1212                           
  1213                           ; BSR set to: 0
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;doprnt.c: 1326: break;
  1217  000CB0  2BDB               	incf	sprintf@c& (0+255),f,b
  1218  000CB2                     l2669:
  1219                           
  1220                           ; BSR set to: 0
  1221  000CB2  0E05               	movlw	5
  1222  000CB4  19DB               	xorwf	sprintf@c& (0+255),w,b
  1223  000CB6  A4D8               	btfss	status,2,c
  1224  000CB8  D7EB               	goto	l308
  1225  000CBA                     u1470:
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;doprnt.c: 1441: {;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  1229  000CBA  C0DB  F0DA         	movff	sprintf@c,sprintf@prec
  1230                           
  1231                           ;doprnt.c: 1493: while(prec--) {
  1232  000CBE  D02B               	goto	l311
  1233  000CC0                     
  1234                           ; BSR set to: 0
  1235                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  1236                           
  1237                           ; BSR set to: 0
  1238  000CC0  51DA               	movf	sprintf@prec& (0+255),w,b
  1239  000CC2  0D02               	mullw	2
  1240  000CC4  0E01               	movlw	low _dpowers
  1241  000CC6  24F3               	addwf	prodl,w,c
  1242  000CC8  6EF6               	movwf	tblptrl,c
  1243  000CCA  0E03               	movlw	high _dpowers
  1244  000CCC  20F4               	addwfc	prodh,w,c
  1245  000CCE  6EF7               	movwf	tblptrh,c
  1246  000CD0                     	if	0	;There are less than 3 active tblptr bytes
  1247  000CD0                     	endif
  1248  000CD0  0009               	tblrd		*+
  1249  000CD2  CFF5 F025          	movff	tablat,___lwdiv@divisor
  1250  000CD6  000A               	tblrd		*-
  1251  000CD8  CFF5 F026          	movff	tablat,___lwdiv@divisor+1
  1252  000CDC  C0D8  F023         	movff	sprintf@val,___lwdiv@dividend
  1253  000CE0  C0D9  F024         	movff	sprintf@val+1,___lwdiv@dividend+1
  1254  000CE4  EC21  F008         	call	___lwdiv	;wreg free
  1255  000CE8  C023  F0C7         	movff	?___lwdiv,___lwmod@dividend
  1256  000CEC  C024  F0C8         	movff	?___lwdiv+1,___lwmod@dividend+1
  1257  000CF0  0E00               	movlw	0
  1258  000CF2  0100               	movlb	0	; () banked
  1259  000CF4  6FCA               	movwf	(___lwmod@divisor+1)& (0+255),b
  1260  000CF6  0E0A               	movlw	10
  1261  000CF8  6FC9               	movwf	___lwmod@divisor& (0+255),b
  1262  000CFA  ECB9  F008         	call	___lwmod	;wreg free
  1263  000CFE  0100               	movlb	0	; () banked
  1264  000D00  51C7               	movf	?___lwmod& (0+255),w,b
  1265  000D02  0F30               	addlw	48
  1266  000D04  6FDB               	movwf	sprintf@c& (0+255),b
  1267                           
  1268                           ; BSR set to: 0
  1269                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  1270  000D06  C0CB  FFD9         	movff	sprintf@sp,fsr2l
  1271  000D0A  C0CC  FFDA         	movff	sprintf@sp+1,fsr2h
  1272  000D0E  C0DB  FFDF         	movff	sprintf@c,indf2
  1273                           
  1274                           ; BSR set to: 0
  1275  000D12  4BCB               	infsnz	sprintf@sp& (0+255),f,b
  1276  000D14  2BCC               	incf	(sprintf@sp+1)& (0+255),f,b
  1277  000D16                     l311:
  1278                           
  1279                           ; BSR set to: 0
  1280                           
  1281                           ; BSR set to: 0
  1282  000D16  07DA               	decf	sprintf@prec& (0+255),f,b
  1283  000D18  29DA               	incf	sprintf@prec& (0+255),w,b
  1284  000D1A  A4D8               	btfss	status,2,c
  1285  000D1C  D7D1               	goto	l312
  1286  000D1E                     u1480:
  1287                           
  1288                           ; BSR set to: 0
  1289                           
  1290                           ; BSR set to: 0
  1291                           
  1292                           ; BSR set to: 0
  1293  000D1E  C0CD  F0D2         	movff	sprintf@f,??_sprintf
  1294  000D22  C0CE  F0D3         	movff	sprintf@f+1,??_sprintf+1
  1295  000D26  C0CF  F0D4         	movff	sprintf@f+2,??_sprintf+2
  1296  000D2A  2BCD               	incf	sprintf@f& (0+255),f,b
  1297  000D2C  0E00               	movlw	0
  1298  000D2E  23CE               	addwfc	(sprintf@f+1)& (0+255),f,b
  1299  000D30  23CF               	addwfc	(sprintf@f+2)& (0+255),f,b
  1300  000D32  C0D2  FFF6         	movff	??_sprintf,tblptrl
  1301  000D36  C0D3  FFF7         	movff	??_sprintf+1,tblptrh
  1302  000D3A  C0D4  FFF8         	movff	??_sprintf+2,tblptru
  1303  000D3E  0008               	tblrd		*
  1304  000D40  CFF5 F0DB          	movff	tablat,sprintf@c
  1305  000D44  51DB               	movf	sprintf@c& (0+255),w,b
  1306  000D46  A4D8               	btfss	status,2,c
  1307  000D48  D764               	goto	l300
  1308  000D4A                     u1490:
  1309                           
  1310                           ; BSR set to: 0
  1311                           ;doprnt.c: 1557: *sp = 0;
  1312                           
  1313                           ; BSR set to: 0
  1314                           
  1315                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  1316                           
  1317                           ; BSR set to: 0
  1318  000D4A  C0CB  FFD9         	movff	sprintf@sp,fsr2l
  1319  000D4E  C0CC  FFDA         	movff	sprintf@sp+1,fsr2h
  1320  000D52  0E00               	movlw	0
  1321  000D54  6EDF               	movwf	indf2,c
  1322  000D56  0012               	return	
  1323  000D58                     __end_of_sprintf:
  1324                           	opt stack 0
  1325                           tblptru	equ	0xFF8
  1326                           tblptrh	equ	0xFF7
  1327                           tblptrl	equ	0xFF6
  1328                           tablat	equ	0xFF5
  1329                           prodh	equ	0xFF4
  1330                           prodl	equ	0xFF3
  1331                           postinc0	equ	0xFEE
  1332                           wreg	equ	0xFE8
  1333                           indf2	equ	0xFDF
  1334                           postinc2	equ	0xFDE
  1335                           postdec2	equ	0xFDD
  1336                           fsr2h	equ	0xFDA
  1337                           fsr2l	equ	0xFD9
  1338                           status	equ	0xFD8
  1339                           
  1340 ;; *************** function ___lwmod *****************
  1341 ;; Defined at:
  1342 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;  dividend        2    0[BANK0 ] unsigned int 
  1345 ;;  divisor         2    2[BANK0 ] unsigned int 
  1346 ;; Auto vars:     Size  Location     Type
  1347 ;;  counter         1   41[COMRAM] unsigned char 
  1348 ;; Return value:  Size  Location     Type
  1349 ;;                  2    0[BANK0 ] unsigned int 
  1350 ;; Registers used:
  1351 ;;		wreg, status,2, status,0
  1352 ;; Tracked objects:
  1353 ;;		On entry : 0/0
  1354 ;;		On exit  : 0/0
  1355 ;;		Unchanged: 0/0
  1356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1357 ;;      Params:         0       4       0       0
  1358 ;;      Locals:         1       0       0       0
  1359 ;;      Temps:          0       0       0       0
  1360 ;;      Totals:         1       4       0       0
  1361 ;;Total ram usage:        5 bytes
  1362 ;; Hardware stack levels used:    1
  1363 ;; Hardware stack levels required when called:    4
  1364 ;; This function calls:
  1365 ;;		Nothing
  1366 ;; This function is called by:
  1367 ;;		_sprintf
  1368 ;; This function uses a non-reentrant model
  1369 ;;
  1370                           
  1371                           	psect	text2
  1372  001172                     __ptext2:
  1373                           	opt stack 0
  1374  001172                     ___lwmod:
  1375                           	opt stack 25
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;incstack = 0
  1379  001172  0100               	movlb	0	; () banked
  1380  001174  51C9               	movf	___lwmod@divisor& (0+255),w,b
  1381  001176  11CA               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1382  001178  B4D8               	btfsc	status,2,c
  1383  00117A  D018               	goto	l813
  1384                           
  1385                           ; BSR set to: 0
  1386  00117C  0E01               	movlw	1
  1387  00117E  6E2A               	movwf	___lwmod@counter,c
  1388  001180  D004               	goto	l808
  1389  001182                     
  1390                           ; BSR set to: 0
  1391                           
  1392                           ; BSR set to: 0
  1393  001182  90D8               	bcf	status,0,c
  1394  001184  37C9               	rlcf	___lwmod@divisor& (0+255),f,b
  1395  001186  37CA               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1396  001188  2A2A               	incf	___lwmod@counter,f,c
  1397  00118A                     l808:
  1398                           
  1399                           ; BSR set to: 0
  1400                           
  1401                           ; BSR set to: 0
  1402  00118A  AFCA               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  1403  00118C  D7FA               	goto	l809
  1404  00118E                     u1380:
  1405                           
  1406                           ; BSR set to: 0
  1407                           
  1408                           ; BSR set to: 0
  1409                           
  1410                           ; BSR set to: 0
  1411  00118E  51C9               	movf	___lwmod@divisor& (0+255),w,b
  1412  001190  5DC7               	subwf	___lwmod@dividend& (0+255),w,b
  1413  001192  51CA               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1414  001194  59C8               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1415  001196  A0D8               	btfss	status,0,c
  1416  001198  D004               	goto	l812
  1417                           
  1418                           ; BSR set to: 0
  1419  00119A  51C9               	movf	___lwmod@divisor& (0+255),w,b
  1420  00119C  5FC7               	subwf	___lwmod@dividend& (0+255),f,b
  1421  00119E  51CA               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1422  0011A0  5BC8               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1423  0011A2                     l812:
  1424                           
  1425                           ; BSR set to: 0
  1426                           
  1427                           ; BSR set to: 0
  1428  0011A2  90D8               	bcf	status,0,c
  1429  0011A4  33CA               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1430  0011A6  33C9               	rrcf	___lwmod@divisor& (0+255),f,b
  1431                           
  1432                           ; BSR set to: 0
  1433  0011A8  2E2A               	decfsz	___lwmod@counter,f,c
  1434  0011AA  D7F1               	goto	u1380
  1435  0011AC                     l813:
  1436                           
  1437                           ; BSR set to: 0
  1438                           
  1439                           ; BSR set to: 0
  1440  0011AC  C0C7  F0C7         	movff	___lwmod@dividend,?___lwmod
  1441  0011B0  C0C8  F0C8         	movff	___lwmod@dividend+1,?___lwmod+1
  1442                           
  1443                           ; BSR set to: 0
  1444  0011B4  0012               	return		;funcret
  1445  0011B6                     __end_of___lwmod:
  1446                           	opt stack 0
  1447                           tblptru	equ	0xFF8
  1448                           tblptrh	equ	0xFF7
  1449                           tblptrl	equ	0xFF6
  1450                           tablat	equ	0xFF5
  1451                           prodh	equ	0xFF4
  1452                           prodl	equ	0xFF3
  1453                           postinc0	equ	0xFEE
  1454                           wreg	equ	0xFE8
  1455                           indf2	equ	0xFDF
  1456                           postinc2	equ	0xFDE
  1457                           postdec2	equ	0xFDD
  1458                           fsr2h	equ	0xFDA
  1459                           fsr2l	equ	0xFD9
  1460                           status	equ	0xFD8
  1461                           
  1462 ;; *************** function ___lwdiv *****************
  1463 ;; Defined at:
  1464 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;  dividend        2   34[COMRAM] unsigned int 
  1467 ;;  divisor         2   36[COMRAM] unsigned int 
  1468 ;; Auto vars:     Size  Location     Type
  1469 ;;  quotient        2   38[COMRAM] unsigned int 
  1470 ;;  counter         1   40[COMRAM] unsigned char 
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  2   34[COMRAM] unsigned int 
  1473 ;; Registers used:
  1474 ;;		wreg, status,2, status,0
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1480 ;;      Params:         4       0       0       0
  1481 ;;      Locals:         3       0       0       0
  1482 ;;      Temps:          0       0       0       0
  1483 ;;      Totals:         7       0       0       0
  1484 ;;Total ram usage:        7 bytes
  1485 ;; Hardware stack levels used:    1
  1486 ;; Hardware stack levels required when called:    4
  1487 ;; This function calls:
  1488 ;;		Nothing
  1489 ;; This function is called by:
  1490 ;;		_main
  1491 ;;		_sprintf
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           	psect	text3
  1496  001042                     __ptext3:
  1497                           	opt stack 0
  1498  001042                     ___lwdiv:
  1499                           	opt stack 25
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;incstack = 0
  1503  001042  0E00               	movlw	0
  1504  001044  6E28               	movwf	___lwdiv@quotient+1,c
  1505  001046  0E00               	movlw	0
  1506  001048  6E27               	movwf	___lwdiv@quotient,c
  1507  00104A  5025               	movf	___lwdiv@divisor,w,c
  1508  00104C  1026               	iorwf	___lwdiv@divisor+1,w,c
  1509  00104E  B4D8               	btfsc	status,2,c
  1510  001050  D01C               	goto	l803
  1511  001052  0E01               	movlw	1
  1512  001054  6E29               	movwf	___lwdiv@counter,c
  1513  001056  D004               	goto	l798
  1514  001058  90D8               	bcf	status,0,c
  1515  00105A  3625               	rlcf	___lwdiv@divisor,f,c
  1516  00105C  3626               	rlcf	___lwdiv@divisor+1,f,c
  1517  00105E  2A29               	incf	___lwdiv@counter,f,c
  1518  001060                     l798:
  1519  001060  AE26               	btfss	___lwdiv@divisor+1,7,c
  1520  001062  D7FA               	goto	l799
  1521  001064                     u820:
  1522  001064  90D8               	bcf	status,0,c
  1523  001066  3627               	rlcf	___lwdiv@quotient,f,c
  1524  001068  3628               	rlcf	___lwdiv@quotient+1,f,c
  1525  00106A  5025               	movf	___lwdiv@divisor,w,c
  1526  00106C  5C23               	subwf	___lwdiv@dividend,w,c
  1527  00106E  5026               	movf	___lwdiv@divisor+1,w,c
  1528  001070  5824               	subwfb	___lwdiv@dividend+1,w,c
  1529  001072  A0D8               	btfss	status,0,c
  1530  001074  D005               	goto	l802
  1531  001076  5025               	movf	___lwdiv@divisor,w,c
  1532  001078  5E23               	subwf	___lwdiv@dividend,f,c
  1533  00107A  5026               	movf	___lwdiv@divisor+1,w,c
  1534  00107C  5A24               	subwfb	___lwdiv@dividend+1,f,c
  1535  00107E  8027               	bsf	___lwdiv@quotient,0,c
  1536  001080                     l802:
  1537  001080  90D8               	bcf	status,0,c
  1538  001082  3226               	rrcf	___lwdiv@divisor+1,f,c
  1539  001084  3225               	rrcf	___lwdiv@divisor,f,c
  1540  001086  2E29               	decfsz	___lwdiv@counter,f,c
  1541  001088  D7ED               	goto	u820
  1542  00108A                     l803:
  1543  00108A  C027  F023         	movff	___lwdiv@quotient,?___lwdiv
  1544  00108E  C028  F024         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1545  001092  0012               	return		;funcret
  1546  001094                     __end_of___lwdiv:
  1547                           	opt stack 0
  1548                           tblptru	equ	0xFF8
  1549                           tblptrh	equ	0xFF7
  1550                           tblptrl	equ	0xFF6
  1551                           tablat	equ	0xFF5
  1552                           prodh	equ	0xFF4
  1553                           prodl	equ	0xFF3
  1554                           postinc0	equ	0xFEE
  1555                           wreg	equ	0xFE8
  1556                           indf2	equ	0xFDF
  1557                           postinc2	equ	0xFDE
  1558                           postdec2	equ	0xFDD
  1559                           fsr2h	equ	0xFDA
  1560                           fsr2l	equ	0xFD9
  1561                           status	equ	0xFD8
  1562                           
  1563 ;; *************** function _back *****************
  1564 ;; Defined at:
  1565 ;;		line 110 in file "MotorControl.c"
  1566 ;; Parameters:    Size  Location     Type
  1567 ;;  m_L             2   13[BANK0 ] PTR struct DC_motor
  1568 ;;		 -> motorL(9), 
  1569 ;;  m_R             2   15[BANK0 ] PTR struct DC_motor
  1570 ;;		 -> motorR(9), 
  1571 ;; Auto vars:     Size  Location     Type
  1572 ;;		None
  1573 ;; Return value:  Size  Location     Type
  1574 ;;                  1    wreg      void 
  1575 ;; Registers used:
  1576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1577 ;; Tracked objects:
  1578 ;;		On entry : 0/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1582 ;;      Params:         0       4       0       0
  1583 ;;      Locals:         0       0       0       0
  1584 ;;      Temps:          0       0       0       0
  1585 ;;      Totals:         0       4       0       0
  1586 ;;Total ram usage:        4 bytes
  1587 ;; Hardware stack levels used:    1
  1588 ;; Hardware stack levels required when called:    6
  1589 ;; This function calls:
  1590 ;;		_setMotorPWM
  1591 ;; This function is called by:
  1592 ;;		_main
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           	psect	text4
  1597  001256                     __ptext4:
  1598                           	opt stack 0
  1599  001256                     _back:
  1600                           	opt stack 24
  1601                           
  1602                           ;MotorControl.c: 112: motorL.direction=0;
  1603                           
  1604                           ;incstack = 0
  1605  001256  0E00               	movlw	0
  1606  001258  6E35               	movwf	_motorL+1,c
  1607                           
  1608                           ;MotorControl.c: 113: motorL.power=73;
  1609  00125A  0E49               	movlw	73
  1610  00125C  6E34               	movwf	_motorL,c
  1611                           
  1612                           ;MotorControl.c: 114: setMotorPWM(m_L);
  1613  00125E  C0D4  F029         	movff	back@m_L,setMotorPWM@m
  1614  001262  C0D5  F02A         	movff	back@m_L+1,setMotorPWM@m+1
  1615  001266  EC79  F004         	call	_setMotorPWM	;wreg free
  1616                           
  1617                           ;MotorControl.c: 115: motorR.direction=0;
  1618  00126A  0E00               	movlw	0
  1619  00126C  6E2C               	movwf	_motorR+1,c
  1620                           
  1621                           ;MotorControl.c: 116: motorR.power=74;
  1622  00126E  0E4A               	movlw	74
  1623  001270  6E2B               	movwf	_motorR,c
  1624                           
  1625                           ;MotorControl.c: 117: setMotorPWM(m_R);
  1626  001272  C0D6  F029         	movff	back@m_R,setMotorPWM@m
  1627  001276  C0D7  F02A         	movff	back@m_R+1,setMotorPWM@m+1
  1628  00127A  EC79  F004         	call	_setMotorPWM	;wreg free
  1629  00127E  0012               	return		;funcret
  1630  001280                     __end_of_back:
  1631                           	opt stack 0
  1632                           tblptru	equ	0xFF8
  1633                           tblptrh	equ	0xFF7
  1634                           tblptrl	equ	0xFF6
  1635                           tablat	equ	0xFF5
  1636                           prodh	equ	0xFF4
  1637                           prodl	equ	0xFF3
  1638                           postinc0	equ	0xFEE
  1639                           wreg	equ	0xFE8
  1640                           indf2	equ	0xFDF
  1641                           postinc2	equ	0xFDE
  1642                           postdec2	equ	0xFDD
  1643                           fsr2h	equ	0xFDA
  1644                           fsr2l	equ	0xFD9
  1645                           status	equ	0xFD8
  1646                           
  1647 ;; *************** function _TrackIR *****************
  1648 ;; Defined at:
  1649 ;;		line 81 in file "newFILE.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;  LeftIR          2   19[BANK0 ] int 
  1652 ;;  RightIR         2   21[BANK0 ] int 
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;  limit           2   26[BANK0 ] int 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  1    wreg      void 
  1657 ;; Registers used:
  1658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1664 ;;      Params:         0       4       0       0
  1665 ;;      Locals:         0       2       0       0
  1666 ;;      Temps:          0       3       0       0
  1667 ;;      Totals:         0       9       0       0
  1668 ;;Total ram usage:        9 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    7
  1671 ;; This function calls:
  1672 ;;		_forward
  1673 ;;		_fwdCount
  1674 ;;		_leftCount
  1675 ;;		_rightCount
  1676 ;;		_stop
  1677 ;;		_turnLeft
  1678 ;;		_turnRight
  1679 ;; This function is called by:
  1680 ;;		_main
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684                           	psect	text5
  1685  000338                     __ptext5:
  1686                           	opt stack 0
  1687  000338                     _TrackIR:
  1688                           	opt stack 23
  1689                           
  1690                           ;newFILE.c: 82: int limit=10;
  1691                           
  1692                           ;incstack = 0
  1693  000338  0E00               	movlw	0
  1694  00033A  0100               	movlb	0	; () banked
  1695  00033C  6FE2               	movwf	(TrackIR@limit+1)& (0+255),b
  1696  00033E  0E0A               	movlw	10
  1697  000340  6FE1               	movwf	TrackIR@limit& (0+255),b
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;newFILE.c: 84: if ((LeftIR - RightIR)>limit) {
  1701  000342  C0DC  F0DE         	movff	TrackIR@RightIR,??_TrackIR
  1702  000346  C0DD  F0DF         	movff	TrackIR@RightIR+1,??_TrackIR+1
  1703  00034A  1FDE               	comf	??_TrackIR& (0+255),f,b
  1704  00034C  1FDF               	comf	(??_TrackIR+1)& (0+255),f,b
  1705  00034E  4BDE               	infsnz	??_TrackIR& (0+255),f,b
  1706  000350  2BDF               	incf	(??_TrackIR+1)& (0+255),f,b
  1707  000352  51DA               	movf	TrackIR@LeftIR& (0+255),w,b
  1708  000354  27DE               	addwf	??_TrackIR& (0+255),f,b
  1709  000356  51DB               	movf	(TrackIR@LeftIR+1)& (0+255),w,b
  1710  000358  23DF               	addwfc	(??_TrackIR+1)& (0+255),f,b
  1711  00035A  51DE               	movf	??_TrackIR& (0+255),w,b
  1712  00035C  5DE1               	subwf	TrackIR@limit& (0+255),w,b
  1713  00035E  51E2               	movf	(TrackIR@limit+1)& (0+255),w,b
  1714  000360  0A80               	xorlw	128
  1715  000362  6FE0               	movwf	(??_TrackIR+2)& (0+255),b
  1716  000364  51DF               	movf	(??_TrackIR+1)& (0+255),w,b
  1717  000366  0A80               	xorlw	128
  1718  000368  59E0               	subwfb	(??_TrackIR+2)& (0+255),w,b
  1719  00036A  B0D8               	btfsc	status,0,c
  1720  00036C  D053               	goto	l223
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;newFILE.c: 85: if(counter==0){
  1724  00036E  51C4               	movf	_counter& (0+255),w,b
  1725  000370  11C5               	iorwf	(_counter+1)& (0+255),w,b
  1726  000372  A4D8               	btfss	status,2,c
  1727  000374  D027               	goto	l224
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;newFILE.c: 86: turnLeft(&motorL, &motorR);
  1731  000376  0E34               	movlw	low _motorL
  1732  000378  6FD4               	movwf	turnLeft@m_L& (0+255),b
  1733  00037A  0E00               	movlw	high _motorL
  1734  00037C  6FD5               	movwf	(turnLeft@m_L+1)& (0+255),b
  1735  00037E  0E2B               	movlw	low _motorR
  1736  000380  6FD6               	movwf	turnLeft@m_R& (0+255),b
  1737  000382  0E00               	movlw	high _motorR
  1738  000384  6FD7               	movwf	(turnLeft@m_R+1)& (0+255),b
  1739  000386  EC55  F009         	call	_turnLeft	;wreg free
  1740                           
  1741                           ;newFILE.c: 87: leftCount();
  1742  00038A  EC00  F00A         	call	_leftCount	;wreg free
  1743                           
  1744                           ;newFILE.c: 88: counter++;
  1745  00038E  0100               	movlb	0	; () banked
  1746  000390  4BC4               	infsnz	_counter& (0+255),f,b
  1747  000392  2BC5               	incf	(_counter+1)& (0+255),f,b
  1748                           
  1749                           ; BSR set to: 0
  1750                           ;newFILE.c: 89: _delay((unsigned long)((400)*(8000000/4000.0)));
  1751  000394  0E05               	movlw	5
  1752  000396  0100               	movlb	0	; () banked
  1753  000398  6FDF               	movwf	(??_TrackIR+1)& (0+255),b
  1754  00039A  0E0F               	movlw	15
  1755  00039C  6FDE               	movwf	??_TrackIR& (0+255),b
  1756  00039E  0EF1               	movlw	241
  1757  0003A0                     u1767:
  1758  0003A0  2EE8               	decfsz	wreg,f,c
  1759  0003A2  D7FE               	bra	u1767
  1760  0003A4  2FDE               	decfsz	??_TrackIR& (0+255),f,b
  1761  0003A6  D7FC               	bra	u1767
  1762  0003A8  2FDF               	decfsz	(??_TrackIR+1)& (0+255),f,b
  1763  0003AA  D7FA               	bra	u1767
  1764                           
  1765                           ;newFILE.c: 90: stop(&motorL, &motorR);
  1766  0003AC  0E34               	movlw	low _motorL
  1767  0003AE  0100               	movlb	0	; () banked
  1768  0003B0  6FD4               	movwf	stop@m_L& (0+255),b
  1769  0003B2  0E00               	movlw	high _motorL
  1770  0003B4  6FD5               	movwf	(stop@m_L+1)& (0+255),b
  1771  0003B6  0E2B               	movlw	low _motorR
  1772  0003B8  6FD6               	movwf	stop@m_R& (0+255),b
  1773  0003BA  0E00               	movlw	high _motorR
  1774  0003BC  6FD7               	movwf	(stop@m_R+1)& (0+255),b
  1775  0003BE  EC8C  F007         	call	_stop	;wreg free
  1776                           
  1777                           ;newFILE.c: 91: } else {
  1778  0003C2  D159               	goto	l237
  1779  0003C4                     l224:
  1780                           
  1781                           ;newFILE.c: 92: turnLeft(&motorL, &motorR);
  1782  0003C4  0E34               	movlw	low _motorL
  1783  0003C6  0100               	movlb	0	; () banked
  1784  0003C8  6FD4               	movwf	turnLeft@m_L& (0+255),b
  1785  0003CA  0E00               	movlw	high _motorL
  1786  0003CC  6FD5               	movwf	(turnLeft@m_L+1)& (0+255),b
  1787  0003CE  0E2B               	movlw	low _motorR
  1788  0003D0  6FD6               	movwf	turnLeft@m_R& (0+255),b
  1789  0003D2  0E00               	movlw	high _motorR
  1790  0003D4  6FD7               	movwf	(turnLeft@m_R+1)& (0+255),b
  1791  0003D6  EC55  F009         	call	_turnLeft	;wreg free
  1792                           
  1793                           ;newFILE.c: 93: leftCount();
  1794  0003DA  EC00  F00A         	call	_leftCount	;wreg free
  1795                           
  1796                           ;newFILE.c: 94: counter++;
  1797  0003DE  0100               	movlb	0	; () banked
  1798  0003E0  4BC4               	infsnz	_counter& (0+255),f,b
  1799  0003E2  2BC5               	incf	(_counter+1)& (0+255),f,b
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;newFILE.c: 95: _delay((unsigned long)((400)*(8000000/4000.0)));
  1803  0003E4  0E05               	movlw	5
  1804  0003E6  0100               	movlb	0	; () banked
  1805  0003E8  6FDF               	movwf	(??_TrackIR+1)& (0+255),b
  1806  0003EA  0E0F               	movlw	15
  1807  0003EC  6FDE               	movwf	??_TrackIR& (0+255),b
  1808  0003EE  0EF1               	movlw	241
  1809  0003F0                     u1777:
  1810  0003F0  2EE8               	decfsz	wreg,f,c
  1811  0003F2  D7FE               	bra	u1777
  1812  0003F4  2FDE               	decfsz	??_TrackIR& (0+255),f,b
  1813  0003F6  D7FC               	bra	u1777
  1814  0003F8  2FDF               	decfsz	(??_TrackIR+1)& (0+255),f,b
  1815  0003FA  D7FA               	bra	u1777
  1816                           
  1817                           ;newFILE.c: 96: stop(&motorL, &motorR);
  1818  0003FC  0E34               	movlw	low _motorL
  1819  0003FE  0100               	movlb	0	; () banked
  1820  000400  6FD4               	movwf	stop@m_L& (0+255),b
  1821  000402  0E00               	movlw	high _motorL
  1822  000404  6FD5               	movwf	(stop@m_L+1)& (0+255),b
  1823  000406  0E2B               	movlw	low _motorR
  1824  000408  6FD6               	movwf	stop@m_R& (0+255),b
  1825  00040A  0E00               	movlw	high _motorR
  1826  00040C  6FD7               	movwf	(stop@m_R+1)& (0+255),b
  1827  00040E  EC8C  F007         	call	_stop	;wreg free
  1828                           
  1829                           ;newFILE.c: 97: };newFILE.c: 98: }
  1830  000412  D131               	goto	l237
  1831  000414                     l223:
  1832                           
  1833                           ;newFILE.c: 99: else if ((RightIR -LeftIR) >limit) {
  1834  000414  C0DA  F0DE         	movff	TrackIR@LeftIR,??_TrackIR
  1835  000418  C0DB  F0DF         	movff	TrackIR@LeftIR+1,??_TrackIR+1
  1836  00041C  0100               	movlb	0	; () banked
  1837  00041E  1FDE               	comf	??_TrackIR& (0+255),f,b
  1838  000420  1FDF               	comf	(??_TrackIR+1)& (0+255),f,b
  1839  000422  4BDE               	infsnz	??_TrackIR& (0+255),f,b
  1840  000424  2BDF               	incf	(??_TrackIR+1)& (0+255),f,b
  1841  000426  51DC               	movf	TrackIR@RightIR& (0+255),w,b
  1842  000428  27DE               	addwf	??_TrackIR& (0+255),f,b
  1843  00042A  51DD               	movf	(TrackIR@RightIR+1)& (0+255),w,b
  1844  00042C  23DF               	addwfc	(??_TrackIR+1)& (0+255),f,b
  1845  00042E  51DE               	movf	??_TrackIR& (0+255),w,b
  1846  000430  5DE1               	subwf	TrackIR@limit& (0+255),w,b
  1847  000432  51E2               	movf	(TrackIR@limit+1)& (0+255),w,b
  1848  000434  0A80               	xorlw	128
  1849  000436  6FE0               	movwf	(??_TrackIR+2)& (0+255),b
  1850  000438  51DF               	movf	(??_TrackIR+1)& (0+255),w,b
  1851  00043A  0A80               	xorlw	128
  1852  00043C  59E0               	subwfb	(??_TrackIR+2)& (0+255),w,b
  1853  00043E  B0D8               	btfsc	status,0,c
  1854  000440  D053               	goto	l227
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;newFILE.c: 101: if(counter==0){
  1858  000442  51C4               	movf	_counter& (0+255),w,b
  1859  000444  11C5               	iorwf	(_counter+1)& (0+255),w,b
  1860  000446  A4D8               	btfss	status,2,c
  1861  000448  D027               	goto	l228
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;newFILE.c: 102: turnRight(&motorL, &motorR);
  1865  00044A  0E34               	movlw	low _motorL
  1866  00044C  6FD4               	movwf	turnRight@m_L& (0+255),b
  1867  00044E  0E00               	movlw	high _motorL
  1868  000450  6FD5               	movwf	(turnRight@m_L+1)& (0+255),b
  1869  000452  0E2B               	movlw	low _motorR
  1870  000454  6FD6               	movwf	turnRight@m_R& (0+255),b
  1871  000456  0E00               	movlw	high _motorR
  1872  000458  6FD7               	movwf	(turnRight@m_R+1)& (0+255),b
  1873  00045A  EC40  F009         	call	_turnRight	;wreg free
  1874                           
  1875                           ;newFILE.c: 103: rightCount();
  1876  00045E  ECF1  F009         	call	_rightCount	;wreg free
  1877                           
  1878                           ;newFILE.c: 104: counter++;
  1879  000462  0100               	movlb	0	; () banked
  1880  000464  4BC4               	infsnz	_counter& (0+255),f,b
  1881  000466  2BC5               	incf	(_counter+1)& (0+255),f,b
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;newFILE.c: 105: _delay((unsigned long)((400)*(8000000/4000.0)));
  1885  000468  0E05               	movlw	5
  1886  00046A  0100               	movlb	0	; () banked
  1887  00046C  6FDF               	movwf	(??_TrackIR+1)& (0+255),b
  1888  00046E  0E0F               	movlw	15
  1889  000470  6FDE               	movwf	??_TrackIR& (0+255),b
  1890  000472  0EF1               	movlw	241
  1891  000474                     u1787:
  1892  000474  2EE8               	decfsz	wreg,f,c
  1893  000476  D7FE               	bra	u1787
  1894  000478  2FDE               	decfsz	??_TrackIR& (0+255),f,b
  1895  00047A  D7FC               	bra	u1787
  1896  00047C  2FDF               	decfsz	(??_TrackIR+1)& (0+255),f,b
  1897  00047E  D7FA               	bra	u1787
  1898                           
  1899                           ;newFILE.c: 106: stop(&motorL, &motorR);
  1900  000480  0E34               	movlw	low _motorL
  1901  000482  0100               	movlb	0	; () banked
  1902  000484  6FD4               	movwf	stop@m_L& (0+255),b
  1903  000486  0E00               	movlw	high _motorL
  1904  000488  6FD5               	movwf	(stop@m_L+1)& (0+255),b
  1905  00048A  0E2B               	movlw	low _motorR
  1906  00048C  6FD6               	movwf	stop@m_R& (0+255),b
  1907  00048E  0E00               	movlw	high _motorR
  1908  000490  6FD7               	movwf	(stop@m_R+1)& (0+255),b
  1909  000492  EC8C  F007         	call	_stop	;wreg free
  1910                           
  1911                           ;newFILE.c: 107: } else {
  1912  000496  D0EF               	goto	l237
  1913  000498                     l228:
  1914                           
  1915                           ;newFILE.c: 109: turnRight(&motorL, &motorR);
  1916  000498  0E34               	movlw	low _motorL
  1917  00049A  0100               	movlb	0	; () banked
  1918  00049C  6FD4               	movwf	turnRight@m_L& (0+255),b
  1919  00049E  0E00               	movlw	high _motorL
  1920  0004A0  6FD5               	movwf	(turnRight@m_L+1)& (0+255),b
  1921  0004A2  0E2B               	movlw	low _motorR
  1922  0004A4  6FD6               	movwf	turnRight@m_R& (0+255),b
  1923  0004A6  0E00               	movlw	high _motorR
  1924  0004A8  6FD7               	movwf	(turnRight@m_R+1)& (0+255),b
  1925  0004AA  EC40  F009         	call	_turnRight	;wreg free
  1926                           
  1927                           ;newFILE.c: 110: rightCount();
  1928  0004AE  ECF1  F009         	call	_rightCount	;wreg free
  1929                           
  1930                           ;newFILE.c: 111: counter++;
  1931  0004B2  0100               	movlb	0	; () banked
  1932  0004B4  4BC4               	infsnz	_counter& (0+255),f,b
  1933  0004B6  2BC5               	incf	(_counter+1)& (0+255),f,b
  1934                           
  1935                           ; BSR set to: 0
  1936                           ;newFILE.c: 112: _delay((unsigned long)((400)*(8000000/4000.0)));
  1937  0004B8  0E05               	movlw	5
  1938  0004BA  0100               	movlb	0	; () banked
  1939  0004BC  6FDF               	movwf	(??_TrackIR+1)& (0+255),b
  1940  0004BE  0E0F               	movlw	15
  1941  0004C0  6FDE               	movwf	??_TrackIR& (0+255),b
  1942  0004C2  0EF1               	movlw	241
  1943  0004C4                     u1797:
  1944  0004C4  2EE8               	decfsz	wreg,f,c
  1945  0004C6  D7FE               	bra	u1797
  1946  0004C8  2FDE               	decfsz	??_TrackIR& (0+255),f,b
  1947  0004CA  D7FC               	bra	u1797
  1948  0004CC  2FDF               	decfsz	(??_TrackIR+1)& (0+255),f,b
  1949  0004CE  D7FA               	bra	u1797
  1950                           
  1951                           ;newFILE.c: 113: stop(&motorL, &motorR);
  1952  0004D0  0E34               	movlw	low _motorL
  1953  0004D2  0100               	movlb	0	; () banked
  1954  0004D4  6FD4               	movwf	stop@m_L& (0+255),b
  1955  0004D6  0E00               	movlw	high _motorL
  1956  0004D8  6FD5               	movwf	(stop@m_L+1)& (0+255),b
  1957  0004DA  0E2B               	movlw	low _motorR
  1958  0004DC  6FD6               	movwf	stop@m_R& (0+255),b
  1959  0004DE  0E00               	movlw	high _motorR
  1960  0004E0  6FD7               	movwf	(stop@m_R+1)& (0+255),b
  1961  0004E2  EC8C  F007         	call	_stop	;wreg free
  1962                           
  1963                           ;newFILE.c: 114: };newFILE.c: 115: }
  1964  0004E6  D0C7               	goto	l237
  1965  0004E8                     l227:
  1966                           
  1967                           ;newFILE.c: 116: else {;newFILE.c: 117: if(RightIR>200 && LeftIR>200)
  1968  0004E8  0100               	movlb	0	; () banked
  1969  0004EA  BFDD               	btfsc	(TrackIR@RightIR+1)& (0+255),7,b
  1970  0004EC  D061               	goto	l231
  1971  0004EE  51DD               	movf	(TrackIR@RightIR+1)& (0+255),w,b
  1972  0004F0  E104               	bnz	u1540
  1973  0004F2  0EC9               	movlw	201
  1974  0004F4  5DDC               	subwf	TrackIR@RightIR& (0+255),w,b
  1975  0004F6  A0D8               	btfss	status,0,c
  1976  0004F8  D05B               	goto	l231
  1977  0004FA                     u1540:
  1978                           
  1979                           ; BSR set to: 0
  1980  0004FA  BFDB               	btfsc	(TrackIR@LeftIR+1)& (0+255),7,b
  1981  0004FC  D059               	goto	l231
  1982  0004FE  51DB               	movf	(TrackIR@LeftIR+1)& (0+255),w,b
  1983  000500  E104               	bnz	u1550
  1984  000502  0EC9               	movlw	201
  1985  000504  5DDA               	subwf	TrackIR@LeftIR& (0+255),w,b
  1986  000506  A0D8               	btfss	status,0,c
  1987  000508  D053               	goto	l231
  1988  00050A                     u1550:
  1989                           
  1990                           ; BSR set to: 0
  1991                           ;newFILE.c: 118: {;newFILE.c: 119: if(counter==0){
  1992  00050A  51C4               	movf	_counter& (0+255),w,b
  1993  00050C  11C5               	iorwf	(_counter+1)& (0+255),w,b
  1994  00050E  A4D8               	btfss	status,2,c
  1995  000510  D027               	goto	l232
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;newFILE.c: 120: forward(&motorL, &motorR);
  1999  000512  0E34               	movlw	low _motorL
  2000  000514  6FD4               	movwf	forward@m_L& (0+255),b
  2001  000516  0E00               	movlw	high _motorL
  2002  000518  6FD5               	movwf	(forward@m_L+1)& (0+255),b
  2003  00051A  0E2B               	movlw	low _motorR
  2004  00051C  6FD6               	movwf	forward@m_R& (0+255),b
  2005  00051E  0E00               	movlw	high _motorR
  2006  000520  6FD7               	movwf	(forward@m_R+1)& (0+255),b
  2007  000522  EC6A  F009         	call	_forward	;wreg free
  2008                           
  2009                           ;newFILE.c: 121: fwdCount();
  2010  000526  EC0F  F00A         	call	_fwdCount	;wreg free
  2011                           
  2012                           ;newFILE.c: 122: counter++;
  2013  00052A  0100               	movlb	0	; () banked
  2014  00052C  4BC4               	infsnz	_counter& (0+255),f,b
  2015  00052E  2BC5               	incf	(_counter+1)& (0+255),f,b
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;newFILE.c: 123: _delay((unsigned long)((400)*(8000000/4000.0)));
  2019  000530  0E05               	movlw	5
  2020  000532  0100               	movlb	0	; () banked
  2021  000534  6FDF               	movwf	(??_TrackIR+1)& (0+255),b
  2022  000536  0E0F               	movlw	15
  2023  000538  6FDE               	movwf	??_TrackIR& (0+255),b
  2024  00053A  0EF1               	movlw	241
  2025  00053C                     u1807:
  2026  00053C  2EE8               	decfsz	wreg,f,c
  2027  00053E  D7FE               	bra	u1807
  2028  000540  2FDE               	decfsz	??_TrackIR& (0+255),f,b
  2029  000542  D7FC               	bra	u1807
  2030  000544  2FDF               	decfsz	(??_TrackIR+1)& (0+255),f,b
  2031  000546  D7FA               	bra	u1807
  2032                           
  2033                           ;newFILE.c: 124: stop(&motorL, &motorR);
  2034  000548  0E34               	movlw	low _motorL
  2035  00054A  0100               	movlb	0	; () banked
  2036  00054C  6FD4               	movwf	stop@m_L& (0+255),b
  2037  00054E  0E00               	movlw	high _motorL
  2038  000550  6FD5               	movwf	(stop@m_L+1)& (0+255),b
  2039  000552  0E2B               	movlw	low _motorR
  2040  000554  6FD6               	movwf	stop@m_R& (0+255),b
  2041  000556  0E00               	movlw	high _motorR
  2042  000558  6FD7               	movwf	(stop@m_R+1)& (0+255),b
  2043  00055A  EC8C  F007         	call	_stop	;wreg free
  2044                           
  2045                           ;newFILE.c: 125: } else {
  2046  00055E  D08B               	goto	l237
  2047  000560                     l232:
  2048                           
  2049                           ;newFILE.c: 127: forward(&motorL, &motorR);
  2050  000560  0E34               	movlw	low _motorL
  2051  000562  0100               	movlb	0	; () banked
  2052  000564  6FD4               	movwf	forward@m_L& (0+255),b
  2053  000566  0E00               	movlw	high _motorL
  2054  000568  6FD5               	movwf	(forward@m_L+1)& (0+255),b
  2055  00056A  0E2B               	movlw	low _motorR
  2056  00056C  6FD6               	movwf	forward@m_R& (0+255),b
  2057  00056E  0E00               	movlw	high _motorR
  2058  000570  6FD7               	movwf	(forward@m_R+1)& (0+255),b
  2059  000572  EC6A  F009         	call	_forward	;wreg free
  2060                           
  2061                           ;newFILE.c: 128: fwdCount();
  2062  000576  EC0F  F00A         	call	_fwdCount	;wreg free
  2063                           
  2064                           ;newFILE.c: 129: counter++;
  2065  00057A  0100               	movlb	0	; () banked
  2066  00057C  4BC4               	infsnz	_counter& (0+255),f,b
  2067  00057E  2BC5               	incf	(_counter+1)& (0+255),f,b
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;newFILE.c: 130: _delay((unsigned long)((400)*(8000000/4000.0)));
  2071  000580  0E05               	movlw	5
  2072  000582  0100               	movlb	0	; () banked
  2073  000584  6FDF               	movwf	(??_TrackIR+1)& (0+255),b
  2074  000586  0E0F               	movlw	15
  2075  000588  6FDE               	movwf	??_TrackIR& (0+255),b
  2076  00058A  0EF1               	movlw	241
  2077  00058C                     u1817:
  2078  00058C  2EE8               	decfsz	wreg,f,c
  2079  00058E  D7FE               	bra	u1817
  2080  000590  2FDE               	decfsz	??_TrackIR& (0+255),f,b
  2081  000592  D7FC               	bra	u1817
  2082  000594  2FDF               	decfsz	(??_TrackIR+1)& (0+255),f,b
  2083  000596  D7FA               	bra	u1817
  2084                           
  2085                           ;newFILE.c: 131: stop(&motorL, &motorR);
  2086  000598  0E34               	movlw	low _motorL
  2087  00059A  0100               	movlb	0	; () banked
  2088  00059C  6FD4               	movwf	stop@m_L& (0+255),b
  2089  00059E  0E00               	movlw	high _motorL
  2090  0005A0  6FD5               	movwf	(stop@m_L+1)& (0+255),b
  2091  0005A2  0E2B               	movlw	low _motorR
  2092  0005A4  6FD6               	movwf	stop@m_R& (0+255),b
  2093  0005A6  0E00               	movlw	high _motorR
  2094  0005A8  6FD7               	movwf	(stop@m_R+1)& (0+255),b
  2095  0005AA  EC8C  F007         	call	_stop	;wreg free
  2096                           
  2097                           ;newFILE.c: 132: };newFILE.c: 133: }
  2098  0005AE  D063               	goto	l237
  2099  0005B0                     l231:
  2100                           
  2101                           ;newFILE.c: 134: else if(RightIR<100 && LeftIR<100) {
  2102  0005B0  0100               	movlb	0	; () banked
  2103  0005B2  BFDD               	btfsc	(TrackIR@RightIR+1)& (0+255),7,b
  2104  0005B4  D006               	goto	u1570
  2105  0005B6  51DD               	movf	(TrackIR@RightIR+1)& (0+255),w,b
  2106  0005B8  E15E               	bnz	l2787
  2107  0005BA  0E64               	movlw	100
  2108  0005BC  5DDC               	subwf	TrackIR@RightIR& (0+255),w,b
  2109  0005BE  B0D8               	btfsc	status,0,c
  2110  0005C0  D05A               	goto	l237
  2111  0005C2                     u1570:
  2112                           
  2113                           ; BSR set to: 0
  2114  0005C2  BFDB               	btfsc	(TrackIR@LeftIR+1)& (0+255),7,b
  2115  0005C4  D006               	goto	u1580
  2116  0005C6  51DB               	movf	(TrackIR@LeftIR+1)& (0+255),w,b
  2117  0005C8  E156               	bnz	l2787
  2118  0005CA  0E64               	movlw	100
  2119  0005CC  5DDA               	subwf	TrackIR@LeftIR& (0+255),w,b
  2120  0005CE  B0D8               	btfsc	status,0,c
  2121  0005D0  D052               	goto	l237
  2122  0005D2                     u1580:
  2123                           
  2124                           ; BSR set to: 0
  2125                           ;newFILE.c: 136: if(counter==0){
  2126  0005D2  51C4               	movf	_counter& (0+255),w,b
  2127  0005D4  11C5               	iorwf	(_counter+1)& (0+255),w,b
  2128  0005D6  A4D8               	btfss	status,2,c
  2129  0005D8  D027               	goto	l236
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;newFILE.c: 137: turnLeft(&motorL, &motorR);
  2133  0005DA  0E34               	movlw	low _motorL
  2134  0005DC  6FD4               	movwf	turnLeft@m_L& (0+255),b
  2135  0005DE  0E00               	movlw	high _motorL
  2136  0005E0  6FD5               	movwf	(turnLeft@m_L+1)& (0+255),b
  2137  0005E2  0E2B               	movlw	low _motorR
  2138  0005E4  6FD6               	movwf	turnLeft@m_R& (0+255),b
  2139  0005E6  0E00               	movlw	high _motorR
  2140  0005E8  6FD7               	movwf	(turnLeft@m_R+1)& (0+255),b
  2141  0005EA  EC55  F009         	call	_turnLeft	;wreg free
  2142                           
  2143                           ;newFILE.c: 138: leftCount();
  2144  0005EE  EC00  F00A         	call	_leftCount	;wreg free
  2145                           
  2146                           ;newFILE.c: 139: counter++;
  2147  0005F2  0100               	movlb	0	; () banked
  2148  0005F4  4BC4               	infsnz	_counter& (0+255),f,b
  2149  0005F6  2BC5               	incf	(_counter+1)& (0+255),f,b
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;newFILE.c: 140: _delay((unsigned long)((400)*(8000000/4000.0)));
  2153  0005F8  0E05               	movlw	5
  2154  0005FA  0100               	movlb	0	; () banked
  2155  0005FC  6FDF               	movwf	(??_TrackIR+1)& (0+255),b
  2156  0005FE  0E0F               	movlw	15
  2157  000600  6FDE               	movwf	??_TrackIR& (0+255),b
  2158  000602  0EF1               	movlw	241
  2159  000604                     u1827:
  2160  000604  2EE8               	decfsz	wreg,f,c
  2161  000606  D7FE               	bra	u1827
  2162  000608  2FDE               	decfsz	??_TrackIR& (0+255),f,b
  2163  00060A  D7FC               	bra	u1827
  2164  00060C  2FDF               	decfsz	(??_TrackIR+1)& (0+255),f,b
  2165  00060E  D7FA               	bra	u1827
  2166                           
  2167                           ;newFILE.c: 141: stop(&motorL, &motorR);
  2168  000610  0E34               	movlw	low _motorL
  2169  000612  0100               	movlb	0	; () banked
  2170  000614  6FD4               	movwf	stop@m_L& (0+255),b
  2171  000616  0E00               	movlw	high _motorL
  2172  000618  6FD5               	movwf	(stop@m_L+1)& (0+255),b
  2173  00061A  0E2B               	movlw	low _motorR
  2174  00061C  6FD6               	movwf	stop@m_R& (0+255),b
  2175  00061E  0E00               	movlw	high _motorR
  2176  000620  6FD7               	movwf	(stop@m_R+1)& (0+255),b
  2177  000622  EC8C  F007         	call	_stop	;wreg free
  2178                           
  2179                           ;newFILE.c: 142: } else {
  2180  000626  D027               	goto	l237
  2181  000628                     l236:
  2182                           
  2183                           ;newFILE.c: 144: turnLeft(&motorL, &motorR);
  2184  000628  0E34               	movlw	low _motorL
  2185  00062A  0100               	movlb	0	; () banked
  2186  00062C  6FD4               	movwf	turnLeft@m_L& (0+255),b
  2187  00062E  0E00               	movlw	high _motorL
  2188  000630  6FD5               	movwf	(turnLeft@m_L+1)& (0+255),b
  2189  000632  0E2B               	movlw	low _motorR
  2190  000634  6FD6               	movwf	turnLeft@m_R& (0+255),b
  2191  000636  0E00               	movlw	high _motorR
  2192  000638  6FD7               	movwf	(turnLeft@m_R+1)& (0+255),b
  2193  00063A  EC55  F009         	call	_turnLeft	;wreg free
  2194                           
  2195                           ;newFILE.c: 145: leftCount();
  2196  00063E  EC00  F00A         	call	_leftCount	;wreg free
  2197                           
  2198                           ;newFILE.c: 146: counter++;
  2199  000642  0100               	movlb	0	; () banked
  2200  000644  4BC4               	infsnz	_counter& (0+255),f,b
  2201  000646  2BC5               	incf	(_counter+1)& (0+255),f,b
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;newFILE.c: 147: _delay((unsigned long)((400)*(8000000/4000.0)));
  2205  000648  0E05               	movlw	5
  2206  00064A  0100               	movlb	0	; () banked
  2207  00064C  6FDF               	movwf	(??_TrackIR+1)& (0+255),b
  2208  00064E  0E0F               	movlw	15
  2209  000650  6FDE               	movwf	??_TrackIR& (0+255),b
  2210  000652  0EF1               	movlw	241
  2211  000654                     u1837:
  2212  000654  2EE8               	decfsz	wreg,f,c
  2213  000656  D7FE               	bra	u1837
  2214  000658  2FDE               	decfsz	??_TrackIR& (0+255),f,b
  2215  00065A  D7FC               	bra	u1837
  2216  00065C  2FDF               	decfsz	(??_TrackIR+1)& (0+255),f,b
  2217  00065E  D7FA               	bra	u1837
  2218                           
  2219                           ;newFILE.c: 148: stop(&motorL, &motorR);
  2220  000660  0E34               	movlw	low _motorL
  2221  000662  0100               	movlb	0	; () banked
  2222  000664  6FD4               	movwf	stop@m_L& (0+255),b
  2223  000666  0E00               	movlw	high _motorL
  2224  000668  6FD5               	movwf	(stop@m_L+1)& (0+255),b
  2225  00066A  0E2B               	movlw	low _motorR
  2226  00066C  6FD6               	movwf	stop@m_R& (0+255),b
  2227  00066E  0E00               	movlw	high _motorR
  2228  000670  6FD7               	movwf	(stop@m_R+1)& (0+255),b
  2229  000672  EC8C  F007         	call	_stop	;wreg free
  2230  000676                     l237:
  2231  000676                     l2787:
  2232                           
  2233                           ;newFILE.c: 149: };newFILE.c: 150: };newFILE.c: 153: };newFILE.c: 156: stop(&motorL, &mo
      +                          torR);
  2234  000676  0E34               	movlw	low _motorL
  2235  000678  0100               	movlb	0	; () banked
  2236  00067A  6FD4               	movwf	stop@m_L& (0+255),b
  2237  00067C  0E00               	movlw	high _motorL
  2238  00067E  6FD5               	movwf	(stop@m_L+1)& (0+255),b
  2239  000680  0E2B               	movlw	low _motorR
  2240  000682  6FD6               	movwf	stop@m_R& (0+255),b
  2241  000684  0E00               	movlw	high _motorR
  2242  000686  6FD7               	movwf	(stop@m_R+1)& (0+255),b
  2243  000688  EC8C  F007         	call	_stop	;wreg free
  2244  00068C  0012               	return		;funcret
  2245  00068E                     __end_of_TrackIR:
  2246                           	opt stack 0
  2247                           tblptru	equ	0xFF8
  2248                           tblptrh	equ	0xFF7
  2249                           tblptrl	equ	0xFF6
  2250                           tablat	equ	0xFF5
  2251                           prodh	equ	0xFF4
  2252                           prodl	equ	0xFF3
  2253                           postinc0	equ	0xFEE
  2254                           wreg	equ	0xFE8
  2255                           indf2	equ	0xFDF
  2256                           postinc2	equ	0xFDE
  2257                           postdec2	equ	0xFDD
  2258                           fsr2h	equ	0xFDA
  2259                           fsr2l	equ	0xFD9
  2260                           status	equ	0xFD8
  2261                           
  2262 ;; *************** function _turnRight *****************
  2263 ;; Defined at:
  2264 ;;		line 90 in file "MotorControl.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;  m_L             2   13[BANK0 ] PTR struct DC_motor
  2267 ;;		 -> motorL(9), 
  2268 ;;  m_R             2   15[BANK0 ] PTR struct DC_motor
  2269 ;;		 -> motorR(9), 
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;		None
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  1    wreg      void 
  2274 ;; Registers used:
  2275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2281 ;;      Params:         0       4       0       0
  2282 ;;      Locals:         0       0       0       0
  2283 ;;      Temps:          0       0       0       0
  2284 ;;      Totals:         0       4       0       0
  2285 ;;Total ram usage:        4 bytes
  2286 ;; Hardware stack levels used:    1
  2287 ;; Hardware stack levels required when called:    6
  2288 ;; This function calls:
  2289 ;;		_setMotorPWM
  2290 ;; This function is called by:
  2291 ;;		_TrackIR
  2292 ;;		_main
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296                           	psect	text6
  2297  001280                     __ptext6:
  2298                           	opt stack 0
  2299  001280                     _turnRight:
  2300                           	opt stack 24
  2301                           
  2302                           ;MotorControl.c: 92: motorL.direction=1;
  2303                           
  2304                           ;incstack = 0
  2305  001280  0E01               	movlw	1
  2306  001282  6E35               	movwf	_motorL+1,c
  2307                           
  2308                           ;MotorControl.c: 93: motorL.power=60;
  2309  001284  0E3C               	movlw	60
  2310  001286  6E34               	movwf	_motorL,c
  2311                           
  2312                           ;MotorControl.c: 94: setMotorPWM(m_L);
  2313  001288  C0D4  F029         	movff	turnRight@m_L,setMotorPWM@m
  2314  00128C  C0D5  F02A         	movff	turnRight@m_L+1,setMotorPWM@m+1
  2315  001290  EC79  F004         	call	_setMotorPWM	;wreg free
  2316                           
  2317                           ;MotorControl.c: 95: motorR.direction=0;
  2318  001294  0E00               	movlw	0
  2319  001296  6E2C               	movwf	_motorR+1,c
  2320                           
  2321                           ;MotorControl.c: 96: motorR.power=50;
  2322  001298  0E32               	movlw	50
  2323  00129A  6E2B               	movwf	_motorR,c
  2324                           
  2325                           ;MotorControl.c: 97: setMotorPWM(m_R);
  2326  00129C  C0D6  F029         	movff	turnRight@m_R,setMotorPWM@m
  2327  0012A0  C0D7  F02A         	movff	turnRight@m_R+1,setMotorPWM@m+1
  2328  0012A4  EC79  F004         	call	_setMotorPWM	;wreg free
  2329  0012A8  0012               	return		;funcret
  2330  0012AA                     __end_of_turnRight:
  2331                           	opt stack 0
  2332                           tblptru	equ	0xFF8
  2333                           tblptrh	equ	0xFF7
  2334                           tblptrl	equ	0xFF6
  2335                           tablat	equ	0xFF5
  2336                           prodh	equ	0xFF4
  2337                           prodl	equ	0xFF3
  2338                           postinc0	equ	0xFEE
  2339                           wreg	equ	0xFE8
  2340                           indf2	equ	0xFDF
  2341                           postinc2	equ	0xFDE
  2342                           postdec2	equ	0xFDD
  2343                           fsr2h	equ	0xFDA
  2344                           fsr2l	equ	0xFD9
  2345                           status	equ	0xFD8
  2346                           
  2347 ;; *************** function _turnLeft *****************
  2348 ;; Defined at:
  2349 ;;		line 80 in file "MotorControl.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;  m_L             2   13[BANK0 ] PTR struct DC_motor
  2352 ;;		 -> motorL(9), 
  2353 ;;  m_R             2   15[BANK0 ] PTR struct DC_motor
  2354 ;;		 -> motorR(9), 
  2355 ;; Auto vars:     Size  Location     Type
  2356 ;;		None
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  1    wreg      void 
  2359 ;; Registers used:
  2360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2366 ;;      Params:         0       4       0       0
  2367 ;;      Locals:         0       0       0       0
  2368 ;;      Temps:          0       0       0       0
  2369 ;;      Totals:         0       4       0       0
  2370 ;;Total ram usage:        4 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; Hardware stack levels required when called:    6
  2373 ;; This function calls:
  2374 ;;		_setMotorPWM
  2375 ;; This function is called by:
  2376 ;;		_TrackIR
  2377 ;;		_main
  2378 ;; This function uses a non-reentrant model
  2379 ;;
  2380                           
  2381                           	psect	text7
  2382  0012AA                     __ptext7:
  2383                           	opt stack 0
  2384  0012AA                     _turnLeft:
  2385                           	opt stack 24
  2386                           
  2387                           ;MotorControl.c: 82: motorL.direction=0;
  2388                           
  2389                           ;incstack = 0
  2390  0012AA  0E00               	movlw	0
  2391  0012AC  6E35               	movwf	_motorL+1,c
  2392                           
  2393                           ;MotorControl.c: 83: motorL.power=50;
  2394  0012AE  0E32               	movlw	50
  2395  0012B0  6E34               	movwf	_motorL,c
  2396                           
  2397                           ;MotorControl.c: 84: setMotorPWM(m_L);
  2398  0012B2  C0D4  F029         	movff	turnLeft@m_L,setMotorPWM@m
  2399  0012B6  C0D5  F02A         	movff	turnLeft@m_L+1,setMotorPWM@m+1
  2400  0012BA  EC79  F004         	call	_setMotorPWM	;wreg free
  2401                           
  2402                           ;MotorControl.c: 85: motorR.direction=1;
  2403  0012BE  0E01               	movlw	1
  2404  0012C0  6E2C               	movwf	_motorR+1,c
  2405                           
  2406                           ;MotorControl.c: 86: motorR.power=60;
  2407  0012C2  0E3C               	movlw	60
  2408  0012C4  6E2B               	movwf	_motorR,c
  2409                           
  2410                           ;MotorControl.c: 87: setMotorPWM(m_R);
  2411  0012C6  C0D6  F029         	movff	turnLeft@m_R,setMotorPWM@m
  2412  0012CA  C0D7  F02A         	movff	turnLeft@m_R+1,setMotorPWM@m+1
  2413  0012CE  EC79  F004         	call	_setMotorPWM	;wreg free
  2414  0012D2  0012               	return		;funcret
  2415  0012D4                     __end_of_turnLeft:
  2416                           	opt stack 0
  2417                           tblptru	equ	0xFF8
  2418                           tblptrh	equ	0xFF7
  2419                           tblptrl	equ	0xFF6
  2420                           tablat	equ	0xFF5
  2421                           prodh	equ	0xFF4
  2422                           prodl	equ	0xFF3
  2423                           postinc0	equ	0xFEE
  2424                           wreg	equ	0xFE8
  2425                           indf2	equ	0xFDF
  2426                           postinc2	equ	0xFDE
  2427                           postdec2	equ	0xFDD
  2428                           fsr2h	equ	0xFDA
  2429                           fsr2l	equ	0xFD9
  2430                           status	equ	0xFD8
  2431                           
  2432 ;; *************** function _stop *****************
  2433 ;; Defined at:
  2434 ;;		line 64 in file "MotorControl.c"
  2435 ;; Parameters:    Size  Location     Type
  2436 ;;  m_L             2   13[BANK0 ] PTR struct DC_motor
  2437 ;;		 -> motorL(9), 
  2438 ;;  m_R             2   15[BANK0 ] PTR struct DC_motor
  2439 ;;		 -> motorR(9), 
  2440 ;; Auto vars:     Size  Location     Type
  2441 ;;		None
  2442 ;; Return value:  Size  Location     Type
  2443 ;;                  1    wreg      void 
  2444 ;; Registers used:
  2445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2446 ;; Tracked objects:
  2447 ;;		On entry : 0/0
  2448 ;;		On exit  : 0/0
  2449 ;;		Unchanged: 0/0
  2450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2451 ;;      Params:         0       4       0       0
  2452 ;;      Locals:         0       0       0       0
  2453 ;;      Temps:          0       2       0       0
  2454 ;;      Totals:         0       6       0       0
  2455 ;;Total ram usage:        6 bytes
  2456 ;; Hardware stack levels used:    1
  2457 ;; Hardware stack levels required when called:    6
  2458 ;; This function calls:
  2459 ;;		_setMotorPWM
  2460 ;; This function is called by:
  2461 ;;		_TrackIR
  2462 ;;		_main
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           	psect	text8
  2467  000F18                     __ptext8:
  2468                           	opt stack 0
  2469  000F18                     _stop:
  2470                           	opt stack 24
  2471                           
  2472                           ;MotorControl.c: 65: motorL.direction = 1;
  2473                           
  2474                           ;incstack = 0
  2475  000F18  0E01               	movlw	1
  2476  000F1A  6E35               	movwf	_motorL+1,c
  2477                           
  2478                           ;MotorControl.c: 66: motorL.power = 0;
  2479  000F1C  0E00               	movlw	0
  2480  000F1E  6E34               	movwf	_motorL,c
  2481                           
  2482                           ;MotorControl.c: 67: setMotorPWM(m_L);
  2483  000F20  C0D4  F029         	movff	stop@m_L,setMotorPWM@m
  2484  000F24  C0D5  F02A         	movff	stop@m_L+1,setMotorPWM@m+1
  2485  000F28  EC79  F004         	call	_setMotorPWM	;wreg free
  2486                           
  2487                           ;MotorControl.c: 68: motorR.direction = 1;
  2488  000F2C  0E01               	movlw	1
  2489  000F2E  6E2C               	movwf	_motorR+1,c
  2490                           
  2491                           ;MotorControl.c: 69: motorR.power = 0;
  2492  000F30  0E00               	movlw	0
  2493  000F32  6E2B               	movwf	_motorR,c
  2494                           
  2495                           ;MotorControl.c: 70: setMotorPWM(m_R);
  2496  000F34  C0D6  F029         	movff	stop@m_R,setMotorPWM@m
  2497  000F38  C0D7  F02A         	movff	stop@m_R+1,setMotorPWM@m+1
  2498  000F3C  EC79  F004         	call	_setMotorPWM	;wreg free
  2499                           
  2500                           ;MotorControl.c: 71: _delay((unsigned long)((200)*(8000000/4000.0)));
  2501  000F40  0E03               	movlw	3
  2502  000F42  0100               	movlb	0	; () banked
  2503  000F44  6FD9               	movwf	(??_stop+1)& (0+255),b
  2504  000F46  0E08               	movlw	8
  2505  000F48  6FD8               	movwf	??_stop& (0+255),b
  2506  000F4A  0E77               	movlw	119
  2507  000F4C                     u1847:
  2508  000F4C  2EE8               	decfsz	wreg,f,c
  2509  000F4E  D7FE               	bra	u1847
  2510  000F50  2FD8               	decfsz	??_stop& (0+255),f,b
  2511  000F52  D7FC               	bra	u1847
  2512  000F54  2FD9               	decfsz	(??_stop+1)& (0+255),f,b
  2513  000F56  D7FA               	bra	u1847
  2514                           
  2515                           ;MotorControl.c: 72: motorL.direction = 1;
  2516  000F58  0E01               	movlw	1
  2517  000F5A  6E35               	movwf	_motorL+1,c
  2518                           
  2519                           ;MotorControl.c: 73: motorL.power = 0;
  2520  000F5C  0E00               	movlw	0
  2521  000F5E  6E34               	movwf	_motorL,c
  2522                           
  2523                           ;MotorControl.c: 74: setMotorPWM(m_L);
  2524  000F60  C0D4  F029         	movff	stop@m_L,setMotorPWM@m
  2525  000F64  C0D5  F02A         	movff	stop@m_L+1,setMotorPWM@m+1
  2526  000F68  EC79  F004         	call	_setMotorPWM	;wreg free
  2527                           
  2528                           ;MotorControl.c: 75: motorR.direction = 1;
  2529  000F6C  0E01               	movlw	1
  2530  000F6E  6E2C               	movwf	_motorR+1,c
  2531                           
  2532                           ;MotorControl.c: 76: motorR.power = 0;
  2533  000F70  0E00               	movlw	0
  2534  000F72  6E2B               	movwf	_motorR,c
  2535                           
  2536                           ;MotorControl.c: 77: setMotorPWM(m_R);
  2537  000F74  C0D6  F029         	movff	stop@m_R,setMotorPWM@m
  2538  000F78  C0D7  F02A         	movff	stop@m_R+1,setMotorPWM@m+1
  2539  000F7C  EC79  F004         	call	_setMotorPWM	;wreg free
  2540  000F80  0012               	return		;funcret
  2541  000F82                     __end_of_stop:
  2542                           	opt stack 0
  2543                           tblptru	equ	0xFF8
  2544                           tblptrh	equ	0xFF7
  2545                           tblptrl	equ	0xFF6
  2546                           tablat	equ	0xFF5
  2547                           prodh	equ	0xFF4
  2548                           prodl	equ	0xFF3
  2549                           postinc0	equ	0xFEE
  2550                           wreg	equ	0xFE8
  2551                           indf2	equ	0xFDF
  2552                           postinc2	equ	0xFDE
  2553                           postdec2	equ	0xFDD
  2554                           fsr2h	equ	0xFDA
  2555                           fsr2l	equ	0xFD9
  2556                           status	equ	0xFD8
  2557                           
  2558 ;; *************** function _rightCount *****************
  2559 ;; Defined at:
  2560 ;;		line 76 in file "newFILE.c"
  2561 ;; Parameters:    Size  Location     Type
  2562 ;;		None
  2563 ;; Auto vars:     Size  Location     Type
  2564 ;;		None
  2565 ;; Return value:  Size  Location     Type
  2566 ;;                  1    wreg      void 
  2567 ;; Registers used:
  2568 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2569 ;; Tracked objects:
  2570 ;;		On entry : 0/0
  2571 ;;		On exit  : 0/0
  2572 ;;		Unchanged: 0/0
  2573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2574 ;;      Params:         0       0       0       0
  2575 ;;      Locals:         0       0       0       0
  2576 ;;      Temps:          0       0       0       0
  2577 ;;      Totals:         0       0       0       0
  2578 ;;Total ram usage:        0 bytes
  2579 ;; Hardware stack levels used:    1
  2580 ;; Hardware stack levels required when called:    4
  2581 ;; This function calls:
  2582 ;;		Nothing
  2583 ;; This function is called by:
  2584 ;;		_TrackIR
  2585 ;; This function uses a non-reentrant model
  2586 ;;
  2587                           
  2588                           	psect	text9
  2589  0013E2                     __ptext9:
  2590                           	opt stack 0
  2591  0013E2                     _rightCount:
  2592                           	opt stack 25
  2593                           
  2594                           ;newFILE.c: 78: arrayCount[counter]=2;
  2595                           
  2596                           ;incstack = 0
  2597  0013E2  90D8               	bcf	status,0,c
  2598  0013E4  0100               	movlb	0	; () banked
  2599  0013E6  35C4               	rlcf	_counter& (0+255),w,b
  2600  0013E8  6ED9               	movwf	fsr2l,c
  2601  0013EA  35C5               	rlcf	(_counter+1)& (0+255),w,b
  2602  0013EC  6EDA               	movwf	fsr2h,c
  2603  0013EE  0E60               	movlw	low _arrayCount
  2604  0013F0  26D9               	addwf	fsr2l,f,c
  2605  0013F2  0E00               	movlw	high _arrayCount
  2606  0013F4  22DA               	addwfc	fsr2h,f,c
  2607  0013F6  0E02               	movlw	2
  2608  0013F8  6EDE               	movwf	postinc2,c
  2609  0013FA  0E00               	movlw	0
  2610  0013FC  6EDD               	movwf	postdec2,c
  2611                           
  2612                           ; BSR set to: 0
  2613  0013FE  0012               	return		;funcret
  2614  001400                     __end_of_rightCount:
  2615                           	opt stack 0
  2616                           tblptru	equ	0xFF8
  2617                           tblptrh	equ	0xFF7
  2618                           tblptrl	equ	0xFF6
  2619                           tablat	equ	0xFF5
  2620                           prodh	equ	0xFF4
  2621                           prodl	equ	0xFF3
  2622                           postinc0	equ	0xFEE
  2623                           wreg	equ	0xFE8
  2624                           indf2	equ	0xFDF
  2625                           postinc2	equ	0xFDE
  2626                           postdec2	equ	0xFDD
  2627                           fsr2h	equ	0xFDA
  2628                           fsr2l	equ	0xFD9
  2629                           status	equ	0xFD8
  2630                           
  2631 ;; *************** function _leftCount *****************
  2632 ;; Defined at:
  2633 ;;		line 71 in file "newFILE.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;		None
  2636 ;; Auto vars:     Size  Location     Type
  2637 ;;		None
  2638 ;; Return value:  Size  Location     Type
  2639 ;;                  1    wreg      void 
  2640 ;; Registers used:
  2641 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2642 ;; Tracked objects:
  2643 ;;		On entry : 0/0
  2644 ;;		On exit  : 0/0
  2645 ;;		Unchanged: 0/0
  2646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2647 ;;      Params:         0       0       0       0
  2648 ;;      Locals:         0       0       0       0
  2649 ;;      Temps:          0       0       0       0
  2650 ;;      Totals:         0       0       0       0
  2651 ;;Total ram usage:        0 bytes
  2652 ;; Hardware stack levels used:    1
  2653 ;; Hardware stack levels required when called:    4
  2654 ;; This function calls:
  2655 ;;		Nothing
  2656 ;; This function is called by:
  2657 ;;		_TrackIR
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661                           	psect	text10
  2662  001400                     __ptext10:
  2663                           	opt stack 0
  2664  001400                     _leftCount:
  2665                           	opt stack 25
  2666                           
  2667                           ;newFILE.c: 73: arrayCount[counter]=1;
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;incstack = 0
  2671  001400  90D8               	bcf	status,0,c
  2672  001402  0100               	movlb	0	; () banked
  2673  001404  35C4               	rlcf	_counter& (0+255),w,b
  2674  001406  6ED9               	movwf	fsr2l,c
  2675  001408  35C5               	rlcf	(_counter+1)& (0+255),w,b
  2676  00140A  6EDA               	movwf	fsr2h,c
  2677  00140C  0E60               	movlw	low _arrayCount
  2678  00140E  26D9               	addwf	fsr2l,f,c
  2679  001410  0E00               	movlw	high _arrayCount
  2680  001412  22DA               	addwfc	fsr2h,f,c
  2681  001414  0E01               	movlw	1
  2682  001416  6EDE               	movwf	postinc2,c
  2683  001418  0E00               	movlw	0
  2684  00141A  6EDD               	movwf	postdec2,c
  2685                           
  2686                           ; BSR set to: 0
  2687  00141C  0012               	return		;funcret
  2688  00141E                     __end_of_leftCount:
  2689                           	opt stack 0
  2690                           tblptru	equ	0xFF8
  2691                           tblptrh	equ	0xFF7
  2692                           tblptrl	equ	0xFF6
  2693                           tablat	equ	0xFF5
  2694                           prodh	equ	0xFF4
  2695                           prodl	equ	0xFF3
  2696                           postinc0	equ	0xFEE
  2697                           wreg	equ	0xFE8
  2698                           indf2	equ	0xFDF
  2699                           postinc2	equ	0xFDE
  2700                           postdec2	equ	0xFDD
  2701                           fsr2h	equ	0xFDA
  2702                           fsr2l	equ	0xFD9
  2703                           status	equ	0xFD8
  2704                           
  2705 ;; *************** function _fwdCount *****************
  2706 ;; Defined at:
  2707 ;;		line 66 in file "newFILE.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;		None
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;		None
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  1    wreg      void 
  2714 ;; Registers used:
  2715 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2721 ;;      Params:         0       0       0       0
  2722 ;;      Locals:         0       0       0       0
  2723 ;;      Temps:          0       0       0       0
  2724 ;;      Totals:         0       0       0       0
  2725 ;;Total ram usage:        0 bytes
  2726 ;; Hardware stack levels used:    1
  2727 ;; Hardware stack levels required when called:    4
  2728 ;; This function calls:
  2729 ;;		Nothing
  2730 ;; This function is called by:
  2731 ;;		_TrackIR
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           	psect	text11
  2736  00141E                     __ptext11:
  2737                           	opt stack 0
  2738  00141E                     _fwdCount:
  2739                           	opt stack 25
  2740                           
  2741                           ;newFILE.c: 68: arrayCount[counter]=0;
  2742                           
  2743                           ; BSR set to: 0
  2744                           ;incstack = 0
  2745  00141E  90D8               	bcf	status,0,c
  2746  001420  0100               	movlb	0	; () banked
  2747  001422  35C4               	rlcf	_counter& (0+255),w,b
  2748  001424  6ED9               	movwf	fsr2l,c
  2749  001426  35C5               	rlcf	(_counter+1)& (0+255),w,b
  2750  001428  6EDA               	movwf	fsr2h,c
  2751  00142A  0E60               	movlw	low _arrayCount
  2752  00142C  26D9               	addwf	fsr2l,f,c
  2753  00142E  0E00               	movlw	high _arrayCount
  2754  001430  22DA               	addwfc	fsr2h,f,c
  2755  001432  0E00               	movlw	0
  2756  001434  6EDE               	movwf	postinc2,c
  2757  001436  0E00               	movlw	0
  2758  001438  6EDD               	movwf	postdec2,c
  2759                           
  2760                           ; BSR set to: 0
  2761  00143A  0012               	return		;funcret
  2762  00143C                     __end_of_fwdCount:
  2763                           	opt stack 0
  2764                           tblptru	equ	0xFF8
  2765                           tblptrh	equ	0xFF7
  2766                           tblptrl	equ	0xFF6
  2767                           tablat	equ	0xFF5
  2768                           prodh	equ	0xFF4
  2769                           prodl	equ	0xFF3
  2770                           postinc0	equ	0xFEE
  2771                           wreg	equ	0xFE8
  2772                           indf2	equ	0xFDF
  2773                           postinc2	equ	0xFDE
  2774                           postdec2	equ	0xFDD
  2775                           fsr2h	equ	0xFDA
  2776                           fsr2l	equ	0xFD9
  2777                           status	equ	0xFD8
  2778                           
  2779 ;; *************** function _forward *****************
  2780 ;; Defined at:
  2781 ;;		line 100 in file "MotorControl.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;  m_L             2   13[BANK0 ] PTR struct DC_motor
  2784 ;;		 -> motorL(9), 
  2785 ;;  m_R             2   15[BANK0 ] PTR struct DC_motor
  2786 ;;		 -> motorR(9), 
  2787 ;; Auto vars:     Size  Location     Type
  2788 ;;		None
  2789 ;; Return value:  Size  Location     Type
  2790 ;;                  1    wreg      void 
  2791 ;; Registers used:
  2792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2798 ;;      Params:         0       4       0       0
  2799 ;;      Locals:         0       0       0       0
  2800 ;;      Temps:          0       0       0       0
  2801 ;;      Totals:         0       4       0       0
  2802 ;;Total ram usage:        4 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    6
  2805 ;; This function calls:
  2806 ;;		_setMotorPWM
  2807 ;; This function is called by:
  2808 ;;		_TrackIR
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           	psect	text12
  2813  0012D4                     __ptext12:
  2814                           	opt stack 0
  2815  0012D4                     _forward:
  2816                           	opt stack 23
  2817                           
  2818                           ;MotorControl.c: 102: motorL.direction=1;
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;incstack = 0
  2822  0012D4  0E01               	movlw	1
  2823  0012D6  6E35               	movwf	_motorL+1,c
  2824                           
  2825                           ;MotorControl.c: 103: motorL.power=73;
  2826  0012D8  0E49               	movlw	73
  2827  0012DA  6E34               	movwf	_motorL,c
  2828                           
  2829                           ;MotorControl.c: 104: setMotorPWM(m_L);
  2830  0012DC  C0D4  F029         	movff	forward@m_L,setMotorPWM@m
  2831  0012E0  C0D5  F02A         	movff	forward@m_L+1,setMotorPWM@m+1
  2832  0012E4  EC79  F004         	call	_setMotorPWM	;wreg free
  2833                           
  2834                           ;MotorControl.c: 105: motorR.direction=1;
  2835  0012E8  0E01               	movlw	1
  2836  0012EA  6E2C               	movwf	_motorR+1,c
  2837                           
  2838                           ;MotorControl.c: 106: motorR.power=71;
  2839  0012EC  0E47               	movlw	71
  2840  0012EE  6E2B               	movwf	_motorR,c
  2841                           
  2842                           ;MotorControl.c: 107: setMotorPWM(m_R);
  2843  0012F0  C0D6  F029         	movff	forward@m_R,setMotorPWM@m
  2844  0012F4  C0D7  F02A         	movff	forward@m_R+1,setMotorPWM@m+1
  2845  0012F8  EC79  F004         	call	_setMotorPWM	;wreg free
  2846  0012FC  0012               	return		;funcret
  2847  0012FE                     __end_of_forward:
  2848                           	opt stack 0
  2849                           tblptru	equ	0xFF8
  2850                           tblptrh	equ	0xFF7
  2851                           tblptrl	equ	0xFF6
  2852                           tablat	equ	0xFF5
  2853                           prodh	equ	0xFF4
  2854                           prodl	equ	0xFF3
  2855                           postinc0	equ	0xFEE
  2856                           wreg	equ	0xFE8
  2857                           indf2	equ	0xFDF
  2858                           postinc2	equ	0xFDE
  2859                           postdec2	equ	0xFDD
  2860                           fsr2h	equ	0xFDA
  2861                           fsr2l	equ	0xFD9
  2862                           status	equ	0xFD8
  2863                           
  2864 ;; *************** function _setMotorPWM *****************
  2865 ;; Defined at:
  2866 ;;		line 32 in file "MotorControl.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;  m               2   40[COMRAM] PTR struct DC_motor
  2869 ;;		 -> motorR(9), motorL(9), 
  2870 ;; Auto vars:     Size  Location     Type
  2871 ;;  PWMduty         2   11[BANK0 ] int 
  2872 ;; Return value:  Size  Location     Type
  2873 ;;                  1    wreg      void 
  2874 ;; Registers used:
  2875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2876 ;; Tracked objects:
  2877 ;;		On entry : 0/0
  2878 ;;		On exit  : 0/0
  2879 ;;		Unchanged: 0/0
  2880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2881 ;;      Params:         2       0       0       0
  2882 ;;      Locals:         0       2       0       0
  2883 ;;      Temps:          0       3       0       0
  2884 ;;      Totals:         2       5       0       0
  2885 ;;Total ram usage:        7 bytes
  2886 ;; Hardware stack levels used:    1
  2887 ;; Hardware stack levels required when called:    5
  2888 ;; This function calls:
  2889 ;;		___awdiv
  2890 ;;		___wmul
  2891 ;; This function is called by:
  2892 ;;		_stop
  2893 ;;		_turnLeft
  2894 ;;		_turnRight
  2895 ;;		_forward
  2896 ;;		_back
  2897 ;;		_setMotorFullSpeed
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901                           	psect	text13
  2902  0008F2                     __ptext13:
  2903                           	opt stack 0
  2904  0008F2                     _setMotorPWM:
  2905                           	opt stack 24
  2906                           
  2907                           ;MotorControl.c: 34: int PWMduty;;MotorControl.c: 35: if (m->direction){
  2908                           
  2909                           ;incstack = 0
  2910  0008F2  EE20 F001          	lfsr	2,1
  2911  0008F6  5029               	movf	setMotorPWM@m,w,c
  2912  0008F8  26D9               	addwf	fsr2l,f,c
  2913  0008FA  502A               	movf	setMotorPWM@m+1,w,c
  2914  0008FC  22DA               	addwfc	fsr2h,f,c
  2915  0008FE  50DF               	movf	indf2,w,c
  2916  000900  B4D8               	btfsc	status,2,c
  2917  000902  D037               	goto	l32
  2918                           
  2919                           ;MotorControl.c: 37: PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  2920  000904  EE20 F007          	lfsr	2,7
  2921  000908  5029               	movf	setMotorPWM@m,w,c
  2922  00090A  26D9               	addwf	fsr2l,f,c
  2923  00090C  502A               	movf	setMotorPWM@m+1,w,c
  2924  00090E  22DA               	addwfc	fsr2h,f,c
  2925  000910  CFDE F0CF          	movff	postinc2,??_setMotorPWM
  2926  000914  CFDD F0D0          	movff	postdec2,??_setMotorPWM+1
  2927  000918  C029  FFD9         	movff	setMotorPWM@m,fsr2l
  2928  00091C  C02A  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2929  000920  50DF               	movf	indf2,w,c
  2930  000922  0100               	movlb	0	; () banked
  2931  000924  6FD1               	movwf	(??_setMotorPWM+2)& (0+255),b
  2932  000926  51D1               	movf	(??_setMotorPWM+2)& (0+255),w,b
  2933  000928  6E23               	movwf	___wmul@multiplier,c
  2934  00092A  6A24               	clrf	___wmul@multiplier+1,c
  2935  00092C  EE20 F007          	lfsr	2,7
  2936  000930  5029               	movf	setMotorPWM@m,w,c
  2937  000932  26D9               	addwf	fsr2l,f,c
  2938  000934  502A               	movf	setMotorPWM@m+1,w,c
  2939  000936  22DA               	addwfc	fsr2h,f,c
  2940  000938  CFDE F025          	movff	postinc2,___wmul@multiplicand
  2941  00093C  CFDD F026          	movff	postdec2,___wmul@multiplicand+1
  2942  000940  ECBA  F009         	call	___wmul	;wreg free
  2943  000944  C023  F0C7         	movff	?___wmul,___awdiv@dividend
  2944  000948  C024  F0C8         	movff	?___wmul+1,___awdiv@dividend+1
  2945  00094C  0E00               	movlw	0
  2946  00094E  0100               	movlb	0	; () banked
  2947  000950  6FCA               	movwf	(___awdiv@divisor+1)& (0+255),b
  2948  000952  0E64               	movlw	100
  2949  000954  6FC9               	movwf	___awdiv@divisor& (0+255),b
  2950  000956  EC07  F007         	call	___awdiv	;wreg free
  2951  00095A  0100               	movlb	0	; () banked
  2952  00095C  1FC7               	comf	?___awdiv& (0+255),f,b
  2953  00095E  1FC8               	comf	(?___awdiv+1)& (0+255),f,b
  2954  000960  4BC7               	infsnz	?___awdiv& (0+255),f,b
  2955  000962  2BC8               	incf	(?___awdiv+1)& (0+255),f,b
  2956  000964  51CF               	movf	??_setMotorPWM& (0+255),w,b
  2957  000966  25C7               	addwf	?___awdiv& (0+255),w,b
  2958  000968  6FD2               	movwf	setMotorPWM@PWMduty& (0+255),b
  2959  00096A  51D0               	movf	(??_setMotorPWM+1)& (0+255),w,b
  2960  00096C  21C8               	addwfc	(?___awdiv+1)& (0+255),w,b
  2961  00096E  6FD3               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  2962                           
  2963                           ;MotorControl.c: 38: }
  2964  000970  D025               	goto	l33
  2965  000972                     l32:
  2966                           
  2967                           ;MotorControl.c: 39: else {;MotorControl.c: 41: PWMduty=((int)(m->power)*(m->PWMperiod))
      +                          /100;
  2968                           
  2969                           ; BSR set to: 0
  2970  000972  C029  FFD9         	movff	setMotorPWM@m,fsr2l
  2971  000976  C02A  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2972  00097A  50DF               	movf	indf2,w,c
  2973  00097C  0100               	movlb	0	; () banked
  2974  00097E  6FCF               	movwf	??_setMotorPWM& (0+255),b
  2975  000980  51CF               	movf	??_setMotorPWM& (0+255),w,b
  2976  000982  6E23               	movwf	___wmul@multiplier,c
  2977  000984  6A24               	clrf	___wmul@multiplier+1,c
  2978  000986  EE20 F007          	lfsr	2,7
  2979  00098A  5029               	movf	setMotorPWM@m,w,c
  2980  00098C  26D9               	addwf	fsr2l,f,c
  2981  00098E  502A               	movf	setMotorPWM@m+1,w,c
  2982  000990  22DA               	addwfc	fsr2h,f,c
  2983  000992  CFDE F025          	movff	postinc2,___wmul@multiplicand
  2984  000996  CFDD F026          	movff	postdec2,___wmul@multiplicand+1
  2985  00099A  ECBA  F009         	call	___wmul	;wreg free
  2986  00099E  C023  F0C7         	movff	?___wmul,___awdiv@dividend
  2987  0009A2  C024  F0C8         	movff	?___wmul+1,___awdiv@dividend+1
  2988  0009A6  0E00               	movlw	0
  2989  0009A8  0100               	movlb	0	; () banked
  2990  0009AA  6FCA               	movwf	(___awdiv@divisor+1)& (0+255),b
  2991  0009AC  0E64               	movlw	100
  2992  0009AE  6FC9               	movwf	___awdiv@divisor& (0+255),b
  2993  0009B0  EC07  F007         	call	___awdiv	;wreg free
  2994  0009B4  C0C7  F0D2         	movff	?___awdiv,setMotorPWM@PWMduty
  2995  0009B8  C0C8  F0D3         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  2996  0009BC                     l33:
  2997                           
  2998                           ;MotorControl.c: 42: };MotorControl.c: 43: PWMduty = (PWMduty << 2);
  2999  0009BC  C0D2  F0CF         	movff	setMotorPWM@PWMduty,??_setMotorPWM
  3000  0009C0  C0D3  F0D0         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+1
  3001  0009C4  0100               	movlb	0	; () banked
  3002  0009C6  90D8               	bcf	status,0,c
  3003  0009C8  37CF               	rlcf	??_setMotorPWM& (0+255),f,b
  3004  0009CA  37D0               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  3005  0009CC  90D8               	bcf	status,0,c
  3006  0009CE  37CF               	rlcf	??_setMotorPWM& (0+255),f,b
  3007  0009D0  37D0               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  3008  0009D2  C0CF  F0D2         	movff	??_setMotorPWM,setMotorPWM@PWMduty
  3009  0009D6  C0D0  F0D3         	movff	??_setMotorPWM+1,setMotorPWM@PWMduty+1
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;MotorControl.c: 44: *(m->dutyLowByte) = PWMduty & 0xFF;
  3013  0009DA  EE20 F002          	lfsr	2,2
  3014  0009DE  5029               	movf	setMotorPWM@m,w,c
  3015  0009E0  26D9               	addwf	fsr2l,f,c
  3016  0009E2  502A               	movf	setMotorPWM@m+1,w,c
  3017  0009E4  22DA               	addwfc	fsr2h,f,c
  3018  0009E6  CFDE F0CF          	movff	postinc2,??_setMotorPWM
  3019  0009EA  CFDD F0D0          	movff	postdec2,??_setMotorPWM+1
  3020  0009EE  C0CF  FFD9         	movff	??_setMotorPWM,fsr2l
  3021  0009F2  C0D0  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3022  0009F6  C0D2  FFDF         	movff	setMotorPWM@PWMduty,indf2
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;MotorControl.c: 45: *(m->dutyHighByte) = (PWMduty >> 8) & 0x3F;
  3026  0009FA  EE20 F004          	lfsr	2,4
  3027  0009FE  5029               	movf	setMotorPWM@m,w,c
  3028  000A00  26D9               	addwf	fsr2l,f,c
  3029  000A02  502A               	movf	setMotorPWM@m+1,w,c
  3030  000A04  22DA               	addwfc	fsr2h,f,c
  3031  000A06  CFDE F0CF          	movff	postinc2,??_setMotorPWM
  3032  000A0A  CFDD F0D0          	movff	postdec2,??_setMotorPWM+1
  3033  000A0E  C0CF  FFD9         	movff	??_setMotorPWM,fsr2l
  3034  000A12  C0D0  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3035  000A16  51D3               	movf	(setMotorPWM@PWMduty+1)& (0+255),w,b
  3036  000A18  0B3F               	andlw	63
  3037  000A1A  6EDF               	movwf	indf2,c
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;MotorControl.c: 47: if (m->direction){
  3041  000A1C  EE20 F001          	lfsr	2,1
  3042  000A20  5029               	movf	setMotorPWM@m,w,c
  3043  000A22  26D9               	addwf	fsr2l,f,c
  3044  000A24  502A               	movf	setMotorPWM@m+1,w,c
  3045  000A26  22DA               	addwfc	fsr2h,f,c
  3046  000A28  50DF               	movf	indf2,w,c
  3047  000A2A  B4D8               	btfsc	status,2,c
  3048  000A2C  D015               	goto	l34
  3049                           
  3050                           ; BSR set to: 0
  3051                           ;MotorControl.c: 48: LATB=LATB | (1<<(m->dir_pin));
  3052  000A2E  EE20 F006          	lfsr	2,6
  3053  000A32  5029               	movf	setMotorPWM@m,w,c
  3054  000A34  26D9               	addwf	fsr2l,f,c
  3055  000A36  502A               	movf	setMotorPWM@m+1,w,c
  3056  000A38  22DA               	addwfc	fsr2h,f,c
  3057  000A3A  50DF               	movf	indf2,w,c
  3058  000A3C  6FCF               	movwf	??_setMotorPWM& (0+255),b
  3059  000A3E  0E01               	movlw	1
  3060  000A40  6FD0               	movwf	(??_setMotorPWM+1)& (0+255),b
  3061  000A42  2BCF               	incf	??_setMotorPWM& (0+255),f,b
  3062  000A44  D002               	goto	u1354
  3063  000A46                     u1355:
  3064  000A46  90D8               	bcf	status,0,c
  3065  000A48  37D0               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  3066  000A4A                     u1354:
  3067  000A4A  2FCF               	decfsz	??_setMotorPWM& (0+255),f,b
  3068  000A4C  D7FC               	goto	u1355
  3069  000A4E  0100               	movlb	0	; () banked
  3070  000A50  51D0               	movf	(??_setMotorPWM+1)& (0+255),w,b
  3071  000A52  108A               	iorwf	3978,w,c	;volatile
  3072  000A54  6E8A               	movwf	3978,c	;volatile
  3073                           
  3074                           ;MotorControl.c: 49: } else {
  3075  000A56  0012               	return	
  3076  000A58                     l34:
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;MotorControl.c: 50: LATB=LATB & (~(1<<(m->dir_pin)));
  3080                           
  3081                           ; BSR set to: 0
  3082  000A58  EE20 F006          	lfsr	2,6
  3083  000A5C  5029               	movf	setMotorPWM@m,w,c
  3084  000A5E  26D9               	addwf	fsr2l,f,c
  3085  000A60  502A               	movf	setMotorPWM@m+1,w,c
  3086  000A62  22DA               	addwfc	fsr2h,f,c
  3087  000A64  50DF               	movf	indf2,w,c
  3088  000A66  6FCF               	movwf	??_setMotorPWM& (0+255),b
  3089  000A68  0E01               	movlw	1
  3090  000A6A  6FD0               	movwf	(??_setMotorPWM+1)& (0+255),b
  3091  000A6C  2BCF               	incf	??_setMotorPWM& (0+255),f,b
  3092  000A6E  D002               	goto	u1364
  3093  000A70                     u1365:
  3094  000A70  90D8               	bcf	status,0,c
  3095  000A72  37D0               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  3096  000A74                     u1364:
  3097  000A74  2FCF               	decfsz	??_setMotorPWM& (0+255),f,b
  3098  000A76  D7FC               	goto	u1365
  3099  000A78  0100               	movlb	0	; () banked
  3100  000A7A  51D0               	movf	(??_setMotorPWM+1)& (0+255),w,b
  3101  000A7C  0AFF               	xorlw	255
  3102  000A7E  148A               	andwf	3978,w,c	;volatile
  3103  000A80  6E8A               	movwf	3978,c	;volatile
  3104  000A82  0012               	return	
  3105  000A84                     __end_of_setMotorPWM:
  3106                           	opt stack 0
  3107                           tblptru	equ	0xFF8
  3108                           tblptrh	equ	0xFF7
  3109                           tblptrl	equ	0xFF6
  3110                           tablat	equ	0xFF5
  3111                           prodh	equ	0xFF4
  3112                           prodl	equ	0xFF3
  3113                           postinc0	equ	0xFEE
  3114                           wreg	equ	0xFE8
  3115                           indf2	equ	0xFDF
  3116                           postinc2	equ	0xFDE
  3117                           postdec2	equ	0xFDD
  3118                           fsr2h	equ	0xFDA
  3119                           fsr2l	equ	0xFD9
  3120                           status	equ	0xFD8
  3121                           
  3122 ;; *************** function ___wmul *****************
  3123 ;; Defined at:
  3124 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;  multiplier      2   34[COMRAM] unsigned int 
  3127 ;;  multiplicand    2   36[COMRAM] unsigned int 
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;  product         2   38[COMRAM] unsigned int 
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  2   34[COMRAM] unsigned int 
  3132 ;; Registers used:
  3133 ;;		wreg, status,2, status,0, prodl, prodh
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3139 ;;      Params:         4       0       0       0
  3140 ;;      Locals:         2       0       0       0
  3141 ;;      Temps:          0       0       0       0
  3142 ;;      Totals:         6       0       0       0
  3143 ;;Total ram usage:        6 bytes
  3144 ;; Hardware stack levels used:    1
  3145 ;; Hardware stack levels required when called:    4
  3146 ;; This function calls:
  3147 ;;		Nothing
  3148 ;; This function is called by:
  3149 ;;		_setMotorPWM
  3150 ;;		i2_setMotorPWM
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           	psect	text14
  3155  001374                     __ptext14:
  3156                           	opt stack 0
  3157  001374                     ___wmul:
  3158                           	opt stack 24
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;incstack = 0
  3162  001374  5023               	movf	___wmul@multiplier,w,c
  3163  001376  0225               	mulwf	___wmul@multiplicand,c
  3164  001378  CFF3 F027          	movff	prodl,___wmul@product
  3165  00137C  CFF4 F028          	movff	prodh,___wmul@product+1
  3166  001380  5023               	movf	___wmul@multiplier,w,c
  3167  001382  0226               	mulwf	___wmul@multiplicand+1,c
  3168  001384  50F3               	movf	prodl,w,c
  3169  001386  2628               	addwf	___wmul@product+1,f,c
  3170  001388  5024               	movf	___wmul@multiplier+1,w,c
  3171  00138A  0225               	mulwf	___wmul@multiplicand,c
  3172  00138C  50F3               	movf	prodl,w,c
  3173  00138E  2628               	addwf	___wmul@product+1,f,c
  3174  001390  C027  F023         	movff	___wmul@product,?___wmul
  3175  001394  C028  F024         	movff	___wmul@product+1,?___wmul+1
  3176  001398  0012               	return	
  3177  00139A                     __end_of___wmul:
  3178                           	opt stack 0
  3179                           tblptru	equ	0xFF8
  3180                           tblptrh	equ	0xFF7
  3181                           tblptrl	equ	0xFF6
  3182                           tablat	equ	0xFF5
  3183                           prodh	equ	0xFF4
  3184                           prodl	equ	0xFF3
  3185                           postinc0	equ	0xFEE
  3186                           wreg	equ	0xFE8
  3187                           indf2	equ	0xFDF
  3188                           postinc2	equ	0xFDE
  3189                           postdec2	equ	0xFDD
  3190                           fsr2h	equ	0xFDA
  3191                           fsr2l	equ	0xFD9
  3192                           status	equ	0xFD8
  3193                           
  3194 ;; *************** function ___awdiv *****************
  3195 ;; Defined at:
  3196 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awdiv.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;  dividend        2    0[BANK0 ] int 
  3199 ;;  divisor         2    2[BANK0 ] int 
  3200 ;; Auto vars:     Size  Location     Type
  3201 ;;  quotient        2    6[BANK0 ] int 
  3202 ;;  sign            1    5[BANK0 ] unsigned char 
  3203 ;;  counter         1    4[BANK0 ] unsigned char 
  3204 ;; Return value:  Size  Location     Type
  3205 ;;                  2    0[BANK0 ] int 
  3206 ;; Registers used:
  3207 ;;		wreg, status,2, status,0
  3208 ;; Tracked objects:
  3209 ;;		On entry : 0/0
  3210 ;;		On exit  : 0/0
  3211 ;;		Unchanged: 0/0
  3212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3213 ;;      Params:         0       4       0       0
  3214 ;;      Locals:         0       4       0       0
  3215 ;;      Temps:          0       0       0       0
  3216 ;;      Totals:         0       8       0       0
  3217 ;;Total ram usage:        8 bytes
  3218 ;; Hardware stack levels used:    1
  3219 ;; Hardware stack levels required when called:    4
  3220 ;; This function calls:
  3221 ;;		Nothing
  3222 ;; This function is called by:
  3223 ;;		_setMotorPWM
  3224 ;;		i2_setMotorPWM
  3225 ;; This function uses a non-reentrant model
  3226 ;;
  3227                           
  3228                           	psect	text15
  3229  000E0E                     __ptext15:
  3230                           	opt stack 0
  3231  000E0E                     ___awdiv:
  3232                           	opt stack 24
  3233                           
  3234                           ;incstack = 0
  3235  000E0E  0E00               	movlw	0
  3236  000E10  0100               	movlb	0	; () banked
  3237  000E12  6FCC               	movwf	___awdiv@sign& (0+255),b
  3238                           
  3239                           ; BSR set to: 0
  3240  000E14  AFCA               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3241  000E16  D006               	goto	l539
  3242                           
  3243                           ; BSR set to: 0
  3244  000E18  6DC9               	negf	___awdiv@divisor& (0+255),b
  3245  000E1A  1FCA               	comf	(___awdiv@divisor+1)& (0+255),f,b
  3246  000E1C  B0D8               	btfsc	status,0,c
  3247  000E1E  2BCA               	incf	(___awdiv@divisor+1)& (0+255),f,b
  3248                           
  3249                           ; BSR set to: 0
  3250  000E20  0E01               	movlw	1
  3251  000E22  6FCC               	movwf	___awdiv@sign& (0+255),b
  3252  000E24                     l539:
  3253                           
  3254                           ; BSR set to: 0
  3255                           
  3256                           ; BSR set to: 0
  3257  000E24  AFC8               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  3258  000E26  D006               	goto	l540
  3259                           
  3260                           ; BSR set to: 0
  3261  000E28  6DC7               	negf	___awdiv@dividend& (0+255),b
  3262  000E2A  1FC8               	comf	(___awdiv@dividend+1)& (0+255),f,b
  3263  000E2C  B0D8               	btfsc	status,0,c
  3264  000E2E  2BC8               	incf	(___awdiv@dividend+1)& (0+255),f,b
  3265                           
  3266                           ; BSR set to: 0
  3267  000E30  0E01               	movlw	1
  3268  000E32  1BCC               	xorwf	___awdiv@sign& (0+255),f,b
  3269  000E34                     l540:
  3270                           
  3271                           ; BSR set to: 0
  3272                           
  3273                           ; BSR set to: 0
  3274  000E34  0E00               	movlw	0
  3275  000E36  6FCE               	movwf	(___awdiv@quotient+1)& (0+255),b
  3276  000E38  0E00               	movlw	0
  3277  000E3A  6FCD               	movwf	___awdiv@quotient& (0+255),b
  3278                           
  3279                           ; BSR set to: 0
  3280  000E3C  51C9               	movf	___awdiv@divisor& (0+255),w,b
  3281  000E3E  11CA               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  3282  000E40  B4D8               	btfsc	status,2,c
  3283  000E42  D01C               	goto	l547
  3284                           
  3285                           ; BSR set to: 0
  3286  000E44  0E01               	movlw	1
  3287  000E46  6FCB               	movwf	___awdiv@counter& (0+255),b
  3288  000E48  D004               	goto	l542
  3289  000E4A                     
  3290                           ; BSR set to: 0
  3291                           
  3292                           ; BSR set to: 0
  3293  000E4A  90D8               	bcf	status,0,c
  3294  000E4C  37C9               	rlcf	___awdiv@divisor& (0+255),f,b
  3295  000E4E  37CA               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  3296  000E50  2BCB               	incf	___awdiv@counter& (0+255),f,b
  3297  000E52                     l542:
  3298                           
  3299                           ; BSR set to: 0
  3300                           
  3301                           ; BSR set to: 0
  3302  000E52  AFCA               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3303  000E54  D7FA               	goto	l543
  3304  000E56                     u1300:
  3305                           
  3306                           ; BSR set to: 0
  3307                           
  3308                           ; BSR set to: 0
  3309                           
  3310                           ; BSR set to: 0
  3311  000E56  90D8               	bcf	status,0,c
  3312  000E58  37CD               	rlcf	___awdiv@quotient& (0+255),f,b
  3313  000E5A  37CE               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  3314                           
  3315                           ; BSR set to: 0
  3316  000E5C  51C9               	movf	___awdiv@divisor& (0+255),w,b
  3317  000E5E  5DC7               	subwf	___awdiv@dividend& (0+255),w,b
  3318  000E60  51CA               	movf	(___awdiv@divisor+1)& (0+255),w,b
  3319  000E62  59C8               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  3320  000E64  A0D8               	btfss	status,0,c
  3321  000E66  D005               	goto	l546
  3322                           
  3323                           ; BSR set to: 0
  3324  000E68  51C9               	movf	___awdiv@divisor& (0+255),w,b
  3325  000E6A  5FC7               	subwf	___awdiv@dividend& (0+255),f,b
  3326  000E6C  51CA               	movf	(___awdiv@divisor+1)& (0+255),w,b
  3327  000E6E  5BC8               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  3328                           
  3329                           ; BSR set to: 0
  3330  000E70  81CD               	bsf	___awdiv@quotient& (0+255),0,b
  3331  000E72                     l546:
  3332                           
  3333                           ; BSR set to: 0
  3334                           
  3335                           ; BSR set to: 0
  3336  000E72  90D8               	bcf	status,0,c
  3337  000E74  33CA               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  3338  000E76  33C9               	rrcf	___awdiv@divisor& (0+255),f,b
  3339                           
  3340                           ; BSR set to: 0
  3341  000E78  2FCB               	decfsz	___awdiv@counter& (0+255),f,b
  3342  000E7A  D7ED               	goto	u1300
  3343  000E7C                     l547:
  3344                           
  3345                           ; BSR set to: 0
  3346                           
  3347                           ; BSR set to: 0
  3348                           
  3349                           ; BSR set to: 0
  3350  000E7C  51CC               	movf	___awdiv@sign& (0+255),w,b
  3351  000E7E  B4D8               	btfsc	status,2,c
  3352  000E80  D004               	goto	l548
  3353                           
  3354                           ; BSR set to: 0
  3355  000E82  6DCD               	negf	___awdiv@quotient& (0+255),b
  3356  000E84  1FCE               	comf	(___awdiv@quotient+1)& (0+255),f,b
  3357  000E86  B0D8               	btfsc	status,0,c
  3358  000E88  2BCE               	incf	(___awdiv@quotient+1)& (0+255),f,b
  3359  000E8A                     l548:
  3360                           
  3361                           ; BSR set to: 0
  3362                           
  3363                           ; BSR set to: 0
  3364  000E8A  C0CD  F0C7         	movff	___awdiv@quotient,?___awdiv
  3365  000E8E  C0CE  F0C8         	movff	___awdiv@quotient+1,?___awdiv+1
  3366  000E92  0012               	return	
  3367  000E94                     __end_of___awdiv:
  3368                           	opt stack 0
  3369                           tblptru	equ	0xFF8
  3370                           tblptrh	equ	0xFF7
  3371                           tblptrl	equ	0xFF6
  3372                           tablat	equ	0xFF5
  3373                           prodh	equ	0xFF4
  3374                           prodl	equ	0xFF3
  3375                           postinc0	equ	0xFEE
  3376                           wreg	equ	0xFE8
  3377                           indf2	equ	0xFDF
  3378                           postinc2	equ	0xFDE
  3379                           postdec2	equ	0xFDD
  3380                           fsr2h	equ	0xFDA
  3381                           fsr2l	equ	0xFD9
  3382                           status	equ	0xFD8
  3383                           
  3384 ;; *************** function _SetLine *****************
  3385 ;; Defined at:
  3386 ;;		line 99 in file "LDCScreen.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;  line            1    wreg     unsigned char 
  3389 ;; Auto vars:     Size  Location     Type
  3390 ;;  line            1   40[COMRAM] unsigned char 
  3391 ;; Return value:  Size  Location     Type
  3392 ;;                  1    wreg      void 
  3393 ;; Registers used:
  3394 ;;		wreg, status,2, status,0, cstack
  3395 ;; Tracked objects:
  3396 ;;		On entry : 0/0
  3397 ;;		On exit  : 0/0
  3398 ;;		Unchanged: 0/0
  3399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3400 ;;      Params:         0       0       0       0
  3401 ;;      Locals:         1       0       0       0
  3402 ;;      Temps:          0       0       0       0
  3403 ;;      Totals:         1       0       0       0
  3404 ;;Total ram usage:        1 bytes
  3405 ;; Hardware stack levels used:    1
  3406 ;; Hardware stack levels required when called:    7
  3407 ;; This function calls:
  3408 ;;		_SendLCD
  3409 ;; This function is called by:
  3410 ;;		_main
  3411 ;;		_IRScreen
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           	psect	text16
  3416  001228                     __ptext16:
  3417                           	opt stack 0
  3418  001228                     _SetLine:
  3419                           	opt stack 23
  3420                           
  3421                           ; BSR set to: 0
  3422                           ;incstack = 0
  3423                           ;SetLine@line stored from wreg
  3424  001228  6E29               	movwf	SetLine@line,c
  3425                           
  3426                           ;LDCScreen.c: 101: if (line==1){
  3427  00122A  0429               	decf	SetLine@line,w,c
  3428  00122C  A4D8               	btfss	status,2,c
  3429  00122E  D005               	goto	l94
  3430                           
  3431                           ;LDCScreen.c: 102: SendLCD(0x80,0);
  3432  001230  0E00               	movlw	0
  3433  001232  6E27               	movwf	SendLCD@type,c
  3434  001234  0E80               	movlw	128
  3435  001236  EC7F  F009         	call	_SendLCD
  3436  00123A                     l94:
  3437                           
  3438                           ;LDCScreen.c: 103: };LDCScreen.c: 105: if (line==2){
  3439  00123A  0E02               	movlw	2
  3440  00123C  1829               	xorwf	SetLine@line,w,c
  3441  00123E  A4D8               	btfss	status,2,c
  3442  001240  D005               	goto	l95
  3443                           
  3444                           ;LDCScreen.c: 106: SendLCD(0xC0,0);
  3445  001242  0E00               	movlw	0
  3446  001244  6E27               	movwf	SendLCD@type,c
  3447  001246  0EC0               	movlw	192
  3448  001248  EC7F  F009         	call	_SendLCD
  3449  00124C                     l95:
  3450                           
  3451                           ;LDCScreen.c: 107: };LDCScreen.c: 108: _delay((unsigned long)((50)*(8000000/4000000.0)))
      +                          ;
  3452  00124C  0E21               	movlw	33
  3453  00124E                     u1857:
  3454  00124E  2EE8               	decfsz	wreg,f,c
  3455  001250  D7FE               	bra	u1857
  3456  001252  F000               	nop	
  3457  001254  0012               	return		;funcret
  3458  001256                     __end_of_SetLine:
  3459                           	opt stack 0
  3460                           tblptru	equ	0xFF8
  3461                           tblptrh	equ	0xFF7
  3462                           tblptrl	equ	0xFF6
  3463                           tablat	equ	0xFF5
  3464                           prodh	equ	0xFF4
  3465                           prodl	equ	0xFF3
  3466                           postinc0	equ	0xFEE
  3467                           wreg	equ	0xFE8
  3468                           indf2	equ	0xFDF
  3469                           postinc2	equ	0xFDE
  3470                           postdec2	equ	0xFDD
  3471                           fsr2h	equ	0xFDA
  3472                           fsr2l	equ	0xFD9
  3473                           status	equ	0xFD8
  3474                           
  3475 ;; *************** function _Motor_Init *****************
  3476 ;; Defined at:
  3477 ;;		line 44 in file "newFILE.c"
  3478 ;; Parameters:    Size  Location     Type
  3479 ;;		None
  3480 ;; Auto vars:     Size  Location     Type
  3481 ;;  PWMcycle        2   36[COMRAM] int 
  3482 ;; Return value:  Size  Location     Type
  3483 ;;                  1    wreg      void 
  3484 ;; Registers used:
  3485 ;;		wreg, status,2, status,0, cstack
  3486 ;; Tracked objects:
  3487 ;;		On entry : 0/0
  3488 ;;		On exit  : 0/0
  3489 ;;		Unchanged: 0/0
  3490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3491 ;;      Params:         0       0       0       0
  3492 ;;      Locals:         2       0       0       0
  3493 ;;      Temps:          0       0       0       0
  3494 ;;      Totals:         2       0       0       0
  3495 ;;Total ram usage:        2 bytes
  3496 ;; Hardware stack levels used:    1
  3497 ;; Hardware stack levels required when called:    5
  3498 ;; This function calls:
  3499 ;;		_initPWM
  3500 ;; This function is called by:
  3501 ;;		_main
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           	psect	text17
  3506  000FEC                     __ptext17:
  3507                           	opt stack 0
  3508  000FEC                     _Motor_Init:
  3509                           	opt stack 25
  3510                           
  3511                           ;newFILE.c: 45: int PWMcycle = 199;
  3512                           
  3513                           ;incstack = 0
  3514  000FEC  0E00               	movlw	0
  3515  000FEE  6E26               	movwf	Motor_Init@PWMcycle+1,c
  3516  000FF0  0EC7               	movlw	199
  3517  000FF2  6E25               	movwf	Motor_Init@PWMcycle,c
  3518                           
  3519                           ;newFILE.c: 46: initPWM();
  3520  000FF4  ECDB  F008         	call	_initPWM	;wreg free
  3521                           
  3522                           ;newFILE.c: 49: motorL.power=0;
  3523  000FF8  0E00               	movlw	0
  3524  000FFA  6E34               	movwf	_motorL,c
  3525                           
  3526                           ;newFILE.c: 50: motorL.direction=1;
  3527  000FFC  0E01               	movlw	1
  3528  000FFE  6E35               	movwf	_motorL+1,c
  3529                           
  3530                           ;newFILE.c: 51: motorL.dutyLowByte=(unsigned char*)(&PDC0L);
  3531  001000  0E79               	movlw	121
  3532  001002  6E36               	movwf	_motorL+2,c
  3533  001004  0E0F               	movlw	15
  3534  001006  6E37               	movwf	_motorL+3,c
  3535                           
  3536                           ;newFILE.c: 52: motorL.dutyHighByte=(unsigned char*)(&PDC0H);
  3537  001008  0E78               	movlw	120
  3538  00100A  6E38               	movwf	_motorL+4,c
  3539  00100C  0E0F               	movlw	15
  3540  00100E  6E39               	movwf	_motorL+5,c
  3541                           
  3542                           ;newFILE.c: 53: motorL.dir_pin=0;
  3543  001010  0E00               	movlw	0
  3544  001012  6E3A               	movwf	_motorL+6,c
  3545                           
  3546                           ;newFILE.c: 54: motorL.PWMperiod=PWMcycle;
  3547  001014  C025  F03B         	movff	Motor_Init@PWMcycle,_motorL+7
  3548  001018  C026  F03C         	movff	Motor_Init@PWMcycle+1,_motorL+8
  3549                           
  3550                           ;newFILE.c: 57: motorR.power=0;
  3551  00101C  0E00               	movlw	0
  3552  00101E  6E2B               	movwf	_motorR,c
  3553                           
  3554                           ;newFILE.c: 58: motorR.direction=1;
  3555  001020  0E01               	movlw	1
  3556  001022  6E2C               	movwf	_motorR+1,c
  3557                           
  3558                           ;newFILE.c: 59: motorR.dutyLowByte=(unsigned char*)(&PDC1L);
  3559  001024  0E77               	movlw	119
  3560  001026  6E2D               	movwf	_motorR+2,c
  3561  001028  0E0F               	movlw	15
  3562  00102A  6E2E               	movwf	_motorR+3,c
  3563                           
  3564                           ;newFILE.c: 60: motorR.dutyHighByte=(unsigned char*)(&PDC1H);
  3565  00102C  0E76               	movlw	118
  3566  00102E  6E2F               	movwf	_motorR+4,c
  3567  001030  0E0F               	movlw	15
  3568  001032  6E30               	movwf	_motorR+5,c
  3569                           
  3570                           ;newFILE.c: 61: motorR.dir_pin=2;
  3571  001034  0E02               	movlw	2
  3572  001036  6E31               	movwf	_motorR+6,c
  3573                           
  3574                           ;newFILE.c: 62: motorR.PWMperiod=PWMcycle;
  3575  001038  C025  F032         	movff	Motor_Init@PWMcycle,_motorR+7
  3576  00103C  C026  F033         	movff	Motor_Init@PWMcycle+1,_motorR+8
  3577  001040  0012               	return		;funcret
  3578  001042                     __end_of_Motor_Init:
  3579                           	opt stack 0
  3580                           tblptru	equ	0xFF8
  3581                           tblptrh	equ	0xFF7
  3582                           tblptrl	equ	0xFF6
  3583                           tablat	equ	0xFF5
  3584                           prodh	equ	0xFF4
  3585                           prodl	equ	0xFF3
  3586                           postinc0	equ	0xFEE
  3587                           wreg	equ	0xFE8
  3588                           indf2	equ	0xFDF
  3589                           postinc2	equ	0xFDE
  3590                           postdec2	equ	0xFDD
  3591                           fsr2h	equ	0xFDA
  3592                           fsr2l	equ	0xFD9
  3593                           status	equ	0xFD8
  3594                           
  3595 ;; *************** function _initPWM *****************
  3596 ;; Defined at:
  3597 ;;		line 3 in file "MotorControl.c"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;		None
  3600 ;; Auto vars:     Size  Location     Type
  3601 ;;  period          2   34[COMRAM] int 
  3602 ;; Return value:  Size  Location     Type
  3603 ;;                  1    wreg      void 
  3604 ;; Registers used:
  3605 ;;		wreg, status,2, status,0
  3606 ;; Tracked objects:
  3607 ;;		On entry : 0/0
  3608 ;;		On exit  : 0/0
  3609 ;;		Unchanged: 0/0
  3610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3611 ;;      Params:         0       0       0       0
  3612 ;;      Locals:         2       0       0       0
  3613 ;;      Temps:          0       0       0       0
  3614 ;;      Totals:         2       0       0       0
  3615 ;;Total ram usage:        2 bytes
  3616 ;; Hardware stack levels used:    1
  3617 ;; Hardware stack levels required when called:    4
  3618 ;; This function calls:
  3619 ;;		Nothing
  3620 ;; This function is called by:
  3621 ;;		_Motor_Init
  3622 ;; This function uses a non-reentrant model
  3623 ;;
  3624                           
  3625                           	psect	text18
  3626  0011B6                     __ptext18:
  3627                           	opt stack 0
  3628  0011B6                     _initPWM:
  3629                           	opt stack 25
  3630                           
  3631                           ;MotorControl.c: 7: TRISBbits.RB0=0;
  3632                           
  3633                           ;incstack = 0
  3634  0011B6  9093               	bcf	3987,0,c	;volatile
  3635                           
  3636                           ;MotorControl.c: 8: TRISBbits.RB1 = 0;
  3637  0011B8  9293               	bcf	3987,1,c	;volatile
  3638                           
  3639                           ;MotorControl.c: 9: TRISBbits.RB2 = 0;
  3640  0011BA  9493               	bcf	3987,2,c	;volatile
  3641                           
  3642                           ;MotorControl.c: 10: TRISBbits.RB3 = 0;
  3643  0011BC  9693               	bcf	3987,3,c	;volatile
  3644                           
  3645                           ;MotorControl.c: 11: PTCON0 = 0b00001100;
  3646  0011BE  0E0C               	movlw	12
  3647  0011C0  6E7F               	movwf	3967,c	;volatile
  3648                           
  3649                           ;MotorControl.c: 12: PTCON1 = 0b10000000;
  3650  0011C2  0E80               	movlw	128
  3651  0011C4  6E7E               	movwf	3966,c	;volatile
  3652                           
  3653                           ;MotorControl.c: 13: PWMCON0 = 0b01101111;
  3654  0011C6  0E6F               	movlw	111
  3655  0011C8  6E6F               	movwf	3951,c	;volatile
  3656                           
  3657                           ;MotorControl.c: 14: PWMCON1 = 0x00;
  3658  0011CA  0E00               	movlw	0
  3659  0011CC  6E6E               	movwf	3950,c	;volatile
  3660                           
  3661                           ;MotorControl.c: 15: PTPERL = 0b11000111;
  3662  0011CE  0EC7               	movlw	199
  3663  0011D0  6E7B               	movwf	3963,c	;volatile
  3664                           
  3665                           ;MotorControl.c: 16: PTPERH = 0b00000000;
  3666  0011D2  0E00               	movlw	0
  3667  0011D4  6E7A               	movwf	3962,c	;volatile
  3668                           
  3669                           ;MotorControl.c: 21: int period=99;
  3670  0011D6  0E00               	movlw	0
  3671  0011D8  6E24               	movwf	initPWM@period+1,c
  3672  0011DA  0E63               	movlw	99
  3673  0011DC  6E23               	movwf	initPWM@period,c
  3674                           
  3675                           ;MotorControl.c: 23: PDC0L = (period<<2);
  3676  0011DE  4423               	rlncf	initPWM@period,w,c
  3677  0011E0  46E8               	rlncf	wreg,f,c
  3678  0011E2  0BFC               	andlw	252
  3679  0011E4  6E79               	movwf	3961,c	;volatile
  3680                           
  3681                           ;MotorControl.c: 24: PDC0H = (0b00000000>>6);
  3682  0011E6  0E00               	movlw	0
  3683  0011E8  6E78               	movwf	3960,c	;volatile
  3684                           
  3685                           ;MotorControl.c: 27: PDC1L = (period<<2);
  3686  0011EA  4423               	rlncf	initPWM@period,w,c
  3687  0011EC  46E8               	rlncf	wreg,f,c
  3688  0011EE  0BFC               	andlw	252
  3689  0011F0  6E77               	movwf	3959,c	;volatile
  3690                           
  3691                           ;MotorControl.c: 28: PDC1H = (0b00000000>>6);
  3692  0011F2  0E00               	movlw	0
  3693  0011F4  6E76               	movwf	3958,c	;volatile
  3694  0011F6  0012               	return		;funcret
  3695  0011F8                     __end_of_initPWM:
  3696                           	opt stack 0
  3697                           tblptru	equ	0xFF8
  3698                           tblptrh	equ	0xFF7
  3699                           tblptrl	equ	0xFF6
  3700                           tablat	equ	0xFF5
  3701                           prodh	equ	0xFF4
  3702                           prodl	equ	0xFF3
  3703                           postinc0	equ	0xFEE
  3704                           wreg	equ	0xFE8
  3705                           indf2	equ	0xFDF
  3706                           postinc2	equ	0xFDE
  3707                           postdec2	equ	0xFDD
  3708                           fsr2h	equ	0xFDA
  3709                           fsr2l	equ	0xFD9
  3710                           status	equ	0xFD8
  3711                           
  3712 ;; *************** function _LCD_String *****************
  3713 ;; Defined at:
  3714 ;;		line 112 in file "LDCScreen.c"
  3715 ;; Parameters:    Size  Location     Type
  3716 ;;  string          2   40[COMRAM] PTR unsigned char 
  3717 ;;		 -> main@buf(16), IRScreen2@buf(16), IRScreen@buf(16), 
  3718 ;; Auto vars:     Size  Location     Type
  3719 ;;		None
  3720 ;; Return value:  Size  Location     Type
  3721 ;;                  1    wreg      void 
  3722 ;; Registers used:
  3723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3724 ;; Tracked objects:
  3725 ;;		On entry : 0/0
  3726 ;;		On exit  : 0/0
  3727 ;;		Unchanged: 0/0
  3728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3729 ;;      Params:         2       0       0       0
  3730 ;;      Locals:         0       0       0       0
  3731 ;;      Temps:          0       0       0       0
  3732 ;;      Totals:         2       0       0       0
  3733 ;;Total ram usage:        2 bytes
  3734 ;; Hardware stack levels used:    1
  3735 ;; Hardware stack levels required when called:    7
  3736 ;; This function calls:
  3737 ;;		_SendLCD
  3738 ;; This function is called by:
  3739 ;;		_main
  3740 ;;		_IRScreen
  3741 ;;		_IRScreen2
  3742 ;; This function uses a non-reentrant model
  3743 ;;
  3744                           
  3745                           	psect	text19
  3746  0011F8                     __ptext19:
  3747                           	opt stack 0
  3748  0011F8                     _LCD_String:
  3749                           	opt stack 23
  3750                           
  3751                           ;LDCScreen.c: 114: while(*string != 0){
  3752                           
  3753                           ;incstack = 0
  3754  0011F8  D00F               	goto	l99
  3755  0011FA                     
  3756                           ;LDCScreen.c: 117: SendLCD(*string++,1);
  3757  0011FA  0E01               	movlw	1
  3758  0011FC  6E27               	movwf	SendLCD@type,c
  3759  0011FE  C029  FFD9         	movff	LCD_String@string,fsr2l
  3760  001202  C02A  FFDA         	movff	LCD_String@string+1,fsr2h
  3761  001206  50DF               	movf	indf2,w,c
  3762  001208  EC7F  F009         	call	_SendLCD
  3763  00120C  4A29               	infsnz	LCD_String@string,f,c
  3764  00120E  2A2A               	incf	LCD_String@string+1,f,c
  3765                           
  3766                           ;LDCScreen.c: 118: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3767  001210  0E21               	movlw	33
  3768  001212                     u1867:
  3769  001212  2EE8               	decfsz	wreg,f,c
  3770  001214  D7FE               	bra	u1867
  3771  001216  F000               	nop	
  3772  001218                     l99:
  3773  001218  C029  FFD9         	movff	LCD_String@string,fsr2l
  3774  00121C  C02A  FFDA         	movff	LCD_String@string+1,fsr2h
  3775  001220  50DF               	movf	indf2,w,c
  3776  001222  B4D8               	btfsc	status,2,c
  3777  001224  0012               	return	
  3778  001226  D7E9               	goto	l100
  3779  001228                     __end_of_LCD_String:
  3780                           	opt stack 0
  3781                           tblptru	equ	0xFF8
  3782                           tblptrh	equ	0xFF7
  3783                           tblptrl	equ	0xFF6
  3784                           tablat	equ	0xFF5
  3785                           prodh	equ	0xFF4
  3786                           prodl	equ	0xFF3
  3787                           postinc0	equ	0xFEE
  3788                           wreg	equ	0xFE8
  3789                           indf2	equ	0xFDF
  3790                           postinc2	equ	0xFDE
  3791                           postdec2	equ	0xFDD
  3792                           fsr2h	equ	0xFDA
  3793                           fsr2l	equ	0xFD9
  3794                           status	equ	0xFD8
  3795                           
  3796 ;; *************** function _LCD_Init *****************
  3797 ;; Defined at:
  3798 ;;		line 56 in file "LDCScreen.c"
  3799 ;; Parameters:    Size  Location     Type
  3800 ;;		None
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;		None
  3803 ;; Return value:  Size  Location     Type
  3804 ;;                  1    wreg      void 
  3805 ;; Registers used:
  3806 ;;		wreg, status,2, status,0, cstack
  3807 ;; Tracked objects:
  3808 ;;		On entry : 0/0
  3809 ;;		On exit  : 0/0
  3810 ;;		Unchanged: 0/0
  3811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3812 ;;      Params:         0       0       0       0
  3813 ;;      Locals:         0       0       0       0
  3814 ;;      Temps:          1       0       0       0
  3815 ;;      Totals:         1       0       0       0
  3816 ;;Total ram usage:        1 bytes
  3817 ;; Hardware stack levels used:    1
  3818 ;; Hardware stack levels required when called:    7
  3819 ;; This function calls:
  3820 ;;		_LCDout
  3821 ;;		_SendLCD
  3822 ;; This function is called by:
  3823 ;;		_main
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           	psect	text20
  3828  000D58                     __ptext20:
  3829                           	opt stack 0
  3830  000D58                     _LCD_Init:
  3831                           	opt stack 23
  3832                           
  3833                           ;LDCScreen.c: 58: LATC=0;
  3834                           
  3835                           ;incstack = 0
  3836  000D58  0E00               	movlw	0
  3837  000D5A  6E8B               	movwf	3979,c	;volatile
  3838                           
  3839                           ;LDCScreen.c: 59: LATA=0;
  3840  000D5C  0E00               	movlw	0
  3841  000D5E  6E89               	movwf	3977,c	;volatile
  3842                           
  3843                           ;LDCScreen.c: 60: LATD=0;
  3844  000D60  0E00               	movlw	0
  3845  000D62  6E8C               	movwf	3980,c	;volatile
  3846                           
  3847                           ;LDCScreen.c: 62: TRISC= 0;
  3848  000D64  0E00               	movlw	0
  3849  000D66  6E94               	movwf	3988,c	;volatile
  3850                           
  3851                           ;LDCScreen.c: 63: TRISD= 0;
  3852  000D68  0E00               	movlw	0
  3853  000D6A  6E95               	movwf	3989,c	;volatile
  3854                           
  3855                           ;LDCScreen.c: 64: TRISA= 0;
  3856  000D6C  0E00               	movlw	0
  3857  000D6E  6E92               	movwf	3986,c	;volatile
  3858                           
  3859                           ;LDCScreen.c: 69: _delay((unsigned long)((15)*(8000000/4000000.0)));
  3860  000D70  0E0A               	movlw	10
  3861  000D72                     u1877:
  3862  000D72  2EE8               	decfsz	wreg,f,c
  3863  000D74  D7FE               	bra	u1877
  3864                           
  3865                           ;LDCScreen.c: 71: LCDout(0b0011);
  3866  000D76  0E03               	movlw	3
  3867  000D78  EC4A  F008         	call	_LCDout
  3868                           
  3869                           ;LDCScreen.c: 73: _delay((unsigned long)((5)*(8000000/4000.0)));
  3870  000D7C  0E0D               	movlw	13
  3871  000D7E  6E29               	movwf	??_LCD_Init& (0+255),c
  3872  000D80  0EFC               	movlw	252
  3873  000D82                     u1887:
  3874  000D82  2EE8               	decfsz	wreg,f,c
  3875  000D84  D7FE               	bra	u1887
  3876  000D86  2E29               	decfsz	??_LCD_Init& (0+255),f,c
  3877  000D88  D7FC               	bra	u1887
  3878                           
  3879                           ;LDCScreen.c: 75: LCDout(0b0011);
  3880  000D8A  0E03               	movlw	3
  3881  000D8C  EC4A  F008         	call	_LCDout
  3882                           
  3883                           ;LDCScreen.c: 77: _delay((unsigned long)((200)*(8000000/4000000.0)));
  3884  000D90  0E85               	movlw	133
  3885  000D92                     u1897:
  3886  000D92  2EE8               	decfsz	wreg,f,c
  3887  000D94  D7FE               	bra	u1897
  3888  000D96  F000               	nop	
  3889                           
  3890                           ;LDCScreen.c: 79: LCDout(0b0011);
  3891  000D98  0E03               	movlw	3
  3892  000D9A  EC4A  F008         	call	_LCDout
  3893                           
  3894                           ;LDCScreen.c: 81: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3895  000D9E  0E21               	movlw	33
  3896  000DA0                     u1907:
  3897  000DA0  2EE8               	decfsz	wreg,f,c
  3898  000DA2  D7FE               	bra	u1907
  3899  000DA4  F000               	nop	
  3900                           
  3901                           ;LDCScreen.c: 83: LCDout(0b0010);
  3902  000DA6  0E02               	movlw	2
  3903  000DA8  EC4A  F008         	call	_LCDout
  3904                           
  3905                           ;LDCScreen.c: 85: SendLCD(0b00101000,0);
  3906  000DAC  0E00               	movlw	0
  3907  000DAE  6E27               	movwf	SendLCD@type,c
  3908  000DB0  0E28               	movlw	40
  3909  000DB2  EC7F  F009         	call	_SendLCD
  3910                           
  3911                           ;LDCScreen.c: 86: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3912  000DB6  0E21               	movlw	33
  3913  000DB8                     u1917:
  3914  000DB8  2EE8               	decfsz	wreg,f,c
  3915  000DBA  D7FE               	bra	u1917
  3916  000DBC  F000               	nop	
  3917                           
  3918                           ;LDCScreen.c: 87: SendLCD(0b00001000,0);
  3919  000DBE  0E00               	movlw	0
  3920  000DC0  6E27               	movwf	SendLCD@type,c
  3921  000DC2  0E08               	movlw	8
  3922  000DC4  EC7F  F009         	call	_SendLCD
  3923                           
  3924                           ;LDCScreen.c: 88: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3925  000DC8  0E21               	movlw	33
  3926  000DCA                     u1927:
  3927  000DCA  2EE8               	decfsz	wreg,f,c
  3928  000DCC  D7FE               	bra	u1927
  3929  000DCE  F000               	nop	
  3930                           
  3931                           ;LDCScreen.c: 89: SendLCD(0b00000001,0);
  3932  000DD0  0E00               	movlw	0
  3933  000DD2  6E27               	movwf	SendLCD@type,c
  3934  000DD4  0E01               	movlw	1
  3935  000DD6  EC7F  F009         	call	_SendLCD
  3936                           
  3937                           ;LDCScreen.c: 90: _delay((unsigned long)((5)*(8000000/4000.0)));
  3938  000DDA  0E0D               	movlw	13
  3939  000DDC  6E29               	movwf	??_LCD_Init& (0+255),c
  3940  000DDE  0EFC               	movlw	252
  3941  000DE0                     u1937:
  3942  000DE0  2EE8               	decfsz	wreg,f,c
  3943  000DE2  D7FE               	bra	u1937
  3944  000DE4  2E29               	decfsz	??_LCD_Init& (0+255),f,c
  3945  000DE6  D7FC               	bra	u1937
  3946                           
  3947                           ;LDCScreen.c: 91: SendLCD(0b00000110,0);
  3948  000DE8  0E00               	movlw	0
  3949  000DEA  6E27               	movwf	SendLCD@type,c
  3950  000DEC  0E06               	movlw	6
  3951  000DEE  EC7F  F009         	call	_SendLCD
  3952                           
  3953                           ;LDCScreen.c: 92: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3954  000DF2  0E21               	movlw	33
  3955  000DF4                     u1947:
  3956  000DF4  2EE8               	decfsz	wreg,f,c
  3957  000DF6  D7FE               	bra	u1947
  3958  000DF8  F000               	nop	
  3959                           
  3960                           ;LDCScreen.c: 93: SendLCD (0b00001110, 0);
  3961  000DFA  0E00               	movlw	0
  3962  000DFC  6E27               	movwf	SendLCD@type,c
  3963  000DFE  0E0E               	movlw	14
  3964  000E00  EC7F  F009         	call	_SendLCD
  3965                           
  3966                           ;LDCScreen.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3967  000E04  0E21               	movlw	33
  3968  000E06                     u1957:
  3969  000E06  2EE8               	decfsz	wreg,f,c
  3970  000E08  D7FE               	bra	u1957
  3971  000E0A  F000               	nop	
  3972  000E0C  0012               	return		;funcret
  3973  000E0E                     __end_of_LCD_Init:
  3974                           	opt stack 0
  3975                           tblptru	equ	0xFF8
  3976                           tblptrh	equ	0xFF7
  3977                           tblptrl	equ	0xFF6
  3978                           tablat	equ	0xFF5
  3979                           prodh	equ	0xFF4
  3980                           prodl	equ	0xFF3
  3981                           postinc0	equ	0xFEE
  3982                           wreg	equ	0xFE8
  3983                           indf2	equ	0xFDF
  3984                           postinc2	equ	0xFDE
  3985                           postdec2	equ	0xFDD
  3986                           fsr2h	equ	0xFDA
  3987                           fsr2l	equ	0xFD9
  3988                           status	equ	0xFD8
  3989                           
  3990 ;; *************** function _SendLCD *****************
  3991 ;; Defined at:
  3992 ;;		line 43 in file "LDCScreen.c"
  3993 ;; Parameters:    Size  Location     Type
  3994 ;;  Byte            1    wreg     unsigned char 
  3995 ;;  type            1   38[COMRAM] unsigned char 
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;  Byte            1   39[COMRAM] unsigned char 
  3998 ;; Return value:  Size  Location     Type
  3999 ;;                  1    wreg      void 
  4000 ;; Registers used:
  4001 ;;		wreg, status,2, status,0, cstack
  4002 ;; Tracked objects:
  4003 ;;		On entry : 0/0
  4004 ;;		On exit  : 0/0
  4005 ;;		Unchanged: 0/0
  4006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4007 ;;      Params:         1       0       0       0
  4008 ;;      Locals:         1       0       0       0
  4009 ;;      Temps:          0       0       0       0
  4010 ;;      Totals:         2       0       0       0
  4011 ;;Total ram usage:        2 bytes
  4012 ;; Hardware stack levels used:    1
  4013 ;; Hardware stack levels required when called:    6
  4014 ;; This function calls:
  4015 ;;		_LCDout
  4016 ;; This function is called by:
  4017 ;;		_LCD_Init
  4018 ;;		_SetLine
  4019 ;;		_LCD_String
  4020 ;;		_main
  4021 ;;		_IRScreen
  4022 ;;		_IRScreen2
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           	psect	text21
  4027  0012FE                     __ptext21:
  4028                           	opt stack 0
  4029  0012FE                     _SendLCD:
  4030                           	opt stack 23
  4031                           
  4032                           ;incstack = 0
  4033                           ;SendLCD@Byte stored from wreg
  4034  0012FE  6E28               	movwf	SendLCD@Byte,c
  4035                           
  4036                           ;LDCScreen.c: 47: LATAbits.LATA6 =type;
  4037  001300  B027               	btfsc	SendLCD@type,0,c
  4038  001302  D002               	bra	u805
  4039  001304  9C89               	bcf	3977,6,c	;volatile
  4040  001306  D001               	bra	u806
  4041  001308                     u805:
  4042  001308  8C89               	bsf	3977,6,c	;volatile
  4043  00130A                     u806:
  4044                           
  4045                           ;LDCScreen.c: 49: LCDout((Byte&0b11110000)>>4);
  4046  00130A  3828               	swapf	SendLCD@Byte,w,c
  4047  00130C  0B0F               	andlw	15
  4048  00130E  0B0F               	andlw	15
  4049  001310  EC4A  F008         	call	_LCDout
  4050                           
  4051                           ;LDCScreen.c: 52: LCDout(Byte&0b00001111);
  4052  001314  5028               	movf	SendLCD@Byte,w,c
  4053  001316  0B0F               	andlw	15
  4054  001318  EC4A  F008         	call	_LCDout
  4055                           
  4056                           ;LDCScreen.c: 53: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4057  00131C  0E21               	movlw	33
  4058  00131E                     u1967:
  4059  00131E  2EE8               	decfsz	wreg,f,c
  4060  001320  D7FE               	bra	u1967
  4061  001322  F000               	nop	
  4062  001324  0012               	return		;funcret
  4063  001326                     __end_of_SendLCD:
  4064                           	opt stack 0
  4065                           tblptru	equ	0xFF8
  4066                           tblptrh	equ	0xFF7
  4067                           tblptrl	equ	0xFF6
  4068                           tablat	equ	0xFF5
  4069                           prodh	equ	0xFF4
  4070                           prodl	equ	0xFF3
  4071                           postinc0	equ	0xFEE
  4072                           wreg	equ	0xFE8
  4073                           indf2	equ	0xFDF
  4074                           postinc2	equ	0xFDE
  4075                           postdec2	equ	0xFDD
  4076                           fsr2h	equ	0xFDA
  4077                           fsr2l	equ	0xFD9
  4078                           status	equ	0xFD8
  4079                           
  4080 ;; *************** function _LCDout *****************
  4081 ;; Defined at:
  4082 ;;		line 30 in file "LDCScreen.c"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;  number          1    wreg     unsigned char 
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;  number          1   37[COMRAM] unsigned char 
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  1    wreg      void 
  4089 ;; Registers used:
  4090 ;;		wreg, status,2, status,0, cstack
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4096 ;;      Params:         0       0       0       0
  4097 ;;      Locals:         1       0       0       0
  4098 ;;      Temps:          3       0       0       0
  4099 ;;      Totals:         4       0       0       0
  4100 ;;Total ram usage:        4 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; Hardware stack levels required when called:    5
  4103 ;; This function calls:
  4104 ;;		_E_TOG
  4105 ;; This function is called by:
  4106 ;;		_SendLCD
  4107 ;;		_LCD_Init
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111                           	psect	text22
  4112  001094                     __ptext22:
  4113                           	opt stack 0
  4114  001094                     _LCDout:
  4115                           	opt stack 23
  4116                           
  4117                           ;incstack = 0
  4118                           ;LCDout@number stored from wreg
  4119  001094  6E26               	movwf	LCDout@number,c
  4120                           
  4121                           ;LDCScreen.c: 33: LATD=((number&0b1100)>>2)|(LATD &0b11111100);
  4122  001096  CF8C F023          	movff	3980,??_LCDout	;volatile
  4123  00109A  0EFC               	movlw	252
  4124  00109C  1623               	andwf	??_LCDout,f,c
  4125  00109E  4026               	rrncf	LCDout@number,w,c
  4126  0010A0  42E8               	rrncf	wreg,f,c
  4127  0010A2  0B3F               	andlw	63
  4128  0010A4  0B03               	andlw	3
  4129  0010A6  1023               	iorwf	??_LCDout,w,c
  4130  0010A8  6E8C               	movwf	3980,c	;volatile
  4131                           
  4132                           ;LDCScreen.c: 34: LATC=(((number&0b0011)<<1)|(LATD &0b11111001))<<3;
  4133  0010AA  CF8C F023          	movff	3980,??_LCDout	;volatile
  4134  0010AE  0EF9               	movlw	249
  4135  0010B0  1623               	andwf	??_LCDout,f,c
  4136  0010B2  C026  F024         	movff	LCDout@number,??_LCDout+1
  4137  0010B6  0E03               	movlw	3
  4138  0010B8  1624               	andwf	??_LCDout+1,f,c
  4139  0010BA  90D8               	bcf	status,0,c
  4140  0010BC  3424               	rlcf	??_LCDout+1,w,c
  4141  0010BE  1023               	iorwf	??_LCDout,w,c
  4142  0010C0  6E25               	movwf	(??_LCDout+2)& (0+255),c
  4143  0010C2  90D8               	bcf	status,0,c
  4144  0010C4  3625               	rlcf	??_LCDout+2,f,c
  4145  0010C6  90D8               	bcf	status,0,c
  4146  0010C8  3625               	rlcf	??_LCDout+2,f,c
  4147  0010CA  90D8               	bcf	status,0,c
  4148  0010CC  3425               	rlcf	??_LCDout+2,w,c
  4149  0010CE  6E8B               	movwf	3979,c	;volatile
  4150                           
  4151                           ;LDCScreen.c: 39: E_TOG();
  4152  0010D0  EC2B  F00A         	call	_E_TOG	;wreg free
  4153                           
  4154                           ;LDCScreen.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4155  0010D4  0E03               	movlw	3
  4156  0010D6                     u1977:
  4157  0010D6  2EE8               	decfsz	wreg,f,c
  4158  0010D8  D7FE               	bra	u1977
  4159  0010DA  F000               	nop	
  4160  0010DC  0012               	return		;funcret
  4161  0010DE                     __end_of_LCDout:
  4162                           	opt stack 0
  4163                           tblptru	equ	0xFF8
  4164                           tblptrh	equ	0xFF7
  4165                           tblptrl	equ	0xFF6
  4166                           tablat	equ	0xFF5
  4167                           prodh	equ	0xFF4
  4168                           prodl	equ	0xFF3
  4169                           postinc0	equ	0xFEE
  4170                           wreg	equ	0xFE8
  4171                           indf2	equ	0xFDF
  4172                           postinc2	equ	0xFDE
  4173                           postdec2	equ	0xFDD
  4174                           fsr2h	equ	0xFDA
  4175                           fsr2l	equ	0xFD9
  4176                           status	equ	0xFD8
  4177                           
  4178 ;; *************** function _E_TOG *****************
  4179 ;; Defined at:
  4180 ;;		line 24 in file "LDCScreen.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;		None
  4183 ;; Auto vars:     Size  Location     Type
  4184 ;;		None
  4185 ;; Return value:  Size  Location     Type
  4186 ;;                  1    wreg      void 
  4187 ;; Registers used:
  4188 ;;		wreg
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4194 ;;      Params:         0       0       0       0
  4195 ;;      Locals:         0       0       0       0
  4196 ;;      Temps:          0       0       0       0
  4197 ;;      Totals:         0       0       0       0
  4198 ;;Total ram usage:        0 bytes
  4199 ;; Hardware stack levels used:    1
  4200 ;; Hardware stack levels required when called:    4
  4201 ;; This function calls:
  4202 ;;		Nothing
  4203 ;; This function is called by:
  4204 ;;		_LCDout
  4205 ;; This function uses a non-reentrant model
  4206 ;;
  4207                           
  4208                           	psect	text23
  4209  001456                     __ptext23:
  4210                           	opt stack 0
  4211  001456                     _E_TOG:
  4212                           	opt stack 23
  4213                           
  4214                           ;LDCScreen.c: 25: LATCbits.LATC0 = 1;
  4215                           
  4216                           ;incstack = 0
  4217  001456  808B               	bsf	3979,0,c	;volatile
  4218                           
  4219                           ;LDCScreen.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4220  001458  0E03               	movlw	3
  4221  00145A                     u1987:
  4222  00145A  2EE8               	decfsz	wreg,f,c
  4223  00145C  D7FE               	bra	u1987
  4224  00145E  F000               	nop	
  4225                           
  4226                           ;LDCScreen.c: 27: LATCbits.LATC0 = 0;
  4227  001460  908B               	bcf	3979,0,c	;volatile
  4228  001462  0012               	return		;funcret
  4229  001464                     __end_of_E_TOG:
  4230                           	opt stack 0
  4231                           tblptru	equ	0xFF8
  4232                           tblptrh	equ	0xFF7
  4233                           tblptrl	equ	0xFF6
  4234                           tablat	equ	0xFF5
  4235                           prodh	equ	0xFF4
  4236                           prodl	equ	0xFF3
  4237                           postinc0	equ	0xFEE
  4238                           wreg	equ	0xFE8
  4239                           indf2	equ	0xFDF
  4240                           postinc2	equ	0xFDE
  4241                           postdec2	equ	0xFDD
  4242                           fsr2h	equ	0xFDA
  4243                           fsr2l	equ	0xFD9
  4244                           status	equ	0xFD8
  4245                           
  4246 ;; *************** function _InterruptINIT *****************
  4247 ;; Defined at:
  4248 ;;		line 205 in file "newFILE.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;		None
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;		None
  4253 ;; Return value:  Size  Location     Type
  4254 ;;                  1    wreg      void 
  4255 ;; Registers used:
  4256 ;;		None
  4257 ;; Tracked objects:
  4258 ;;		On entry : 0/0
  4259 ;;		On exit  : 0/0
  4260 ;;		Unchanged: 0/0
  4261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4262 ;;      Params:         0       0       0       0
  4263 ;;      Locals:         0       0       0       0
  4264 ;;      Temps:          0       0       0       0
  4265 ;;      Totals:         0       0       0       0
  4266 ;;Total ram usage:        0 bytes
  4267 ;; Hardware stack levels used:    1
  4268 ;; Hardware stack levels required when called:    4
  4269 ;; This function calls:
  4270 ;;		Nothing
  4271 ;; This function is called by:
  4272 ;;		_main
  4273 ;; This function uses a non-reentrant model
  4274 ;;
  4275                           
  4276                           	psect	text24
  4277  001472                     __ptext24:
  4278                           	opt stack 0
  4279  001472                     _InterruptINIT:
  4280                           	opt stack 26
  4281                           
  4282                           ;newFILE.c: 207: RCONbits.IPEN=1;
  4283                           
  4284                           ;incstack = 0
  4285  001472  8ED0               	bsf	4048,7,c	;volatile
  4286                           
  4287                           ;newFILE.c: 208: INTCONbits.GIEH = 1;
  4288  001474  8EF2               	bsf	intcon,7,c	;volatile
  4289                           
  4290                           ;newFILE.c: 209: INTCONbits.GIEL = 1;
  4291  001476  8CF2               	bsf	intcon,6,c	;volatile
  4292                           
  4293                           ;newFILE.c: 210: PIE1bits.RCIE = 1;
  4294  001478  8A9D               	bsf	3997,5,c	;volatile
  4295  00147A  0012               	return		;funcret
  4296  00147C                     __end_of_InterruptINIT:
  4297                           	opt stack 0
  4298                           tblptru	equ	0xFF8
  4299                           tblptrh	equ	0xFF7
  4300                           tblptrl	equ	0xFF6
  4301                           tablat	equ	0xFF5
  4302                           prodh	equ	0xFF4
  4303                           prodl	equ	0xFF3
  4304                           intcon	equ	0xFF2
  4305                           postinc0	equ	0xFEE
  4306                           wreg	equ	0xFE8
  4307                           indf2	equ	0xFDF
  4308                           postinc2	equ	0xFDE
  4309                           postdec2	equ	0xFDD
  4310                           fsr2h	equ	0xFDA
  4311                           fsr2l	equ	0xFD9
  4312                           status	equ	0xFD8
  4313                           
  4314 ;; *************** function _Init *****************
  4315 ;; Defined at:
  4316 ;;		line 161 in file "newFILE.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;		None
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;		None
  4321 ;; Return value:  Size  Location     Type
  4322 ;;                  1    wreg      void 
  4323 ;; Registers used:
  4324 ;;		wreg, status,2
  4325 ;; Tracked objects:
  4326 ;;		On entry : 0/0
  4327 ;;		On exit  : 0/0
  4328 ;;		Unchanged: 0/0
  4329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4330 ;;      Params:         0       0       0       0
  4331 ;;      Locals:         0       0       0       0
  4332 ;;      Temps:          0       0       0       0
  4333 ;;      Totals:         0       0       0       0
  4334 ;;Total ram usage:        0 bytes
  4335 ;; Hardware stack levels used:    1
  4336 ;; Hardware stack levels required when called:    4
  4337 ;; This function calls:
  4338 ;;		Nothing
  4339 ;; This function is called by:
  4340 ;;		_main
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           	psect	text25
  4345  0013C0                     __ptext25:
  4346                           	opt stack 0
  4347  0013C0                     _Init:
  4348                           	opt stack 26
  4349                           
  4350                           ;newFILE.c: 162: LATC = 0;
  4351                           
  4352                           ;incstack = 0
  4353  0013C0  0E00               	movlw	0
  4354  0013C2  6E8B               	movwf	3979,c	;volatile
  4355                           
  4356                           ;newFILE.c: 163: TRISCbits.RC7 = 1;
  4357  0013C4  8E94               	bsf	3988,7,c	;volatile
  4358                           
  4359                           ;newFILE.c: 164: OSCCON = 0b11110010;
  4360  0013C6  0EF2               	movlw	242
  4361  0013C8  6ED3               	movwf	4051,c	;volatile
  4362  0013CA  A4D3               	btfss	4051,2,c	;volatile
  4363  0013CC  D7FE               	goto	l242
  4364                           
  4365                           ;newFILE.c: 166: SPBRG = 205;
  4366  0013CE  0ECD               	movlw	205
  4367  0013D0  6EAF               	movwf	4015,c	;volatile
  4368                           
  4369                           ;newFILE.c: 167: SPBRGH = 0;
  4370  0013D2  0E00               	movlw	0
  4371  0013D4  6EB0               	movwf	4016,c	;volatile
  4372                           
  4373                           ;newFILE.c: 168: BAUDCONbits.BRG16 = 1;
  4374  0013D6  86AA               	bsf	4010,3,c	;volatile
  4375                           
  4376                           ;newFILE.c: 169: TXSTAbits.BRGH = 1;
  4377  0013D8  84AC               	bsf	4012,2,c	;volatile
  4378                           
  4379                           ;newFILE.c: 170: RCSTAbits.CREN = 1;
  4380  0013DA  88AB               	bsf	4011,4,c	;volatile
  4381                           
  4382                           ;newFILE.c: 171: RCSTAbits.SPEN = 1;
  4383  0013DC  8EAB               	bsf	4011,7,c	;volatile
  4384                           
  4385                           ;newFILE.c: 172: TXSTAbits.TXEN = 1;
  4386  0013DE  8AAC               	bsf	4012,5,c	;volatile
  4387  0013E0  0012               	return		;funcret
  4388  0013E2                     __end_of_Init:
  4389                           	opt stack 0
  4390                           tblptru	equ	0xFF8
  4391                           tblptrh	equ	0xFF7
  4392                           tblptrl	equ	0xFF6
  4393                           tablat	equ	0xFF5
  4394                           prodh	equ	0xFF4
  4395                           prodl	equ	0xFF3
  4396                           intcon	equ	0xFF2
  4397                           postinc0	equ	0xFEE
  4398                           wreg	equ	0xFE8
  4399                           indf2	equ	0xFDF
  4400                           postinc2	equ	0xFDE
  4401                           postdec2	equ	0xFDD
  4402                           fsr2h	equ	0xFDA
  4403                           fsr2l	equ	0xFD9
  4404                           status	equ	0xFD8
  4405                           
  4406 ;; *************** function _IR_Init *****************
  4407 ;; Defined at:
  4408 ;;		line 11 in file "newFILE.c"
  4409 ;; Parameters:    Size  Location     Type
  4410 ;;		None
  4411 ;; Auto vars:     Size  Location     Type
  4412 ;;		None
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  1    wreg      void 
  4415 ;; Registers used:
  4416 ;;		wreg, status,2
  4417 ;; Tracked objects:
  4418 ;;		On entry : 0/0
  4419 ;;		On exit  : 0/0
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4422 ;;      Params:         0       0       0       0
  4423 ;;      Locals:         0       0       0       0
  4424 ;;      Temps:          0       0       0       0
  4425 ;;      Totals:         0       0       0       0
  4426 ;;Total ram usage:        0 bytes
  4427 ;; Hardware stack levels used:    1
  4428 ;; Hardware stack levels required when called:    4
  4429 ;; This function calls:
  4430 ;;		Nothing
  4431 ;; This function is called by:
  4432 ;;		_main
  4433 ;; This function uses a non-reentrant model
  4434 ;;
  4435                           
  4436                           	psect	text26
  4437  00143C                     __ptext26:
  4438                           	opt stack 0
  4439  00143C                     _IR_Init:
  4440                           	opt stack 26
  4441                           
  4442                           ;newFILE.c: 12: LATA = 0;
  4443                           
  4444                           ;incstack = 0
  4445  00143C  0E00               	movlw	0
  4446  00143E  6E89               	movwf	3977,c	;volatile
  4447                           
  4448                           ;newFILE.c: 13: TRISA = 0b00001100;
  4449  001440  0E0C               	movlw	12
  4450  001442  6E92               	movwf	3986,c	;volatile
  4451                           
  4452                           ;newFILE.c: 14: CAP1CON = 0b01000110;
  4453  001444  0E46               	movlw	70
  4454  001446  6E63               	movwf	3939,c	;volatile
  4455                           
  4456                           ;newFILE.c: 15: CAP2CON = 0b01000110;
  4457  001448  0E46               	movlw	70
  4458  00144A  6E62               	movwf	3938,c	;volatile
  4459                           
  4460                           ;newFILE.c: 16: T5CON = 0b00001001;
  4461  00144C  0E09               	movlw	9
  4462  00144E  6EB7               	movwf	4023,c	;volatile
  4463                           
  4464                           ;newFILE.c: 17: DFLTCON = 0b00011000;
  4465  001450  0E18               	movlw	24
  4466  001452  6E60               	movwf	3936,c	;volatile
  4467  001454  0012               	return		;funcret
  4468  001456                     __end_of_IR_Init:
  4469                           	opt stack 0
  4470                           tblptru	equ	0xFF8
  4471                           tblptrh	equ	0xFF7
  4472                           tblptrl	equ	0xFF6
  4473                           tablat	equ	0xFF5
  4474                           prodh	equ	0xFF4
  4475                           prodl	equ	0xFF3
  4476                           intcon	equ	0xFF2
  4477                           postinc0	equ	0xFEE
  4478                           wreg	equ	0xFE8
  4479                           indf2	equ	0xFDF
  4480                           postinc2	equ	0xFDE
  4481                           postdec2	equ	0xFDD
  4482                           fsr2h	equ	0xFDA
  4483                           fsr2l	equ	0xFD9
  4484                           status	equ	0xFD8
  4485                           
  4486 ;; *************** function _FindIR *****************
  4487 ;; Defined at:
  4488 ;;		line 20 in file "newFILE.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;  L_IR            2   34[COMRAM] PTR unsigned int 
  4491 ;;		 -> main@LeftIR(2), 
  4492 ;;  R_IR            2   36[COMRAM] PTR unsigned int 
  4493 ;;		 -> main@RightIR(2), 
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;		None
  4496 ;; Return value:  Size  Location     Type
  4497 ;;                  1    wreg      void 
  4498 ;; Registers used:
  4499 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4505 ;;      Params:         4       0       0       0
  4506 ;;      Locals:         0       0       0       0
  4507 ;;      Temps:          2       0       0       0
  4508 ;;      Totals:         6       0       0       0
  4509 ;;Total ram usage:        6 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:    4
  4512 ;; This function calls:
  4513 ;;		Nothing
  4514 ;; This function is called by:
  4515 ;;		_main
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           	psect	text27
  4520  0010DE                     __ptext27:
  4521                           	opt stack 0
  4522  0010DE                     _FindIR:
  4523                           	opt stack 26
  4524                           
  4525                           ;newFILE.c: 21: *L_IR = ((CAP1BUFH << 8) | CAP1BUFL);
  4526                           
  4527                           ;incstack = 0
  4528  0010DE  5068               	movf	3944,w,c	;volatile
  4529  0010E0  CF69 F027          	movff	3945,??_FindIR	;volatile
  4530  0010E4  6A28               	clrf	(??_FindIR+1)& (0+255),c
  4531  0010E6  C027  F028         	movff	??_FindIR,??_FindIR+1
  4532  0010EA  6A27               	clrf	??_FindIR,c
  4533  0010EC  1227               	iorwf	??_FindIR,f,c
  4534  0010EE  0E00               	movlw	0
  4535  0010F0  1228               	iorwf	??_FindIR+1,f,c
  4536  0010F2  C023  FFD9         	movff	FindIR@L_IR,fsr2l
  4537  0010F6  C024  FFDA         	movff	FindIR@L_IR+1,fsr2h
  4538  0010FA  C027  FFDE         	movff	??_FindIR,postinc2
  4539  0010FE  C028  FFDD         	movff	??_FindIR+1,postdec2
  4540                           
  4541                           ;newFILE.c: 22: *R_IR = ((CAP2BUFH << 8) | CAP2BUFL);
  4542  001102  5066               	movf	3942,w,c	;volatile
  4543  001104  CF67 F027          	movff	3943,??_FindIR	;volatile
  4544  001108  6A28               	clrf	(??_FindIR+1)& (0+255),c
  4545  00110A  C027  F028         	movff	??_FindIR,??_FindIR+1
  4546  00110E  6A27               	clrf	??_FindIR,c
  4547  001110  1227               	iorwf	??_FindIR,f,c
  4548  001112  0E00               	movlw	0
  4549  001114  1228               	iorwf	??_FindIR+1,f,c
  4550  001116  C025  FFD9         	movff	FindIR@R_IR,fsr2l
  4551  00111A  C026  FFDA         	movff	FindIR@R_IR+1,fsr2h
  4552  00111E  C027  FFDE         	movff	??_FindIR,postinc2
  4553  001122  C028  FFDD         	movff	??_FindIR+1,postdec2
  4554  001126  0012               	return		;funcret
  4555  001128                     __end_of_FindIR:
  4556                           	opt stack 0
  4557                           tblptru	equ	0xFF8
  4558                           tblptrh	equ	0xFF7
  4559                           tblptrl	equ	0xFF6
  4560                           tablat	equ	0xFF5
  4561                           prodh	equ	0xFF4
  4562                           prodl	equ	0xFF3
  4563                           intcon	equ	0xFF2
  4564                           postinc0	equ	0xFEE
  4565                           wreg	equ	0xFE8
  4566                           indf2	equ	0xFDF
  4567                           postinc2	equ	0xFDE
  4568                           postdec2	equ	0xFDD
  4569                           fsr2h	equ	0xFDA
  4570                           fsr2l	equ	0xFD9
  4571                           status	equ	0xFD8
  4572                           
  4573 ;; *************** function _InterruptHandlerHigh *****************
  4574 ;; Defined at:
  4575 ;;		line 181 in file "newFILE.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;		None
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;  read_counter    2   31[COMRAM] int 
  4580 ;;  readIn          1   33[COMRAM] unsigned char 
  4581 ;; Return value:  Size  Location     Type
  4582 ;;                  1    wreg      void 
  4583 ;; Registers used:
  4584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4585 ;; Tracked objects:
  4586 ;;		On entry : 0/0
  4587 ;;		On exit  : 0/0
  4588 ;;		Unchanged: 0/0
  4589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4590 ;;      Params:         0       0       0       0
  4591 ;;      Locals:         3       0       0       0
  4592 ;;      Temps:          4       0       0       0
  4593 ;;      Totals:         7       0       0       0
  4594 ;;Total ram usage:        7 bytes
  4595 ;; Hardware stack levels used:    1
  4596 ;; Hardware stack levels required when called:    3
  4597 ;; This function calls:
  4598 ;;		_getCharSerial
  4599 ;;		i2_SendLCD
  4600 ;;		i2_stop
  4601 ;; This function is called by:
  4602 ;;		Interrupt level 2
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           	psect	intcode
  4607  000008                     __pintcode:
  4608                           	opt stack 0
  4609  000008                     _InterruptHandlerHigh:
  4610                           	opt stack 23
  4611                           
  4612                           ;incstack = 0
  4613  000008  823D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4614  00000A  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerHigh
  4615  00000E  CFDA F01D          	movff	fsr2h,??_InterruptHandlerHigh+1
  4616  000012  CFF3 F01E          	movff	prodl,??_InterruptHandlerHigh+2
  4617  000016  CFF4 F01F          	movff	prodh,??_InterruptHandlerHigh+3
  4618                           
  4619                           ;newFILE.c: 183: if(PIR1bits.RCIF==1)
  4620  00001A  AA9E               	btfss	3998,5,c	;volatile
  4621  00001C  D031               	goto	i2l257
  4622                           
  4623                           ;newFILE.c: 184: {;newFILE.c: 186: unsigned char readIn=0;
  4624  00001E  0E00               	movlw	0
  4625  000020  6E22               	movwf	InterruptHandlerHigh@readIn,c
  4626                           
  4627                           ;newFILE.c: 187: int read_counter=0;
  4628  000022  0E00               	movlw	0
  4629  000024  6E21               	movwf	InterruptHandlerHigh@read_counter+1,c
  4630  000026  0E00               	movlw	0
  4631  000028  6E20               	movwf	InterruptHandlerHigh@read_counter,c
  4632                           
  4633                           ;newFILE.c: 188: readIn = getCharSerial();
  4634  00002A  EC3E  F00A         	call	_getCharSerial	;wreg free
  4635  00002E  6E22               	movwf	InterruptHandlerHigh@readIn,c
  4636                           
  4637                           ;newFILE.c: 190: if (readIn == 0x02) {
  4638  000030  0E02               	movlw	2
  4639  000032  1822               	xorwf	InterruptHandlerHigh@readIn,w,c
  4640  000034  B4D8               	btfsc	status,2,c
  4641  000036  D013               	goto	i2l261
  4642  000038  D016               	goto	i2u164_40
  4643  00003A                     
  4644                           ;newFILE.c: 194: readIn = getCharSerial();
  4645  00003A  EC3E  F00A         	call	_getCharSerial	;wreg free
  4646  00003E  6E22               	movwf	InterruptHandlerHigh@readIn,c
  4647                           
  4648                           ;newFILE.c: 195: if (read_counter <12){
  4649  000040  BE21               	btfsc	InterruptHandlerHigh@read_counter+1,7,c
  4650  000042  D006               	goto	i2u163_40
  4651  000044  5021               	movf	InterruptHandlerHigh@read_counter+1,w,c
  4652  000046  E10B               	bnz	i2l2855
  4653  000048  0E0C               	movlw	12
  4654  00004A  5C20               	subwf	InterruptHandlerHigh@read_counter,w,c
  4655  00004C  B0D8               	btfsc	status,0,c
  4656  00004E  D007               	goto	i2l261
  4657  000050                     i2u163_40:
  4658                           
  4659                           ;newFILE.c: 196: SendLCD(readIn, 1);
  4660  000050  0E01               	movlw	1
  4661  000052  6E05               	movwf	i2SendLCD@type,c
  4662  000054  5022               	movf	InterruptHandlerHigh@readIn,w,c
  4663  000056  EC93  F009         	call	i2_SendLCD
  4664                           
  4665                           ;newFILE.c: 197: read_counter++;
  4666  00005A  4A20               	infsnz	InterruptHandlerHigh@read_counter,f,c
  4667  00005C  2A21               	incf	InterruptHandlerHigh@read_counter+1,f,c
  4668  00005E                     i2l261:
  4669  00005E                     i2l2855:
  4670  00005E  0E03               	movlw	3
  4671  000060  1822               	xorwf	InterruptHandlerHigh@readIn,w,c
  4672  000062  A4D8               	btfss	status,2,c
  4673  000064  D7EA               	goto	i2l260
  4674  000066                     i2u164_40:
  4675                           
  4676                           ;newFILE.c: 198: };newFILE.c: 199: };newFILE.c: 200: };newFILE.c: 201: stop(&motorL, &mo
      +                          torR);
  4677  000066  0E34               	movlw	low _motorL
  4678  000068  6E16               	movwf	i2stop@m_L,c
  4679  00006A  0E00               	movlw	high _motorL
  4680  00006C  6E17               	movwf	i2stop@m_L+1,c
  4681  00006E  0E2B               	movlw	low _motorR
  4682  000070  6E18               	movwf	i2stop@m_R,c
  4683  000072  0E00               	movlw	high _motorR
  4684  000074  6E19               	movwf	i2stop@m_R+1,c
  4685  000076  ECC1  F007         	call	i2_stop	;wreg free
  4686                           
  4687                           ;newFILE.c: 202: read=1;
  4688  00007A  0E01               	movlw	1
  4689  00007C  0100               	movlb	0	; () banked
  4690  00007E  6FC6               	movwf	_read& (0+255),b
  4691  000080                     i2l257:
  4692                           
  4693                           ; BSR set to: 0
  4694  000080  C01F  FFF4         	movff	??_InterruptHandlerHigh+3,prodh
  4695  000084  C01E  FFF3         	movff	??_InterruptHandlerHigh+2,prodl
  4696  000088  C01D  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  4697  00008C  C01C  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  4698  000090  923D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4699  000092  0011               	retfie		f
  4700  000094                     __end_of_InterruptHandlerHigh:
  4701                           	opt stack 0
  4702                           tblptru	equ	0xFF8
  4703                           tblptrh	equ	0xFF7
  4704                           tblptrl	equ	0xFF6
  4705                           tablat	equ	0xFF5
  4706                           prodh	equ	0xFF4
  4707                           prodl	equ	0xFF3
  4708                           intcon	equ	0xFF2
  4709                           postinc0	equ	0xFEE
  4710                           wreg	equ	0xFE8
  4711                           indf2	equ	0xFDF
  4712                           postinc2	equ	0xFDE
  4713                           postdec2	equ	0xFDD
  4714                           fsr2h	equ	0xFDA
  4715                           fsr2l	equ	0xFD9
  4716                           status	equ	0xFD8
  4717                           
  4718 ;; *************** function i2_stop *****************
  4719 ;; Defined at:
  4720 ;;		line 64 in file "MotorControl.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;  m_L             2   21[COMRAM] PTR struct DC_motor
  4723 ;;		 -> motorL(9), 
  4724 ;;  m_R             2   23[COMRAM] PTR struct DC_motor
  4725 ;;		 -> motorR(9), 
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;		None
  4728 ;; Return value:  Size  Location     Type
  4729 ;;                  1    wreg      void 
  4730 ;; Registers used:
  4731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4737 ;;      Params:         4       0       0       0
  4738 ;;      Locals:         0       0       0       0
  4739 ;;      Temps:          2       0       0       0
  4740 ;;      Totals:         6       0       0       0
  4741 ;;Total ram usage:        6 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:    2
  4744 ;; This function calls:
  4745 ;;		i2_setMotorPWM
  4746 ;; This function is called by:
  4747 ;;		_InterruptHandlerHigh
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           	psect	text29
  4752  000F82                     __ptext29:
  4753                           	opt stack 0
  4754  000F82                     i2_stop:
  4755                           	opt stack 23
  4756                           
  4757                           ;MotorControl.c: 65: motorL.direction = 1;
  4758                           
  4759                           ;incstack = 0
  4760  000F82  0E01               	movlw	1
  4761  000F84  6E35               	movwf	_motorL+1,c
  4762                           
  4763                           ;MotorControl.c: 66: motorL.power = 0;
  4764  000F86  0E00               	movlw	0
  4765  000F88  6E34               	movwf	_motorL,c
  4766                           
  4767                           ;MotorControl.c: 67: setMotorPWM(m_L);
  4768  000F8A  C016  F00F         	movff	i2stop@m_L,i2setMotorPWM@m
  4769  000F8E  C017  F010         	movff	i2stop@m_L+1,i2setMotorPWM@m+1
  4770  000F92  EC42  F005         	call	i2_setMotorPWM	;wreg free
  4771                           
  4772                           ;MotorControl.c: 68: motorR.direction = 1;
  4773  000F96  0E01               	movlw	1
  4774  000F98  6E2C               	movwf	_motorR+1,c
  4775                           
  4776                           ;MotorControl.c: 69: motorR.power = 0;
  4777  000F9A  0E00               	movlw	0
  4778  000F9C  6E2B               	movwf	_motorR,c
  4779                           
  4780                           ;MotorControl.c: 70: setMotorPWM(m_R);
  4781  000F9E  C018  F00F         	movff	i2stop@m_R,i2setMotorPWM@m
  4782  000FA2  C019  F010         	movff	i2stop@m_R+1,i2setMotorPWM@m+1
  4783  000FA6  EC42  F005         	call	i2_setMotorPWM	;wreg free
  4784                           
  4785                           ;MotorControl.c: 71: _delay((unsigned long)((200)*(8000000/4000.0)));
  4786  000FAA  0E03               	movlw	3
  4787  000FAC  6E1B               	movwf	(??i2_stop+1)& (0+255),c
  4788  000FAE  0E08               	movlw	8
  4789  000FB0  6E1A               	movwf	??i2_stop& (0+255),c
  4790  000FB2  0E77               	movlw	119
  4791  000FB4                     i2u199_47:
  4792  000FB4  2EE8               	decfsz	wreg,f,c
  4793  000FB6  D7FE               	bra	i2u199_47
  4794  000FB8  2E1A               	decfsz	??i2_stop& (0+255),f,c
  4795  000FBA  D7FC               	bra	i2u199_47
  4796  000FBC  2E1B               	decfsz	(??i2_stop+1)& (0+255),f,c
  4797  000FBE  D7FA               	bra	i2u199_47
  4798  000FC0  F000               	nop	
  4799                           
  4800                           ;MotorControl.c: 72: motorL.direction = 1;
  4801  000FC2  0E01               	movlw	1
  4802  000FC4  6E35               	movwf	_motorL+1,c
  4803                           
  4804                           ;MotorControl.c: 73: motorL.power = 0;
  4805  000FC6  0E00               	movlw	0
  4806  000FC8  6E34               	movwf	_motorL,c
  4807                           
  4808                           ;MotorControl.c: 74: setMotorPWM(m_L);
  4809  000FCA  C016  F00F         	movff	i2stop@m_L,i2setMotorPWM@m
  4810  000FCE  C017  F010         	movff	i2stop@m_L+1,i2setMotorPWM@m+1
  4811  000FD2  EC42  F005         	call	i2_setMotorPWM	;wreg free
  4812                           
  4813                           ;MotorControl.c: 75: motorR.direction = 1;
  4814  000FD6  0E01               	movlw	1
  4815  000FD8  6E2C               	movwf	_motorR+1,c
  4816                           
  4817                           ;MotorControl.c: 76: motorR.power = 0;
  4818  000FDA  0E00               	movlw	0
  4819  000FDC  6E2B               	movwf	_motorR,c
  4820                           
  4821                           ;MotorControl.c: 77: setMotorPWM(m_R);
  4822  000FDE  C018  F00F         	movff	i2stop@m_R,i2setMotorPWM@m
  4823  000FE2  C019  F010         	movff	i2stop@m_R+1,i2setMotorPWM@m+1
  4824  000FE6  EC42  F005         	call	i2_setMotorPWM	;wreg free
  4825  000FEA  0012               	return		;funcret
  4826  000FEC                     __end_ofi2_stop:
  4827                           	opt stack 0
  4828                           tblptru	equ	0xFF8
  4829                           tblptrh	equ	0xFF7
  4830                           tblptrl	equ	0xFF6
  4831                           tablat	equ	0xFF5
  4832                           prodh	equ	0xFF4
  4833                           prodl	equ	0xFF3
  4834                           intcon	equ	0xFF2
  4835                           postinc0	equ	0xFEE
  4836                           wreg	equ	0xFE8
  4837                           indf2	equ	0xFDF
  4838                           postinc2	equ	0xFDE
  4839                           postdec2	equ	0xFDD
  4840                           fsr2h	equ	0xFDA
  4841                           fsr2l	equ	0xFD9
  4842                           status	equ	0xFD8
  4843                           
  4844 ;; *************** function i2_setMotorPWM *****************
  4845 ;; Defined at:
  4846 ;;		line 32 in file "MotorControl.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;  m               2   14[COMRAM] PTR struct DC_motor
  4849 ;;		 -> motorR(9), motorL(9), 
  4850 ;; Auto vars:     Size  Location     Type
  4851 ;;  setMotorPWM     2   19[COMRAM] int 
  4852 ;; Return value:  Size  Location     Type
  4853 ;;                  1    wreg      void 
  4854 ;; Registers used:
  4855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4856 ;; Tracked objects:
  4857 ;;		On entry : 0/0
  4858 ;;		On exit  : 0/0
  4859 ;;		Unchanged: 0/0
  4860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4861 ;;      Params:         2       0       0       0
  4862 ;;      Locals:         2       0       0       0
  4863 ;;      Temps:          3       0       0       0
  4864 ;;      Totals:         7       0       0       0
  4865 ;;Total ram usage:        7 bytes
  4866 ;; Hardware stack levels used:    1
  4867 ;; Hardware stack levels required when called:    1
  4868 ;; This function calls:
  4869 ;;		i2___awdiv
  4870 ;;		i2___wmul
  4871 ;; This function is called by:
  4872 ;;		i2_stop
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           	psect	text30
  4877  000A84                     __ptext30:
  4878                           	opt stack 0
  4879  000A84                     i2_setMotorPWM:
  4880                           	opt stack 23
  4881                           
  4882                           ;MotorControl.c: 34: int PWMduty;;MotorControl.c: 35: if (m->direction){
  4883                           
  4884                           ;incstack = 0
  4885  000A84  EE20 F001          	lfsr	2,1
  4886  000A88  500F               	movf	i2setMotorPWM@m,w,c
  4887  000A8A  26D9               	addwf	fsr2l,f,c
  4888  000A8C  5010               	movf	i2setMotorPWM@m+1,w,c
  4889  000A8E  22DA               	addwfc	fsr2h,f,c
  4890  000A90  50DF               	movf	indf2,w,c
  4891  000A92  B4D8               	btfsc	status,2,c
  4892  000A94  D034               	goto	i2l32
  4893                           
  4894                           ;MotorControl.c: 37: PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  4895  000A96  EE20 F007          	lfsr	2,7
  4896  000A9A  500F               	movf	i2setMotorPWM@m,w,c
  4897  000A9C  26D9               	addwf	fsr2l,f,c
  4898  000A9E  5010               	movf	i2setMotorPWM@m+1,w,c
  4899  000AA0  22DA               	addwfc	fsr2h,f,c
  4900  000AA2  CFDE F011          	movff	postinc2,??i2_setMotorPWM
  4901  000AA6  CFDD F012          	movff	postdec2,??i2_setMotorPWM+1
  4902  000AAA  C00F  FFD9         	movff	i2setMotorPWM@m,fsr2l
  4903  000AAE  C010  FFDA         	movff	i2setMotorPWM@m+1,fsr2h
  4904  000AB2  50DF               	movf	indf2,w,c
  4905  000AB4  6E13               	movwf	(??i2_setMotorPWM+2)& (0+255),c
  4906  000AB6  5013               	movf	??i2_setMotorPWM+2,w,c
  4907  000AB8  6E01               	movwf	i2___wmul@multiplier,c
  4908  000ABA  6A02               	clrf	i2___wmul@multiplier+1,c
  4909  000ABC  EE20 F007          	lfsr	2,7
  4910  000AC0  500F               	movf	i2setMotorPWM@m,w,c
  4911  000AC2  26D9               	addwf	fsr2l,f,c
  4912  000AC4  5010               	movf	i2setMotorPWM@m+1,w,c
  4913  000AC6  22DA               	addwfc	fsr2h,f,c
  4914  000AC8  CFDE F003          	movff	postinc2,i2___wmul@multiplicand
  4915  000ACC  CFDD F004          	movff	postdec2,i2___wmul@multiplicand+1
  4916  000AD0  ECCD  F009         	call	i2___wmul	;wreg free
  4917  000AD4  C001  F007         	movff	?i2___wmul,i2___awdiv@dividend
  4918  000AD8  C002  F008         	movff	?i2___wmul+1,i2___awdiv@dividend+1
  4919  000ADC  0E00               	movlw	0
  4920  000ADE  6E0A               	movwf	i2___awdiv@divisor+1,c
  4921  000AE0  0E64               	movlw	100
  4922  000AE2  6E09               	movwf	i2___awdiv@divisor,c
  4923  000AE4  EC4A  F007         	call	i2___awdiv	;wreg free
  4924  000AE8  1E07               	comf	?i2___awdiv,f,c
  4925  000AEA  1E08               	comf	?i2___awdiv+1,f,c
  4926  000AEC  4A07               	infsnz	?i2___awdiv,f,c
  4927  000AEE  2A08               	incf	?i2___awdiv+1,f,c
  4928  000AF0  5011               	movf	??i2_setMotorPWM,w,c
  4929  000AF2  2407               	addwf	?i2___awdiv,w,c
  4930  000AF4  6E14               	movwf	i2setMotorPWM@PWMduty,c
  4931  000AF6  5012               	movf	??i2_setMotorPWM+1,w,c
  4932  000AF8  2008               	addwfc	?i2___awdiv+1,w,c
  4933  000AFA  6E15               	movwf	i2setMotorPWM@PWMduty+1,c
  4934                           
  4935                           ;MotorControl.c: 38: }
  4936  000AFC  D023               	goto	i2l33
  4937  000AFE                     i2l32:
  4938                           
  4939                           ;MotorControl.c: 39: else {;MotorControl.c: 41: PWMduty=((int)(m->power)*(m->PWMperiod))
      +                          /100;
  4940  000AFE  C00F  FFD9         	movff	i2setMotorPWM@m,fsr2l
  4941  000B02  C010  FFDA         	movff	i2setMotorPWM@m+1,fsr2h
  4942  000B06  50DF               	movf	indf2,w,c
  4943  000B08  6E11               	movwf	??i2_setMotorPWM& (0+255),c
  4944  000B0A  5011               	movf	??i2_setMotorPWM,w,c
  4945  000B0C  6E01               	movwf	i2___wmul@multiplier,c
  4946  000B0E  6A02               	clrf	i2___wmul@multiplier+1,c
  4947  000B10  EE20 F007          	lfsr	2,7
  4948  000B14  500F               	movf	i2setMotorPWM@m,w,c
  4949  000B16  26D9               	addwf	fsr2l,f,c
  4950  000B18  5010               	movf	i2setMotorPWM@m+1,w,c
  4951  000B1A  22DA               	addwfc	fsr2h,f,c
  4952  000B1C  CFDE F003          	movff	postinc2,i2___wmul@multiplicand
  4953  000B20  CFDD F004          	movff	postdec2,i2___wmul@multiplicand+1
  4954  000B24  ECCD  F009         	call	i2___wmul	;wreg free
  4955  000B28  C001  F007         	movff	?i2___wmul,i2___awdiv@dividend
  4956  000B2C  C002  F008         	movff	?i2___wmul+1,i2___awdiv@dividend+1
  4957  000B30  0E00               	movlw	0
  4958  000B32  6E0A               	movwf	i2___awdiv@divisor+1,c
  4959  000B34  0E64               	movlw	100
  4960  000B36  6E09               	movwf	i2___awdiv@divisor,c
  4961  000B38  EC4A  F007         	call	i2___awdiv	;wreg free
  4962  000B3C  C007  F014         	movff	?i2___awdiv,i2setMotorPWM@PWMduty
  4963  000B40  C008  F015         	movff	?i2___awdiv+1,i2setMotorPWM@PWMduty+1
  4964  000B44                     i2l33:
  4965                           
  4966                           ;MotorControl.c: 42: };MotorControl.c: 43: PWMduty = (PWMduty << 2);
  4967  000B44  C014  F011         	movff	i2setMotorPWM@PWMduty,??i2_setMotorPWM
  4968  000B48  C015  F012         	movff	i2setMotorPWM@PWMduty+1,??i2_setMotorPWM+1
  4969  000B4C  90D8               	bcf	status,0,c
  4970  000B4E  3611               	rlcf	??i2_setMotorPWM,f,c
  4971  000B50  3612               	rlcf	??i2_setMotorPWM+1,f,c
  4972  000B52  90D8               	bcf	status,0,c
  4973  000B54  3611               	rlcf	??i2_setMotorPWM,f,c
  4974  000B56  3612               	rlcf	??i2_setMotorPWM+1,f,c
  4975  000B58  C011  F014         	movff	??i2_setMotorPWM,i2setMotorPWM@PWMduty
  4976  000B5C  C012  F015         	movff	??i2_setMotorPWM+1,i2setMotorPWM@PWMduty+1
  4977                           
  4978                           ;MotorControl.c: 44: *(m->dutyLowByte) = PWMduty & 0xFF;
  4979  000B60  EE20 F002          	lfsr	2,2
  4980  000B64  500F               	movf	i2setMotorPWM@m,w,c
  4981  000B66  26D9               	addwf	fsr2l,f,c
  4982  000B68  5010               	movf	i2setMotorPWM@m+1,w,c
  4983  000B6A  22DA               	addwfc	fsr2h,f,c
  4984  000B6C  CFDE F011          	movff	postinc2,??i2_setMotorPWM
  4985  000B70  CFDD F012          	movff	postdec2,??i2_setMotorPWM+1
  4986  000B74  C011  FFD9         	movff	??i2_setMotorPWM,fsr2l
  4987  000B78  C012  FFDA         	movff	??i2_setMotorPWM+1,fsr2h
  4988  000B7C  C014  FFDF         	movff	i2setMotorPWM@PWMduty,indf2
  4989                           
  4990                           ;MotorControl.c: 45: *(m->dutyHighByte) = (PWMduty >> 8) & 0x3F;
  4991  000B80  EE20 F004          	lfsr	2,4
  4992  000B84  500F               	movf	i2setMotorPWM@m,w,c
  4993  000B86  26D9               	addwf	fsr2l,f,c
  4994  000B88  5010               	movf	i2setMotorPWM@m+1,w,c
  4995  000B8A  22DA               	addwfc	fsr2h,f,c
  4996  000B8C  CFDE F011          	movff	postinc2,??i2_setMotorPWM
  4997  000B90  CFDD F012          	movff	postdec2,??i2_setMotorPWM+1
  4998  000B94  C011  FFD9         	movff	??i2_setMotorPWM,fsr2l
  4999  000B98  C012  FFDA         	movff	??i2_setMotorPWM+1,fsr2h
  5000  000B9C  5015               	movf	i2setMotorPWM@PWMduty+1,w,c
  5001  000B9E  0B3F               	andlw	63
  5002  000BA0  6EDF               	movwf	indf2,c
  5003                           
  5004                           ;MotorControl.c: 47: if (m->direction){
  5005  000BA2  EE20 F001          	lfsr	2,1
  5006  000BA6  500F               	movf	i2setMotorPWM@m,w,c
  5007  000BA8  26D9               	addwf	fsr2l,f,c
  5008  000BAA  5010               	movf	i2setMotorPWM@m+1,w,c
  5009  000BAC  22DA               	addwfc	fsr2h,f,c
  5010  000BAE  50DF               	movf	indf2,w,c
  5011  000BB0  B4D8               	btfsc	status,2,c
  5012  000BB2  D014               	goto	i2l34
  5013                           
  5014                           ;MotorControl.c: 48: LATB=LATB | (1<<(m->dir_pin));
  5015  000BB4  EE20 F006          	lfsr	2,6
  5016  000BB8  500F               	movf	i2setMotorPWM@m,w,c
  5017  000BBA  26D9               	addwf	fsr2l,f,c
  5018  000BBC  5010               	movf	i2setMotorPWM@m+1,w,c
  5019  000BBE  22DA               	addwfc	fsr2h,f,c
  5020  000BC0  50DF               	movf	indf2,w,c
  5021  000BC2  6E11               	movwf	??i2_setMotorPWM& (0+255),c
  5022  000BC4  0E01               	movlw	1
  5023  000BC6  6E12               	movwf	(??i2_setMotorPWM+1)& (0+255),c
  5024  000BC8  2A11               	incf	??i2_setMotorPWM,f,c
  5025  000BCA  D002               	goto	i2u142_44
  5026  000BCC                     i2u142_45:
  5027  000BCC  90D8               	bcf	status,0,c
  5028  000BCE  3612               	rlcf	??i2_setMotorPWM+1,f,c
  5029  000BD0                     i2u142_44:
  5030  000BD0  2E11               	decfsz	??i2_setMotorPWM,f,c
  5031  000BD2  D7FC               	goto	i2u142_45
  5032  000BD4  5012               	movf	??i2_setMotorPWM+1,w,c
  5033  000BD6  108A               	iorwf	3978,w,c	;volatile
  5034  000BD8  6E8A               	movwf	3978,c	;volatile
  5035                           
  5036                           ;MotorControl.c: 49: } else {
  5037  000BDA  0012               	return	
  5038  000BDC                     i2l34:
  5039                           
  5040                           ;MotorControl.c: 50: LATB=LATB & (~(1<<(m->dir_pin)));
  5041  000BDC  EE20 F006          	lfsr	2,6
  5042  000BE0  500F               	movf	i2setMotorPWM@m,w,c
  5043  000BE2  26D9               	addwf	fsr2l,f,c
  5044  000BE4  5010               	movf	i2setMotorPWM@m+1,w,c
  5045  000BE6  22DA               	addwfc	fsr2h,f,c
  5046  000BE8  50DF               	movf	indf2,w,c
  5047  000BEA  6E11               	movwf	??i2_setMotorPWM& (0+255),c
  5048  000BEC  0E01               	movlw	1
  5049  000BEE  6E12               	movwf	(??i2_setMotorPWM+1)& (0+255),c
  5050  000BF0  2A11               	incf	??i2_setMotorPWM,f,c
  5051  000BF2  D002               	goto	i2u143_44
  5052  000BF4                     i2u143_45:
  5053  000BF4  90D8               	bcf	status,0,c
  5054  000BF6  3612               	rlcf	??i2_setMotorPWM+1,f,c
  5055  000BF8                     i2u143_44:
  5056  000BF8  2E11               	decfsz	??i2_setMotorPWM,f,c
  5057  000BFA  D7FC               	goto	i2u143_45
  5058  000BFC  5012               	movf	??i2_setMotorPWM+1,w,c
  5059  000BFE  0AFF               	xorlw	255
  5060  000C00  148A               	andwf	3978,w,c	;volatile
  5061  000C02  6E8A               	movwf	3978,c	;volatile
  5062  000C04  0012               	return	
  5063  000C06                     __end_ofi2_setMotorPWM:
  5064                           	opt stack 0
  5065                           tblptru	equ	0xFF8
  5066                           tblptrh	equ	0xFF7
  5067                           tblptrl	equ	0xFF6
  5068                           tablat	equ	0xFF5
  5069                           prodh	equ	0xFF4
  5070                           prodl	equ	0xFF3
  5071                           intcon	equ	0xFF2
  5072                           postinc0	equ	0xFEE
  5073                           wreg	equ	0xFE8
  5074                           indf2	equ	0xFDF
  5075                           postinc2	equ	0xFDE
  5076                           postdec2	equ	0xFDD
  5077                           fsr2h	equ	0xFDA
  5078                           fsr2l	equ	0xFD9
  5079                           status	equ	0xFD8
  5080                           
  5081 ;; *************** function i2___wmul *****************
  5082 ;; Defined at:
  5083 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;  multiplier      2    0[COMRAM] unsigned int 
  5086 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5087 ;; Auto vars:     Size  Location     Type
  5088 ;;  __wmul          2    4[COMRAM] unsigned int 
  5089 ;; Return value:  Size  Location     Type
  5090 ;;                  2    0[COMRAM] unsigned int 
  5091 ;; Registers used:
  5092 ;;		wreg, status,2, status,0, prodl, prodh
  5093 ;; Tracked objects:
  5094 ;;		On entry : 0/0
  5095 ;;		On exit  : 0/0
  5096 ;;		Unchanged: 0/0
  5097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5098 ;;      Params:         4       0       0       0
  5099 ;;      Locals:         2       0       0       0
  5100 ;;      Temps:          0       0       0       0
  5101 ;;      Totals:         6       0       0       0
  5102 ;;Total ram usage:        6 bytes
  5103 ;; Hardware stack levels used:    1
  5104 ;; This function calls:
  5105 ;;		Nothing
  5106 ;; This function is called by:
  5107 ;;		i2_setMotorPWM
  5108 ;; This function uses a non-reentrant model
  5109 ;;
  5110                           
  5111                           	psect	text31
  5112  00139A                     __ptext31:
  5113                           	opt stack 0
  5114  00139A                     i2___wmul:
  5115                           	opt stack 23
  5116                           
  5117                           ;incstack = 0
  5118  00139A  5001               	movf	i2___wmul@multiplier,w,c
  5119  00139C  0203               	mulwf	i2___wmul@multiplicand,c
  5120  00139E  CFF3 F005          	movff	prodl,i2___wmul@product
  5121  0013A2  CFF4 F006          	movff	prodh,i2___wmul@product+1
  5122  0013A6  5001               	movf	i2___wmul@multiplier,w,c
  5123  0013A8  0204               	mulwf	i2___wmul@multiplicand+1,c
  5124  0013AA  50F3               	movf	prodl,w,c
  5125  0013AC  2606               	addwf	i2___wmul@product+1,f,c
  5126  0013AE  5002               	movf	i2___wmul@multiplier+1,w,c
  5127  0013B0  0203               	mulwf	i2___wmul@multiplicand,c
  5128  0013B2  50F3               	movf	prodl,w,c
  5129  0013B4  2606               	addwf	i2___wmul@product+1,f,c
  5130  0013B6  C005  F001         	movff	i2___wmul@product,?i2___wmul
  5131  0013BA  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  5132  0013BE  0012               	return	
  5133  0013C0                     __end_ofi2___wmul:
  5134                           	opt stack 0
  5135                           tblptru	equ	0xFF8
  5136                           tblptrh	equ	0xFF7
  5137                           tblptrl	equ	0xFF6
  5138                           tablat	equ	0xFF5
  5139                           prodh	equ	0xFF4
  5140                           prodl	equ	0xFF3
  5141                           intcon	equ	0xFF2
  5142                           postinc0	equ	0xFEE
  5143                           wreg	equ	0xFE8
  5144                           indf2	equ	0xFDF
  5145                           postinc2	equ	0xFDE
  5146                           postdec2	equ	0xFDD
  5147                           fsr2h	equ	0xFDA
  5148                           fsr2l	equ	0xFD9
  5149                           status	equ	0xFD8
  5150                           
  5151 ;; *************** function i2___awdiv *****************
  5152 ;; Defined at:
  5153 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awdiv.c"
  5154 ;; Parameters:    Size  Location     Type
  5155 ;;  dividend        2    6[COMRAM] int 
  5156 ;;  divisor         2    8[COMRAM] int 
  5157 ;; Auto vars:     Size  Location     Type
  5158 ;;  __awdiv         2   12[COMRAM] int 
  5159 ;;  __awdiv         1   11[COMRAM] unsigned char 
  5160 ;;  __awdiv         1   10[COMRAM] unsigned char 
  5161 ;; Return value:  Size  Location     Type
  5162 ;;                  2    6[COMRAM] int 
  5163 ;; Registers used:
  5164 ;;		wreg, status,2, status,0
  5165 ;; Tracked objects:
  5166 ;;		On entry : 0/0
  5167 ;;		On exit  : 0/0
  5168 ;;		Unchanged: 0/0
  5169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5170 ;;      Params:         4       0       0       0
  5171 ;;      Locals:         4       0       0       0
  5172 ;;      Temps:          0       0       0       0
  5173 ;;      Totals:         8       0       0       0
  5174 ;;Total ram usage:        8 bytes
  5175 ;; Hardware stack levels used:    1
  5176 ;; This function calls:
  5177 ;;		Nothing
  5178 ;; This function is called by:
  5179 ;;		i2_setMotorPWM
  5180 ;; This function uses a non-reentrant model
  5181 ;;
  5182                           
  5183                           	psect	text32
  5184  000E94                     __ptext32:
  5185                           	opt stack 0
  5186  000E94                     i2___awdiv:
  5187                           	opt stack 23
  5188                           
  5189                           ;incstack = 0
  5190  000E94  0E00               	movlw	0
  5191  000E96  6E0C               	movwf	i2___awdiv@sign,c
  5192  000E98  AE0A               	btfss	i2___awdiv@divisor+1,7,c
  5193  000E9A  D006               	goto	i2l539
  5194  000E9C  6C09               	negf	i2___awdiv@divisor,c
  5195  000E9E  1E0A               	comf	i2___awdiv@divisor+1,f,c
  5196  000EA0  B0D8               	btfsc	status,0,c
  5197  000EA2  2A0A               	incf	i2___awdiv@divisor+1,f,c
  5198  000EA4  0E01               	movlw	1
  5199  000EA6  6E0C               	movwf	i2___awdiv@sign,c
  5200  000EA8                     i2l539:
  5201  000EA8  AE08               	btfss	i2___awdiv@dividend+1,7,c
  5202  000EAA  D006               	goto	i2l540
  5203  000EAC  6C07               	negf	i2___awdiv@dividend,c
  5204  000EAE  1E08               	comf	i2___awdiv@dividend+1,f,c
  5205  000EB0  B0D8               	btfsc	status,0,c
  5206  000EB2  2A08               	incf	i2___awdiv@dividend+1,f,c
  5207  000EB4  0E01               	movlw	1
  5208  000EB6  1A0C               	xorwf	i2___awdiv@sign,f,c
  5209  000EB8                     i2l540:
  5210  000EB8  0E00               	movlw	0
  5211  000EBA  6E0E               	movwf	i2___awdiv@quotient+1,c
  5212  000EBC  0E00               	movlw	0
  5213  000EBE  6E0D               	movwf	i2___awdiv@quotient,c
  5214  000EC0  5009               	movf	i2___awdiv@divisor,w,c
  5215  000EC2  100A               	iorwf	i2___awdiv@divisor+1,w,c
  5216  000EC4  B4D8               	btfsc	status,2,c
  5217  000EC6  D01C               	goto	i2l547
  5218  000EC8  0E01               	movlw	1
  5219  000ECA  6E0B               	movwf	i2___awdiv@counter,c
  5220  000ECC  D004               	goto	i2l542
  5221  000ECE  90D8               	bcf	status,0,c
  5222  000ED0  3609               	rlcf	i2___awdiv@divisor,f,c
  5223  000ED2  360A               	rlcf	i2___awdiv@divisor+1,f,c
  5224  000ED4  2A0B               	incf	i2___awdiv@counter,f,c
  5225  000ED6                     i2l542:
  5226  000ED6  AE0A               	btfss	i2___awdiv@divisor+1,7,c
  5227  000ED8  D7FA               	goto	i2l543
  5228  000EDA                     i2u77_40:
  5229  000EDA  90D8               	bcf	status,0,c
  5230  000EDC  360D               	rlcf	i2___awdiv@quotient,f,c
  5231  000EDE  360E               	rlcf	i2___awdiv@quotient+1,f,c
  5232  000EE0  5009               	movf	i2___awdiv@divisor,w,c
  5233  000EE2  5C07               	subwf	i2___awdiv@dividend,w,c
  5234  000EE4  500A               	movf	i2___awdiv@divisor+1,w,c
  5235  000EE6  5808               	subwfb	i2___awdiv@dividend+1,w,c
  5236  000EE8  A0D8               	btfss	status,0,c
  5237  000EEA  D005               	goto	i2l546
  5238  000EEC  5009               	movf	i2___awdiv@divisor,w,c
  5239  000EEE  5E07               	subwf	i2___awdiv@dividend,f,c
  5240  000EF0  500A               	movf	i2___awdiv@divisor+1,w,c
  5241  000EF2  5A08               	subwfb	i2___awdiv@dividend+1,f,c
  5242  000EF4  800D               	bsf	i2___awdiv@quotient,0,c
  5243  000EF6                     i2l546:
  5244  000EF6  90D8               	bcf	status,0,c
  5245  000EF8  320A               	rrcf	i2___awdiv@divisor+1,f,c
  5246  000EFA  3209               	rrcf	i2___awdiv@divisor,f,c
  5247  000EFC  2E0B               	decfsz	i2___awdiv@counter,f,c
  5248  000EFE  D7ED               	goto	i2u77_40
  5249  000F00                     i2l547:
  5250  000F00  500C               	movf	i2___awdiv@sign,w,c
  5251  000F02  B4D8               	btfsc	status,2,c
  5252  000F04  D004               	goto	i2l548
  5253  000F06  6C0D               	negf	i2___awdiv@quotient,c
  5254  000F08  1E0E               	comf	i2___awdiv@quotient+1,f,c
  5255  000F0A  B0D8               	btfsc	status,0,c
  5256  000F0C  2A0E               	incf	i2___awdiv@quotient+1,f,c
  5257  000F0E                     i2l548:
  5258  000F0E  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
  5259  000F12  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  5260  000F16  0012               	return	
  5261  000F18                     __end_ofi2___awdiv:
  5262                           	opt stack 0
  5263                           tblptru	equ	0xFF8
  5264                           tblptrh	equ	0xFF7
  5265                           tblptrl	equ	0xFF6
  5266                           tablat	equ	0xFF5
  5267                           prodh	equ	0xFF4
  5268                           prodl	equ	0xFF3
  5269                           intcon	equ	0xFF2
  5270                           postinc0	equ	0xFEE
  5271                           wreg	equ	0xFE8
  5272                           indf2	equ	0xFDF
  5273                           postinc2	equ	0xFDE
  5274                           postdec2	equ	0xFDD
  5275                           fsr2h	equ	0xFDA
  5276                           fsr2l	equ	0xFD9
  5277                           status	equ	0xFD8
  5278                           
  5279 ;; *************** function i2_SendLCD *****************
  5280 ;; Defined at:
  5281 ;;		line 43 in file "LDCScreen.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;  Byte            1    wreg     unsigned char 
  5284 ;;  type            1    4[COMRAM] unsigned char 
  5285 ;; Auto vars:     Size  Location     Type
  5286 ;;  Byte            1    5[COMRAM] unsigned char 
  5287 ;; Return value:  Size  Location     Type
  5288 ;;                  1    wreg      void 
  5289 ;; Registers used:
  5290 ;;		wreg, status,2, status,0, cstack
  5291 ;; Tracked objects:
  5292 ;;		On entry : 0/0
  5293 ;;		On exit  : 0/0
  5294 ;;		Unchanged: 0/0
  5295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5296 ;;      Params:         1       0       0       0
  5297 ;;      Locals:         1       0       0       0
  5298 ;;      Temps:          0       0       0       0
  5299 ;;      Totals:         2       0       0       0
  5300 ;;Total ram usage:        2 bytes
  5301 ;; Hardware stack levels used:    1
  5302 ;; Hardware stack levels required when called:    2
  5303 ;; This function calls:
  5304 ;;		i2_LCDout
  5305 ;; This function is called by:
  5306 ;;		_InterruptHandlerHigh
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310                           	psect	text33
  5311  001326                     __ptext33:
  5312                           	opt stack 0
  5313  001326                     i2_SendLCD:
  5314                           	opt stack 23
  5315                           
  5316                           ;incstack = 0
  5317                           ;i2SendLCD@Byte stored from wreg
  5318  001326  6E06               	movwf	i2SendLCD@Byte,c
  5319                           
  5320                           ;LDCScreen.c: 47: LATAbits.LATA6 =type;
  5321  001328  B005               	btfsc	i2SendLCD@type,0,c
  5322  00132A  D002               	bra	i2u112_45
  5323  00132C  9C89               	bcf	3977,6,c	;volatile
  5324  00132E  D001               	bra	i2u112_46
  5325  001330                     i2u112_45:
  5326  001330  8C89               	bsf	3977,6,c	;volatile
  5327  001332                     i2u112_46:
  5328                           
  5329                           ;LDCScreen.c: 49: LCDout((Byte&0b11110000)>>4);
  5330  001332  3806               	swapf	i2SendLCD@Byte,w,c
  5331  001334  0B0F               	andlw	15
  5332  001336  0B0F               	andlw	15
  5333  001338  EC94  F008         	call	i2_LCDout
  5334                           
  5335                           ;LDCScreen.c: 52: LCDout(Byte&0b00001111);
  5336  00133C  5006               	movf	i2SendLCD@Byte,w,c
  5337  00133E  0B0F               	andlw	15
  5338  001340  EC94  F008         	call	i2_LCDout
  5339                           
  5340                           ;LDCScreen.c: 53: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5341  001344  0E21               	movlw	33
  5342  001346                     i2u200_47:
  5343  001346  2EE8               	decfsz	wreg,f,c
  5344  001348  D7FE               	bra	i2u200_47
  5345  00134A  F000               	nop	
  5346  00134C  0012               	return		;funcret
  5347  00134E                     __end_ofi2_SendLCD:
  5348                           	opt stack 0
  5349                           tblptru	equ	0xFF8
  5350                           tblptrh	equ	0xFF7
  5351                           tblptrl	equ	0xFF6
  5352                           tablat	equ	0xFF5
  5353                           prodh	equ	0xFF4
  5354                           prodl	equ	0xFF3
  5355                           intcon	equ	0xFF2
  5356                           postinc0	equ	0xFEE
  5357                           wreg	equ	0xFE8
  5358                           indf2	equ	0xFDF
  5359                           postinc2	equ	0xFDE
  5360                           postdec2	equ	0xFDD
  5361                           fsr2h	equ	0xFDA
  5362                           fsr2l	equ	0xFD9
  5363                           status	equ	0xFD8
  5364                           
  5365 ;; *************** function i2_LCDout *****************
  5366 ;; Defined at:
  5367 ;;		line 30 in file "LDCScreen.c"
  5368 ;; Parameters:    Size  Location     Type
  5369 ;;  number          1    wreg     unsigned char 
  5370 ;; Auto vars:     Size  Location     Type
  5371 ;;  number          1    3[COMRAM] unsigned char 
  5372 ;; Return value:  Size  Location     Type
  5373 ;;                  1    wreg      void 
  5374 ;; Registers used:
  5375 ;;		wreg, status,2, status,0, cstack
  5376 ;; Tracked objects:
  5377 ;;		On entry : 0/0
  5378 ;;		On exit  : 0/0
  5379 ;;		Unchanged: 0/0
  5380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5381 ;;      Params:         0       0       0       0
  5382 ;;      Locals:         1       0       0       0
  5383 ;;      Temps:          3       0       0       0
  5384 ;;      Totals:         4       0       0       0
  5385 ;;Total ram usage:        4 bytes
  5386 ;; Hardware stack levels used:    1
  5387 ;; Hardware stack levels required when called:    1
  5388 ;; This function calls:
  5389 ;;		i2_E_TOG
  5390 ;; This function is called by:
  5391 ;;		i2_SendLCD
  5392 ;; This function uses a non-reentrant model
  5393 ;;
  5394                           
  5395                           	psect	text34
  5396  001128                     __ptext34:
  5397                           	opt stack 0
  5398  001128                     i2_LCDout:
  5399                           	opt stack 23
  5400                           
  5401                           ;incstack = 0
  5402                           ;i2LCDout@number stored from wreg
  5403  001128  6E04               	movwf	i2LCDout@number,c
  5404                           
  5405                           ;LDCScreen.c: 33: LATD=((number&0b1100)>>2)|(LATD &0b11111100);
  5406  00112A  CF8C F001          	movff	3980,??i2_LCDout	;volatile
  5407  00112E  0EFC               	movlw	252
  5408  001130  1601               	andwf	??i2_LCDout,f,c
  5409  001132  4004               	rrncf	i2LCDout@number,w,c
  5410  001134  42E8               	rrncf	wreg,f,c
  5411  001136  0B3F               	andlw	63
  5412  001138  0B03               	andlw	3
  5413  00113A  1001               	iorwf	??i2_LCDout,w,c
  5414  00113C  6E8C               	movwf	3980,c	;volatile
  5415                           
  5416                           ;LDCScreen.c: 34: LATC=(((number&0b0011)<<1)|(LATD &0b11111001))<<3;
  5417  00113E  CF8C F001          	movff	3980,??i2_LCDout	;volatile
  5418  001142  0EF9               	movlw	249
  5419  001144  1601               	andwf	??i2_LCDout,f,c
  5420  001146  C004  F002         	movff	i2LCDout@number,??i2_LCDout+1
  5421  00114A  0E03               	movlw	3
  5422  00114C  1602               	andwf	??i2_LCDout+1,f,c
  5423  00114E  90D8               	bcf	status,0,c
  5424  001150  3402               	rlcf	??i2_LCDout+1,w,c
  5425  001152  1001               	iorwf	??i2_LCDout,w,c
  5426  001154  6E03               	movwf	(??i2_LCDout+2)& (0+255),c
  5427  001156  90D8               	bcf	status,0,c
  5428  001158  3603               	rlcf	??i2_LCDout+2,f,c
  5429  00115A  90D8               	bcf	status,0,c
  5430  00115C  3603               	rlcf	??i2_LCDout+2,f,c
  5431  00115E  90D8               	bcf	status,0,c
  5432  001160  3403               	rlcf	??i2_LCDout+2,w,c
  5433  001162  6E8B               	movwf	3979,c	;volatile
  5434                           
  5435                           ;LDCScreen.c: 39: E_TOG();
  5436  001164  EC32  F00A         	call	i2_E_TOG	;wreg free
  5437                           
  5438                           ;LDCScreen.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5439  001168  0E03               	movlw	3
  5440  00116A                     i2u201_47:
  5441  00116A  2EE8               	decfsz	wreg,f,c
  5442  00116C  D7FE               	bra	i2u201_47
  5443  00116E  F000               	nop	
  5444  001170  0012               	return		;funcret
  5445  001172                     __end_ofi2_LCDout:
  5446                           	opt stack 0
  5447                           tblptru	equ	0xFF8
  5448                           tblptrh	equ	0xFF7
  5449                           tblptrl	equ	0xFF6
  5450                           tablat	equ	0xFF5
  5451                           prodh	equ	0xFF4
  5452                           prodl	equ	0xFF3
  5453                           intcon	equ	0xFF2
  5454                           postinc0	equ	0xFEE
  5455                           wreg	equ	0xFE8
  5456                           indf2	equ	0xFDF
  5457                           postinc2	equ	0xFDE
  5458                           postdec2	equ	0xFDD
  5459                           fsr2h	equ	0xFDA
  5460                           fsr2l	equ	0xFD9
  5461                           status	equ	0xFD8
  5462                           
  5463 ;; *************** function i2_E_TOG *****************
  5464 ;; Defined at:
  5465 ;;		line 24 in file "LDCScreen.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;		None
  5468 ;; Auto vars:     Size  Location     Type
  5469 ;;		None
  5470 ;; Return value:  Size  Location     Type
  5471 ;;                  1    wreg      void 
  5472 ;; Registers used:
  5473 ;;		wreg
  5474 ;; Tracked objects:
  5475 ;;		On entry : 0/0
  5476 ;;		On exit  : 0/0
  5477 ;;		Unchanged: 0/0
  5478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5479 ;;      Params:         0       0       0       0
  5480 ;;      Locals:         0       0       0       0
  5481 ;;      Temps:          0       0       0       0
  5482 ;;      Totals:         0       0       0       0
  5483 ;;Total ram usage:        0 bytes
  5484 ;; Hardware stack levels used:    1
  5485 ;; This function calls:
  5486 ;;		Nothing
  5487 ;; This function is called by:
  5488 ;;		i2_LCDout
  5489 ;; This function uses a non-reentrant model
  5490 ;;
  5491                           
  5492                           	psect	text35
  5493  001464                     __ptext35:
  5494                           	opt stack 0
  5495  001464                     i2_E_TOG:
  5496                           	opt stack 23
  5497                           
  5498                           ;LDCScreen.c: 25: LATCbits.LATC0 = 1;
  5499                           
  5500                           ;incstack = 0
  5501  001464  808B               	bsf	3979,0,c	;volatile
  5502                           
  5503                           ;LDCScreen.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5504  001466  0E03               	movlw	3
  5505  001468                     i2u202_47:
  5506  001468  2EE8               	decfsz	wreg,f,c
  5507  00146A  D7FE               	bra	i2u202_47
  5508  00146C  F000               	nop	
  5509                           
  5510                           ;LDCScreen.c: 27: LATCbits.LATC0 = 0;
  5511  00146E  908B               	bcf	3979,0,c	;volatile
  5512  001470  0012               	return		;funcret
  5513  001472                     __end_ofi2_E_TOG:
  5514                           	opt stack 0
  5515                           tblptru	equ	0xFF8
  5516                           tblptrh	equ	0xFF7
  5517                           tblptrl	equ	0xFF6
  5518                           tablat	equ	0xFF5
  5519                           prodh	equ	0xFF4
  5520                           prodl	equ	0xFF3
  5521                           intcon	equ	0xFF2
  5522                           postinc0	equ	0xFEE
  5523                           wreg	equ	0xFE8
  5524                           indf2	equ	0xFDF
  5525                           postinc2	equ	0xFDE
  5526                           postdec2	equ	0xFDD
  5527                           fsr2h	equ	0xFDA
  5528                           fsr2l	equ	0xFD9
  5529                           status	equ	0xFD8
  5530                           
  5531 ;; *************** function _getCharSerial *****************
  5532 ;; Defined at:
  5533 ;;		line 175 in file "newFILE.c"
  5534 ;; Parameters:    Size  Location     Type
  5535 ;;		None
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;		None
  5538 ;; Return value:  Size  Location     Type
  5539 ;;                  1    wreg      unsigned char 
  5540 ;; Registers used:
  5541 ;;		wreg, status,2
  5542 ;; Tracked objects:
  5543 ;;		On entry : 0/0
  5544 ;;		On exit  : 0/0
  5545 ;;		Unchanged: 0/0
  5546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5547 ;;      Params:         0       0       0       0
  5548 ;;      Locals:         0       0       0       0
  5549 ;;      Temps:          0       0       0       0
  5550 ;;      Totals:         0       0       0       0
  5551 ;;Total ram usage:        0 bytes
  5552 ;; Hardware stack levels used:    1
  5553 ;; This function calls:
  5554 ;;		Nothing
  5555 ;; This function is called by:
  5556 ;;		_InterruptHandlerHigh
  5557 ;; This function uses a non-reentrant model
  5558 ;;
  5559                           
  5560                           	psect	text36
  5561  00147C                     __ptext36:
  5562                           	opt stack 0
  5563  00147C                     _getCharSerial:
  5564                           	opt stack 25
  5565                           
  5566                           ;newFILE.c: 176: while (!PIR1bits.RCIF);
  5567                           
  5568                           ;incstack = 0
  5569  00147C  AA9E               	btfss	3998,5,c	;volatile
  5570  00147E  D7FE               	goto	_getCharSerial
  5571                           
  5572                           ;newFILE.c: 177: return RCREG;
  5573  001480  50AE               	movf	4014,w,c	;volatile
  5574  001482  0012               	return	
  5575  001484                     __end_of_getCharSerial:
  5576                           	opt stack 0
  5577                           tblptru	equ	0xFF8
  5578                           tblptrh	equ	0xFF7
  5579                           tblptrl	equ	0xFF6
  5580                           tablat	equ	0xFF5
  5581                           prodh	equ	0xFF4
  5582                           prodl	equ	0xFF3
  5583                           intcon	equ	0xFF2
  5584                           postinc0	equ	0xFEE
  5585                           wreg	equ	0xFE8
  5586                           indf2	equ	0xFDF
  5587                           postinc2	equ	0xFDE
  5588                           postdec2	equ	0xFDD
  5589                           fsr2h	equ	0xFDA
  5590                           fsr2l	equ	0xFD9
  5591                           status	equ	0xFD8
  5592                           tblptru	equ	0xFF8
  5593                           tblptrh	equ	0xFF7
  5594                           tblptrl	equ	0xFF6
  5595                           tablat	equ	0xFF5
  5596                           prodh	equ	0xFF4
  5597                           prodl	equ	0xFF3
  5598                           intcon	equ	0xFF2
  5599                           postinc0	equ	0xFEE
  5600                           wreg	equ	0xFE8
  5601                           indf2	equ	0xFDF
  5602                           postinc2	equ	0xFDE
  5603                           postdec2	equ	0xFDD
  5604                           fsr2h	equ	0xFDA
  5605                           fsr2l	equ	0xFD9
  5606                           status	equ	0xFD8
  5607                           
  5608                           	psect	rparam
  5609  0000                     tblptru	equ	0xFF8
  5610                           tblptrh	equ	0xFF7
  5611                           tblptrl	equ	0xFF6
  5612                           tablat	equ	0xFF5
  5613                           prodh	equ	0xFF4
  5614                           prodl	equ	0xFF3
  5615                           intcon	equ	0xFF2
  5616                           postinc0	equ	0xFEE
  5617                           wreg	equ	0xFE8
  5618                           indf2	equ	0xFDF
  5619                           postinc2	equ	0xFDE
  5620                           postdec2	equ	0xFDD
  5621                           fsr2h	equ	0xFDA
  5622                           fsr2l	equ	0xFD9
  5623                           status	equ	0xFD8
  5624                           
  5625                           	psect	temp
  5626  00003D                     btemp:
  5627                           	opt stack 0
  5628  00003D                     	ds	1
  5629  0000                     int$flags	set	btemp
  5630  0000                     wtemp8	set	btemp+1
  5631  0000                     ttemp5	set	btemp+1
  5632  0000                     ttemp6	set	btemp+4
  5633  0000                     ttemp7	set	btemp+8
  5634                           tblptru	equ	0xFF8
  5635                           tblptrh	equ	0xFF7
  5636                           tblptrl	equ	0xFF6
  5637                           tablat	equ	0xFF5
  5638                           prodh	equ	0xFF4
  5639                           prodl	equ	0xFF3
  5640                           intcon	equ	0xFF2
  5641                           postinc0	equ	0xFEE
  5642                           wreg	equ	0xFE8
  5643                           indf2	equ	0xFDF
  5644                           postinc2	equ	0xFDE
  5645                           postdec2	equ	0xFDD
  5646                           fsr2h	equ	0xFDA
  5647                           fsr2l	equ	0xFD9
  5648                           status	equ	0xFD8


Data Sizes:
    Strings     43
    Constant    10
    Data        0
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     42      60
    BANK0           160     54     157
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(3) Largest target is 8191
		 -> STR_4(CODE[19]), STR_3(CODE[12]), ROM(CODE[8191]), STR_2(CODE[6]), 
		 -> STR_1(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> main@buf(BANK0[16]), IRScreen2@buf(COMRAM[16]), IRScreen@buf(COMRAM[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    FindIR@R_IR	PTR unsigned int  size(2) Largest target is 2
		 -> main@RightIR(BANK0[2]), 

    FindIR@L_IR	PTR unsigned int  size(2) Largest target is 2
		 -> main@LeftIR(BANK0[2]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> main@buf(BANK0[16]), IRScreen2@buf(COMRAM[16]), IRScreen@buf(COMRAM[16]), 

    back@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    back@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    forward@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    forward@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnRight@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnRight@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnLeft@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnLeft@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    stop@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    stop@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S74DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S74DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), motorL(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_LCD_String
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _back->_setMotorPWM
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _forward->_setMotorPWM
    _setMotorPWM->___wmul
    ___awdiv->___wmul
    _SetLine->_SendLCD
    _Motor_Init->_initPWM
    _LCD_String->_SendLCD
    _LCD_Init->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_stop
    i2_stop->i2_setMotorPWM
    i2_setMotorPWM->i2___awdiv
    i2___awdiv->i2___wmul
    i2_SendLCD->i2_LCDout

Critical Paths under _main in BANK0

    _main->_TrackIR
    _sprintf->___lwmod
    _back->_setMotorPWM
    _TrackIR->_stop
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _forward->_setMotorPWM
    _setMotorPWM->___awdiv

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0   39872
                                             28 BANK0     26    26      0
                             _FindIR
                            _IR_Init
                               _Init
                      _InterruptINIT
                           _LCD_Init
                         _LCD_String
                         _Motor_Init
                            _SendLCD
                            _SetLine
                            _TrackIR
                            ___lwdiv
                               _back
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             26    19      7    2561
                                              4 BANK0     17    10      7
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                             41 COMRAM     1     1      0
                                              0 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                             34 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _back                                                 4     0      4    3076
                                             13 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _TrackIR                                              9     5      4   16029
                                             19 BANK0      9     5      4
                            _forward
                           _fwdCount
                          _leftCount
                         _rightCount
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            4     0      4    3436
                                             13 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             4     0      4    3796
                                             13 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    5048
                                             13 BANK0      6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _rightCount                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _leftCount                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _fwdCount                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _forward                                              4     0      4    3256
                                             13 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          7     5      2    2834
                                             40 COMRAM     2     0      2
                                              8 BANK0      5     5      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     504
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     717
                                              0 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1040
                                             40 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _Motor_Init                                           2     2      0      90
                                             36 COMRAM     2     2      0
                            _initPWM
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     2      0      45
                                             34 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           2     0      2    1421
                                             40 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0    1040
                                             40 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1     996
                                             38 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      44
                                             34 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InterruptINIT                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IR_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FindIR                                               6     2      4     196
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _InterruptHandlerHigh                                 7     7      0    1543
                                             27 COMRAM     7     7      0
                      _getCharSerial
                          i2_SendLCD
                             i2_stop
 ---------------------------------------------------------------------------------
 (6) i2_stop                                               6     2      4    1268
                                             21 COMRAM     6     2      4
                      i2_setMotorPWM
 ---------------------------------------------------------------------------------
 (7) i2_setMotorPWM                                        7     5      2    1074
                                             14 COMRAM     7     5      2
                          i2___awdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     193
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___awdiv                                            8     4      4     298
                                              6 COMRAM     8     4      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) i2_SendLCD                                            2     1      1     136
                                              4 COMRAM     2     1      1
                           i2_LCDout
 ---------------------------------------------------------------------------------
 (7) i2_LCDout                                             4     4      0      44
                                              0 COMRAM     4     4      0
                            i2_E_TOG
 ---------------------------------------------------------------------------------
 (8) i2_E_TOG                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _getCharSerial                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FindIR
   _IR_Init
   _Init
   _InterruptINIT
   _LCD_Init
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _Motor_Init
     _initPWM
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _TrackIR
     _forward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _fwdCount
     _leftCount
     _rightCount
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   ___lwdiv
   _back
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnRight
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)
   _getCharSerial
   i2_SendLCD
     i2_LCDout
       i2_E_TOG
   i2_stop
     i2_setMotorPWM
       i2___awdiv
         i2___wmul (ARG)
       i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     36      9D       5       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2A      3C       1       63.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D9       3        0.0%
DATA                 0      0      D9      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sun Dec 09 17:57:36 2018

                              l32 0972                                l33 09BC  
                              l34 0A58                                l94 123A  
                              l95 124C                                l99 1218  
                    ___awdiv@sign 00CC               ___wmul@multiplicand 0025  
                     ?_LCD_String 0029                       main@RightIR 00F8  
                             l100 11FA                               l300 0C12  
                             l301 0C22                               l302 0C3C  
                             l231 05B0                               l223 0414  
                             l311 0D16                               l232 0560  
                             l224 03C4                               l312 0CC0  
                             l305 0C28                               l242 13CA  
                             l306 0C36                               l227 04E8  
                             l307 0C72                               l236 0628  
                             l228 0498                               l308 0C90  
                             l237 0676                               l280 08DC  
                             l272 069A                               l281 07D4  
                             l282 081A                               l275 0728  
                             l540 0E34                               l284 0862  
                             l277 075A                               l542 0E52  
                             l286 08AA                               l278 07C0  
                             l543 0E4A                               l546 0E72  
                             l802 1080                               l547 0E7C  
                             l539 0E24                               l803 108A  
                             l548 0E8A                               l812 11A2  
                             l813 11AC                               l808 118A  
                             l809 1182                               l798 1060  
                             l799 1058                               u820 1064  
                             u805 1308                               u806 130A  
                             wreg 000FE8                      __CFG_LVP$OFF 000000  
           __end_ofi2_setMotorPWM 0C06                              l2639 0C1C  
                            l2669 0CB2                              l2787 0676  
                            STR_1 032A                              STR_2 0330  
                            STR_3 031E                              STR_4 030B  
                            u1300 0E56                              _LATA 000F89  
                            _LATB 000F8A                              _LATC 000F8B  
                            _LATD 000F8C                              u1354 0A4A  
                            u1355 0A46                              u1364 0A74  
                            u1540 04FA                              u1380 118E  
                            u1365 0A70                              u1550 050A  
                            u1470 0CBA                              u1480 0D1E  
                            u1570 05C2                              u1490 0D4A  
                            u1580 05D2                              u1807 053C  
                            u1817 058C                              u1907 0DA0  
                            u1827 0604                              u1747 0738  
                            u1917 0DB8                              u1837 0654  
                            u1757 08B6                              u1927 0DCA  
                            u1847 0F4C                              u1767 03A0  
                            u1937 0DE0                              u1857 124E  
                            u1777 03F0                              u1947 0DF4  
                            u1867 1212                              u1787 0474  
                            u1957 0E06                              u1877 0D72  
                            u1797 04C4                              u1967 131E  
                            u1887 0D82                              u1977 10D6  
                            u1897 0D92                              u1987 145A  
                            i2l32 0AFE                              i2l33 0B44  
                            i2l34 0BDC                   __end_ofi2_E_TOG 1472  
                            _Init 13C0                   __end_of_IR_Init 1456  
                            _back 1256                              _main 068E  
                            _read 00C6                              fsr2h 000FDA  
                            indf2 000FDF                              fsr2l 000FD9  
                            btemp 003D                              _stop 0F18  
                            prodh 000FF4                              prodl 000FF3  
                            start 0094                      ___param_bank 000000  
                 __end_of_SendLCD 1326                   __end_of_SetLine 1256  
                __end_of_LCD_Init 0E0E                   __end_of_TrackIR 068E  
                           ?_Init 0001                             ?_back 00D4  
                           ?_main 0001                   __end_of___awdiv 0E94  
                           ?_stop 00D4                   ___awdiv@divisor 00C9  
                           _PDC0H 000F78                             _PDC1H 000F76  
                           _PDC0L 000F79                             _PDC1L 000F77  
                           _T5CON 000FB7                   __end_of___lwdiv 1094  
                 __end_of___lwmod 11B6                             i2l260 003A  
                           i2l261 005E                             i2l257 0080  
                           i2l540 0EB8                             i2l542 0ED6  
                           i2l543 0ECE                             i2l546 0EF6  
                           i2l547 0F00                             i2l539 0EA8  
                           i2l548 0F0E                   ___awdiv@counter 00CB  
                           _RCREG 000FAE                             _E_TOG 1456  
                __end_ofi2_LCDout 1172                             _SPBRG 000FAF  
                           _TRISA 000F92                             _TRISC 000F94  
                           _TRISD 000F95                   __end_of_initPWM 11F8  
                 __end_of_dpowers 030B                   __end_of_forward 12FE  
                           main@i 00FC                __size_ofi2_SendLCD 0028  
                           tablat 000FF5                  __end_ofi2___wmul 13C0  
                           ttemp5 003E                             ttemp6 0041  
                           ttemp7 0045                             status 000FD8  
                           wtemp8 003E               __size_of_LCD_String 0030  
                 __end_of_sprintf 0D58                __size_ofi2___awdiv 0084  
                  __CFG_MCLRE$OFF 000000                   __initialization 134E  
                    __end_of_Init 13E2                      __end_of_back 1280  
                    __end_of_main 08F2                      __end_of_stop 0F82  
                  __CFG_OSC$IRCIO 000000                  LCD_String@string 0029  
                          ??_Init 0023                            ??_back 002B  
                          ??_main 00E3                            ??_stop 00D8  
                   __activetblptr 000002                            ?_E_TOG 0001  
      InterruptHandlerHigh@readIn 0022                         ??i2_E_TOG 0001  
                       ??_IR_Init 0023                      ?_setMotorPWM 0029  
                ___awdiv@dividend 00C7                            _ANSEL0 000FB8  
                          _ANSEL1 000FB9                            i2l2855 005E  
                          _LCDout 1094                       SendLCD@Byte 0028  
                          _OSCCON 000FD3             __end_of_getCharSerial 1484  
                          _PTCON0 000F7F                            _PTCON1 000F7E  
                          _SPBRGH 000FB0                            _PTPERH 000F7A  
                          _PTPERL 000F7B                       SendLCD@type 0027  
                          _FindIR 10DE                            i2_stop 0F82  
                       ??_SendLCD 0028                         ??_SetLine 0029  
                       ??_TrackIR 00DE                        _Motor_Init 0FEC  
                __end_of_fwdCount 143C                            ___wmul 1374  
                       ??___awdiv 0029            __size_of_InterruptINIT 000A  
                       ??___lwdiv 0027                         ??___lwmod 002A  
                          clear_0 1354                            clear_1 1360  
                ___awdiv@quotient 00CD                 __end_ofi2_SendLCD 134E  
                  TrackIR@RightIR 00DC                            _motorL 0034  
                          _motorR 002B                    i2___awdiv@sign 000C  
                       ??_initPWM 0023                         ??_forward 002B  
               __end_ofi2___awdiv 0F18                      __mediumconst 0000  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                         ??_sprintf 00D2  
                __end_of_turnLeft 12D4                        __accesstop 0060  
         __end_of__initialization 1366                         ?_LCD_Init 0001  
                   ___rparam_used 000001                       SetLine@line 0029  
                   __end_of_E_TOG 1464                         ?i2_LCDout 0001  
                  __pcstackCOMRAM 0001                      ??_LCD_String 002B  
                       ?i2___wmul 0001                           ??_E_TOG 0023  
   __size_of_InterruptHandlerHigh 008C                     _InterruptINIT 1472  
              __size_of_leftCount 001E                        __pbssBANK0 0060  
                         ?_LCDout 0001                        ??_LCD_Init 0029  
              __end_of_LCD_String 1228                           ?_FindIR 0023  
                         ?i2_stop 0016                        ??i2_LCDout 0001  
                     ?_Motor_Init 0001                           ?___wmul 0023  
                         _CAP1CON 000F63                           _CAP2CON 000F62  
                         _DFLTCON 000F60                        ??i2___wmul 0005  
                      _arrayCount 0060                           i2_E_TOG 1464  
                         i2u77_40 0EDA                           _IR_Init 143C  
                  ?_InterruptINIT 0001                           _PWMCON0 000F6F  
                         _PWMCON1 000F6E                         ?_fwdCount 0001  
            __size_of_setMotorPWM 0192                   __size_of_LCDout 004A  
              __size_of_turnRight 002A                   __size_of_FindIR 004A  
                         _SendLCD 12FE                   __size_ofi2_stop 006A  
                         __Hparam 0000                           _SetLine 1228  
                         __Lparam 0000                           _TrackIR 0338  
                         ___awdiv 0E0E                   __size_of___wmul 0026  
                         ___lwdiv 1042                           ___lwmod 1172  
                    __psmallconst 0300            __size_ofi2_setMotorPWM 0182  
               __end_of_leftCount 141E                           back@m_L 00D4  
                         back@m_R 00D6                           __pcinit 134E  
                         __ramtop 0300                         ?_turnLeft 00D4  
                         __ptext0 068E                           __ptext1 0C06  
                         __ptext2 1172                           __ptext3 1042  
                         __ptext4 1256                           __ptext5 0338  
                         __ptext6 1280                           __ptext7 12AA  
                         __ptext8 0F18                           __ptext9 13E2  
                         _initPWM 11B6                           _counter 00C4  
                         _dpowers 0301                           _forward 12D4  
                    LCDout@number 0026               __size_of_Motor_Init 0056  
                         main@fin 00F7                           main@buf 00E7  
                         _sprintf 0C06              end_of_initialization 1366  
                      ??_fwdCount 0023                setMotorPWM@PWMduty 00D2  
                   __Lmediumconst 0000               i2___wmul@multiplier 0001  
                      _rightCount 13E2                      turnRight@m_L 00D4  
                    turnRight@m_R 00D6                         _RCSTAbits 000FAB  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc2 000FDE                           stop@m_L 00D4  
                         stop@m_R 00D6                        ??_turnLeft 002B  
                       _PORTCbits 000F82                 __end_of_turnRight 12AA  
                       i2_SendLCD 1326                   ??_InterruptINIT 0023  
                       _TRISBbits 000F93                         _TRISCbits 000F94  
                      main@LeftIR 00FA                         i2___awdiv 0E94  
                   i2_setMotorPWM 0A84                    __end_of_LCDout 10DE  
                       _TXSTAbits 000FAC                i2___awdiv@dividend 0007  
               __size_of_LCD_Init 00B6                    __end_of_FindIR 1128  
                  __end_ofi2_stop 0FEC                 __size_ofi2_LCDout 004A  
                  __end_of___wmul 139A                       _BAUDCONbits 000FAA  
          __size_of_getCharSerial 0008                  i2___wmul@product 0005  
                      ?i2_SendLCD 0005               start_initialization 134E  
              i2___awdiv@quotient 000D                 __size_ofi2___wmul 0026  
                  ?i2_setMotorPWM 000F                        ?i2___awdiv 0007  
                       i2stop@m_L 0016                         i2stop@m_R 0018  
                   initPWM@period 0023                          ??_LCDout 0023  
                     ?_rightCount 0001      __end_of_InterruptHandlerHigh 0094  
                        ??_FindIR 0027                          ??i2_stop 001A  
                    ??_Motor_Init 0025                     TrackIR@LeftIR 00DA  
                        ??___wmul 0027                        forward@m_L 00D4  
                      forward@m_R 00D6                       __pbssCOMRAM 002B  
                   __pcstackBANK0 00C7                          ?i2_E_TOG 0001  
                        ?_IR_Init 0001                    i2LCDout@number 0004  
              __end_of_Motor_Init 1042                       sprintf@flag 00D5  
               __size_of_fwdCount 001E                       sprintf@prec 00DA  
                   _getCharSerial 147C                          ?_SendLCD 0027  
                        ?_SetLine 0001                  ___lwdiv@dividend 0023  
                        ?_TrackIR 00DA                         __pintcode 0008  
                        ?___awdiv 00C7                          ?___lwdiv 0023  
                        ?___lwmod 00C7                          _CAP1BUFH 000F69  
                        _CAP1BUFL 000F68                          _CAP2BUFH 000F67  
                        _CAP2BUFL 000F66                          ?_initPWM 0001  
                     __smallconst 0300                         _leftCount 1400  
             __size_of_rightCount 001E                    __size_of_E_TOG 000E  
                        ?_forward 00D4                 __size_of_turnLeft 002A  
                     ??i2_SendLCD 0006                   ??i2_setMotorPWM 0011  
                   ??_setMotorPWM 00CF                  ___lwdiv@quotient 0027  
                     ??i2___awdiv 000B                          ?_sprintf 00CB  
                     turnLeft@m_L 00D4                       turnLeft@m_R 00D6  
                  ?_getCharSerial 0001                          _LCD_Init 0D58  
                  ___wmul@product 0027                          _LATAbits 000F89  
                        _LATCbits 000F8B                          _PIE1bits 000F9D  
                        i2u112_45 1330                          i2u112_46 1332  
                        i2u200_47 1346                          i2u201_47 116A  
                        i2u202_47 1468                          i2u142_44 0BD0  
                        i2u142_45 0BCC                          i2u143_44 0BF8  
                        i2u143_45 0BF4                          i2u163_40 0050  
                        i2u164_40 0066                          _PIR1bits 000F9E  
                        i2_LCDout 1128                          i2u199_47 0FB4  
                        _RCONbits 000FD0                 ___wmul@multiplier 0023  
                        i2___wmul 139A                      setMotorPWM@m 0029  
                      ?_leftCount 0001              _InterruptHandlerHigh 0008  
               i2___awdiv@divisor 0009                 i2___awdiv@counter 000B  
InterruptHandlerHigh@read_counter 0020                         _turnRight 1280  
                __size_ofi2_E_TOG 000E                  __size_of_IR_Init 001A  
              Motor_Init@PWMcycle 0025                     i2SendLCD@Byte 0006  
             __end_of_setMotorPWM 0A84                     i2SendLCD@type 0005  
                        __Hrparam 0000                  __size_of_SendLCD 0028  
                        __Lrparam 0000                  __size_of_SetLine 002E  
                __size_of_TrackIR 0356                  __size_of___awdiv 0086  
                    TrackIR@limit 00E1             i2___wmul@multiplicand 0003  
                __size_of___lwdiv 0052                  __size_of___lwmod 0044  
           ?_InterruptHandlerHigh 0001                        sprintf@val 00D8  
                __size_of_initPWM 0042                  __size_of_forward 002A  
                 ___lwdiv@divisor 0025                   ___lwdiv@counter 0029  
                      ?_turnRight 00D4             __end_of_InterruptINIT 147C  
                        __ptext10 1400                          __ptext11 141E  
                        __ptext20 0D58                          __ptext12 12D4  
                        __ptext21 12FE                          __ptext13 08F2  
                        __ptext30 0A84                          __ptext22 1094  
                        __ptext14 1374                          __ptext31 139A  
                        __ptext23 1456                          __ptext15 0E0E  
                        __ptext32 0E94                          __ptext24 1472  
                        __ptext16 1228                          __ptext33 1326  
                        __ptext25 13C0                          __ptext17 0FEC  
                        __ptext34 1128                          __ptext26 143C  
                        __ptext18 11B6                          __ptext35 1464  
                        __ptext27 10DE                          __ptext19 11F8  
                        __ptext36 147C                          __ptext29 0F82  
                 ??_getCharSerial 0001                          _fwdCount 141E  
                __size_of_sprintf 0152              i2setMotorPWM@PWMduty 0014  
                   __size_of_Init 0022                     __size_of_back 002A  
                    ??_rightCount 0023                     __size_of_main 0264  
                   __size_of_stop 006A                          int$flags 003D  
                      _LCD_String 11F8                          _turnLeft 12AA  
                     ??_leftCount 0023                        _INTCONbits 000FF2  
              __end_of_rightCount 1400                       _setMotorPWM 08F2  
                      FindIR@L_IR 0023                        FindIR@R_IR 0025  
                        intlevel2 0000                         sprintf@ap 00D6  
                       sprintf@sp 00CB                  ___lwmod@dividend 00C7  
                      _OSCCONbits 000FD3            ??_InterruptHandlerHigh 001C  
                        sprintf@c 00DB                          sprintf@f 00CD  
                 ___lwmod@divisor 00C9                   ___lwmod@counter 002A  
                  i2setMotorPWM@m 000F                       ??_turnRight 002B  
